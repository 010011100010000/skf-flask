AWSTemplateFormatVersion: 2010-09-09
Description: Sets up a running instance of the OWASP Security Knowledge Framework
Parameters:
  Subnets:
    Description: The subnets where the OWASP SKF will run
    Type: 'List<AWS::EC2::Subnet::Id>'
  VpcId:
    Description: The VPC in which the OWASP SKF will run
    Type: 'AWS::EC2::VPC::Id'
  KeyName:
    Description: An ssh keypair to put on the OWASP SKF instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  HttpsAccessCidr:
    Description: >-
      A CIDR from which https access to the OWASP SKF's load balancers is
      allowed
    Type: String
    AllowedPattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
  SSHAccessCidr:
    Description: A CIDR from which SSH access to the OWASP SKF instance is allowed
    Type: String
    AllowedPattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
  SSLCertificateArn:
    Description: ARN of SSL certifcate the ELBs should use
    Type: String
  DataBucketName:
    Description: Name to use for the S3 bucket that persists the database
    Type: String
  AMI:
    Description: 'Base AMI for SKF instances (Ubuntu 14.04 LTS, "trusty")'
    Type: 'AWS::EC2::Image::Id'
Mappings:
  Constants:
    App:
      Value: security-knowledge-framework
    Stack:
      Value: security
Resources:
  DataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName:
        Ref: DataBucketName
      Tags:
        - Key: App
          Value:
            'Fn::FindInMap':
              - Constants
              - App
              - Value
        - Key: Stack
          Value:
            'Fn::FindInMap':
              - Constants
              - Stack
              - Value
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 51b003a6-79f4-4f91-ab29-e382d4edc27a
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTPS access to the load balancer from the CIDR block
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: HttpsAccessCidr
      Tags:
        - Key: App
          Value:
            'Fn::FindInMap':
              - Constants
              - App
              - Value
        - Key: Stack
          Value:
            'Fn::FindInMap':
              - Constants
              - Stack
              - Value
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 13c09467-f573-4343-8526-22f8991e030e
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SKF EC2 instance
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          SourceSecurityGroupId:
            Ref: LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SSHAccessCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value:
            'Fn::FindInMap':
              - Constants
              - App
              - Value
        - Key: Stack
          Value:
            'Fn::FindInMap':
              - Constants
              - Stack
              - Value
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ffcf1347-751d-4654-8238-231e8347c91a
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: skf-instance-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'arn:aws:s3'
                      - ':::'
                      - Ref: DataBucketName
                Action:
                  - 's3:ListBucket'
              - Effect: Allow
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'arn:aws:s3'
                      - ':::'
                      - Ref: DataBucketName
                      - /*
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e170ad1c-7ed6-4480-abf3-5862ce2634af
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5bddce47-e2a1-40f9-929f-6ce84adf415a
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        - LoadBalancerPort: 443
          Protocol: HTTPS
          SSLCertificateId:
            Ref: SSLCertificateArn
          InstanceProtocol: HTTP
          InstancePort: 8001
      CrossZone: true
      HealthCheck:
        Target: 'HTTP:8001/'
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 10
      Subnets:
        Ref: Subnets
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Tags:
        - Key: App
          Value:
            'Fn::FindInMap':
              - Constants
              - App
              - Value
        - Key: Stack
          Value:
            'Fn::FindInMap':
              - Constants
              - Stack
              - Value
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 130bc12f-eb97-4c18-9be1-24bf7f9f1447
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: AMI
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: InstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        'Fn::Base64':
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -ev
              - s3bucket=
              - Ref: DataBucketName
              - >

                # install dependencies

                locale-gen en_GB.UTF-8

                apt-get --yes update

                apt-get --yes upgrade

                add-apt-repository ppa:jonathonf/python-3.6
                apt install python3.6
                wget https://bootstrap.pypa.io/get-pip.py
                python3.6 get-pip.py
                
                apt install nginx
                apt install npm
                apt install ng-common
                npm install n -g
                n stable

                cd /tmp; git clone git://github.com/blabla1337/skf-flask.git
                cd /tmp/skf-flask; pip3.6 install -r requirements.txt 
                
                cd /tmp/skf-flask/Angular; npm install
                cd /tmp/skf-flask/Angular; ng build --aot --configuration=production 
                rm /etc/nginx/sites-enabled/default
                cp /tmp/skf-flask/Local/site-tls.conf /etc/nginx/sites-enabled/default
                
                mv /tmp/skf-flask /
                
                # Change the JWT_SECRET value with below command
                perl -pi -e "s/JWT_SECRET = ''/JWT_SECRET = 'THIS_SHOULD_BE_CHANGED_AND_RANDOM'/" /skf-flask/skf/settings.py
                # Change the domain value with below command
                perl -pi -e "s/\*/https:\/\/demo.securityknowledgeframework.org/" /skf-flask/skf/settings.py
                # Change the domain value with below command
                perl -pi -e "s/https:\/\/localhost\/api/https:\/\/demo.securityknowledgeframework.org\/api/" /skf-flask/Angular/src/environments/environment.prod.ts


                # Certificates stored in /skf-flask/ dir
                openssl req -nodes -newkey rsa:4096 -keyout /skf-flask/server.key -out /skf-flask/server.csr  -subj "/CN=OWASP-SKF"
                openssl x509 -req -days 365 -in /skf-flask/server.csr  -signkey /skf-flask/server.key -out ./skf-flask/server.pem
                
                # Start nginx
                sleep 5
                sudo nginx
                
                pip3.6 install awscli

                cd /skf-flask/skf/db/
                # fetch db from persistent storage

                aws s3 cp s3://$s3bucket/owaspskf/db.sqlite db.sqlite || true


                # schedule regular sync of the sqlite database

                touch /skf-flask/cron-lastrun.log

                chown www-data /skf-flask/cron-lastrun.log

                cat <<SKF_CRON > /etc/cron.d/skf

                */5 * * * *  www-data  /usr/local/bin/aws s3 cp
                /skf-flask/skf/db/db.sqlite s3://$s3bucket/owaspskf/db.sqlite >
                /skf-flask/cron-lastrun.log 2>&1

                SKF_CRON
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5fe98e24-42cd-4980-b82e-6e043bd2bb8b
  AutoscalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        'Fn::GetAZs': ''
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      LoadBalancerNames:
        - Ref: LoadBalancer
      Tags:
        - Key: Name
          Value:
            'Fn::FindInMap':
              - Constants
              - App
              - Value
          PropagateAtLaunch: true
        - Key: App
          Value:
            'Fn::FindInMap':
              - Constants
              - App
              - Value
          PropagateAtLaunch: true
        - Key: Stack
          Value:
            'Fn::FindInMap':
              - Constants
              - Stack
              - Value
          PropagateAtLaunch: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1389ca64-b6fa-4d46-8bb5-2f881bdb55db
Outputs:
  LoadBalancerUrl:
    Value:
      'Fn::GetAtt':
        - LoadBalancer
        - DNSName
Metadata:
  'AWS::CloudFormation::Designer':
    e170ad1c-7ed6-4480-abf3-5862ce2634af:
      size:
        width: 60
        height: 60
      position:
        x: -70
        'y': 100
      z: 1
      embeds: []
    5bddce47-e2a1-40f9-929f-6ce84adf415a:
      size:
        width: 60
        height: 60
      position:
        x: 80
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - e170ad1c-7ed6-4480-abf3-5862ce2634af
    13c09467-f573-4343-8526-22f8991e030e:
      size:
        width: 60
        height: 60
      position:
        x: 10
        'y': 210
      z: 1
      embeds: []
    130bc12f-eb97-4c18-9be1-24bf7f9f1447:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - 13c09467-f573-4343-8526-22f8991e030e
    ffcf1347-751d-4654-8238-231e8347c91a:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 90
      z: 1
      embeds: []
    5fe98e24-42cd-4980-b82e-6e043bd2bb8b:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - ffcf1347-751d-4654-8238-231e8347c91a
    1389ca64-b6fa-4d46-8bb5-2f881bdb55db:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - 5fe98e24-42cd-4980-b82e-6e043bd2bb8b
        - 130bc12f-eb97-4c18-9be1-24bf7f9f1447
    51b003a6-79f4-4f91-ab29-e382d4edc27a:
      size:
        width: 60
        height: 60
      position:
        x: 230
        'y': 330
      z: 1
      embeds: []
